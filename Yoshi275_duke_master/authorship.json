[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "run {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 29,
      "-": 15
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Handles addition of tasks upon user input eg. \"todo complete CS2103\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Enumerate task type options."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor that takes in keywords and indentation for execution of addition function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param command First keyword entered by user determining task type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param commandDetails Following integer indicating task name and date (if relevant)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param indent Constant indentation from start of line (formatting)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public AddCommand(String command, String commandDetails, String indent) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(command, commandDetails, indent);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Handles addition of task from list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param tasks Contains task list and operations to add from list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param ui Handles user interaction"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param storage Updates new task list to file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws DukeException Custom exception"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            String response \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            String befTaskAddMessage \u003d \"Got it. I\u0027ve added this task: \\n\" + indent + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            String aftTaskAddMessage \u003d \"Now you have \" + (tasks.getList().size() + 1) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            if (!(commandDetails.equals(\" \") || commandDetails.equals(\"\"))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                if (command.equals(ADD_TYPE_TODO)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    tasks.addTask(new Task(commandDetails, ADD_TYPE_TODO, false));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    assert tasks.getList().get(tasks.getList().size() - 1).getTaskType().equals(\"[T]\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                            : \"To-do task not added\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    response \u003d ui.printResponse(befTaskAddMessage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                            + tasks.getList().get(tasks.getList().size() - 1) + \"\\n \" + indent"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                            + aftTaskAddMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    storage.updateTodoFile(tasks.getListString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                } else if (command.equals(ADD_TYPE_DEADLINE)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        tasks.addDateTask(commandDetails.split(\" /by \")[0],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                commandDetails.split(\" /by \")[1], ADD_TYPE_DEADLINE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        assert tasks.getList().get(tasks.getList().size() - 1).getTaskType().equals(\"[D]\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                : \"Deadline task not added\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        response \u003d ui.printResponse(befTaskAddMessage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                + tasks.getList().get(tasks.getList().size() - 1) + \"\\n \" + indent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                + aftTaskAddMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        storage.updateTodoFile(tasks.getListString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    } catch (Exception ex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        response \u003d ui.printError(\"☹ OOPS!!! Deadlines require a specific datetime \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                + \"after /by, in format \u0027dd/MM/yyyy HHmm\u0027\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                } else if (command.equals(ADD_TYPE_EVENT)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        tasks.addDateTask(commandDetails.split(\" /at \")[0],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                commandDetails.split(\" /at \")[1], ADD_TYPE_EVENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        assert tasks.getList().get(tasks.getList().size() - 1).getTaskType().equals(\"[E]\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                : \"Event task not added\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        response \u003d ui.printResponse(befTaskAddMessage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                + tasks.getList().get(tasks.getList().size() - 1) + \"\\n \" + indent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                + aftTaskAddMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        storage.updateTodoFile(tasks.getListString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    } catch (Exception ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        response \u003d ui.printError(\"OOPS!!! Events require a specific datetime after /at, \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                + \"in format \u0027dd/MM/yyyy HHmm\u0027\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                response \u003d ui.printError(\"OOPS!!! The description of a \" + command + \" cannot be empty.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } catch (Exception err) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DukeException(err.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 80
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Abstract class for all Commands which handle changes to user interaction, task list and saved todo file."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * First keyword entered by user determining command type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Following keywords indicating specifications of command (if relevant)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    protected String commandDetails;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constant standard indentation from start of line (formatting)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    protected String indent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Superclass to all Commands, taking in keywords and indentation for execution of relevant functions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param command First keyword entered by user determining command type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param commandDetails Following keywords for specification of command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param indent Constant indentation from start of line (formatting)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Command(String command, String commandDetails, String indent) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.indent \u003d indent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns Boolean indicating if the chat closes (upon user typing \"bye\")."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return Boolean indicating if the chat will close"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return command.equals(\"bye\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Abstract class for all further Commands to handle all interaction and task changes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param tasks Contains task list and operations to delete from list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param ui Handles user interaction"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param storage Updates new task list to file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws DukeException Custom exception"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    protected abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 46
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Handles deletion of tasks upon user input eg. \"delete 2\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Integer indicating task to be deleted."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private int listPointer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor that takes in keywords and indentation for execution of delete function."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param command First keyword entered by user determining command type"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param commandDetails Following integer indicating list index of task to be deleted"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param indent Constant indentation from start of line (formatting)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public DeleteCommand(String command, String commandDetails, String indent) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(command, commandDetails, indent);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Handles deletion of task from list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param tasks Contains task list and operations to delete from list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param ui Handles user interaction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param storage Updates new task list to file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws DukeException Custom exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            listPointer \u003d Integer.parseInt(commandDetails);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            Task deletedTask \u003d tasks.getList().get(listPointer - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            tasks.deleteTask(listPointer - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            String response \u003d ui.printResponse(\"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    + indent + \"   \" + deletedTask + \"\\n\" + indent"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    + \"Now you have \" + tasks.getList().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            storage.updateTodoFile(tasks.getListString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DukeException(\"Please input integer index of task.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DukeException(\"Item \" + listPointer + \" does not exist. Please try again.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } catch (Exception err) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DukeException(err.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 45
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * GUI interface for user interaction with Duke chatbot."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Creates JavaFX Duke GUI design."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param l Label used in Duke GUI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param iv ImageView used to display profile pictures in Duke GUI"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Gets Duke responses to the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param l Label used in Duke GUI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param iv ImageView used to display profile pictures in Duke GUI"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return DialogBox of Duke\u0027s responses"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 59
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Handles completion of tasks upon user input eg. \"done 2\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Integer indicating task to be deleted."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private int listPointer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor that takes in keywords and indentation for execution of completion function."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param command First keyword entered by user determining command type"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param commandDetails Following integer indicating list index of task to be marked complete"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param indent Constant indentation from start of line (formatting)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public DoneCommand(String command, String commandDetails, String indent) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(command, commandDetails, indent);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Handles completion of task in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param tasks Contains task list and operations to mark as done on the list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param ui Handles user interaction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param storage Updates new task list to file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws DukeException Custom exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            listPointer \u003d Integer.parseInt(commandDetails);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            tasks.markTaskAsDone(listPointer - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            String response \u003d ui.printResponse(\"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    + indent + \"   \" + tasks.getList().get(listPointer - 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            storage.updateTodoFile(tasks.getListString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DukeException(\"Please input integer index of task.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DukeException(\"Item \" + listPointer + \" does not exist. Please try again.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } catch (Exception err) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DukeException(err.getCause() + err.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 44
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * A personal assistant todo-list tracking chatbot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * @author Ng Qian Jie Cheryl"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constant indentation from start of line (formatting)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * File location for loaded text or new text file containing todo tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static String FILENAME \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Handles loading tasks from file and saving tasks in file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Contains task list and operations to modify the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Deals with interactions with the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Main class which initializes Duke bot."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        ui \u003d new Ui(INDENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        storage \u003d new Storage(FILENAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } catch (Exception err) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            ui.printError(err.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * The start method for Duke application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param stage Stage on which the program runs"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        //Step 2. Properly setting up required components"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        });"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        );"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return respondToUser(input);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Helper function for handling user input."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param command User input into Duke bot"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return String response to the user input upon executing functions"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String respondToUser(String command) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            String fullCommand \u003d command;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            Parser parser \u003d new Parser(fullCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            Command c \u003d Parser.parse(parser.getCommand(), parser.getDetail(), INDENT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            String response \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 194,
      "-": 2
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Main application exception for handling all unchecked exceptions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor for DukeException based on caught exceptions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param message Exception message"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 12
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Handles exiting of programme."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor that takes in keywords and indentation for execution of app-closing function."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param command First keyword entered by user determining command type"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param commandDetails Empty string"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param indent Constant indentation from start of line (formatting)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public ExitCommand(String command, String commandDetails, String indent) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(command, commandDetails, indent);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Handles application closing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param tasks Contains task list and operations to delete from list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param ui Handles user interaction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param storage Updates new task list to file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return ui.exit();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 24
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public FindCommand(String command, String commandDetails, String indent) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(command, commandDetails, indent);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return ui.printResponse(\"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                + tasks.findMatchingTasksString(commandDetails));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 10
    }
  },
  {
    "path": "src/main/java/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Handles invalid commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor that takes in keywords and indentation for execution of app-closing function."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param command First keyword entered by user determining command type"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param commandDetails Empty string"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param indent Constant indentation from start of line (formatting)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public InvalidCommand(String command, String commandDetails, String indent) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(command, commandDetails, indent);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Handles application closing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param tasks Contains task list and operations to delete from list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param ui Handles user interaction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param storage Updates new task list to file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return  ui.printError(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                + indent + \"Try todo, event, deadline, list, delete or done\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 25
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 10
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Handles listing of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor that takes in keywords and indentation for execution of listing function."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param command First keyword entered by user determining command type"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param commandDetails Empty string"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param indent Constant indentation from start of line (formatting)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public ListCommand(String command, String commandDetails, String indent) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(command, commandDetails, indent);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Handles listing of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param tasks Contains task list and operations to read list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param ui Handles user interaction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param storage Updates new task list to file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return ui.printResponse(\"Here are the tasks in your list:\\n\" + tasks.getListString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 24
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Deals with making sense of user commands into Command classes."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * String array containing user input string."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private String[] inputArr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Restrict all valid command options."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor for splitting input into main command and command details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param input original user input string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Parser(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.inputArr \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns main command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return main user command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return inputArr[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns command details as integer for deleting and marking tasks as complete."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return array index pointer for task in task list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public int getPointer() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return Integer.parseInt(inputArr[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns command details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return command details"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getDetail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (inputArr.length \u003e 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return inputArr[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Parses user commands into relevant Command classes to execute relevant actions."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param command First keyword entered by user determining command type"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param commandDetails Following indicating keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param indent Constant indentation from start of line (formatting)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return Commands which execute relevant actions to follow user commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static Command parse(String command, String commandDetails, String indent) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (command.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new ExitCommand(command, commandDetails, indent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (command.equals(LIST_COMMAND)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new ListCommand(command, commandDetails, indent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (command.equals(DONE_COMMAND)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new DoneCommand(command, commandDetails, indent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (command.equals(DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new DeleteCommand(command, commandDetails, indent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (command.equals(FIND_COMMAND)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new FindCommand(command, commandDetails, indent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (command.equals(TODO_COMMAND) || command.equals(EVENT_COMMAND) || command.equals(DEADLINE_COMMAND)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new AddCommand(command, commandDetails, indent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new InvalidCommand(command, commandDetails, indent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 82
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Enumerate task type options."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private PrintWriter writer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Directory location for file storage and retrieval."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor for new Storage object with directory information loaded."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param filename Location for loaded/new file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Storage(String filename) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Loads tasks from file into an array of tasks to be passed into TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return ArrayList of tasks loaded from file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws FileNotFoundException No file is found in the file directory indicated, loading failed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        ArrayList\u003cTask\u003e tasklist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assert tasklist.size() \u003d\u003d 0 : \"Initialised ArrayList is not empty.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        File f \u003d new File(filename);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Scanner scanner \u003d new Scanner(f);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            String[] inputArr \u003d scanner.nextLine().trim().split(\" \", 3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            char taskType \u003d inputArr[0].charAt(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            boolean isTaskComplete \u003d (inputArr[1].equals(\"[\\u2713]\")) ? true : false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            if (taskType \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                tasklist.add(new Task(inputArr[2], ADD_TYPE_TODO, isTaskComplete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            } else if (taskType \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                String deadlineDetails \u003d inputArr[2].split(\"\\\\(\")[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                String deadline \u003d inputArr[2].split(\"\\\\(\")[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                assert deadline.split(\"/\")[0].length() \u003d\u003d 2 : \"Day is incorrect\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                assert deadline.split(\"/\")[1].length() \u003d\u003d 2 : \"Month is incorrect\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm)\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                LocalDateTime deadlineByDateTime \u003d LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                tasklist.add(new Task(deadlineDetails, ADD_TYPE_DEADLINE, deadlineByDateTime, isTaskComplete));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                String eventDetails \u003d inputArr[2].split(\"\\\\(\")[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                String eventDateTime \u003d inputArr[2].split(\"\\\\(\")[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                assert eventDateTime.split(\"/\")[0].length() \u003d\u003d 2 : \"Day is incorrect\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                assert eventDateTime.split(\"/\")[1].length() \u003d\u003d 2 : \"Month is incorrect\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm)\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                LocalDateTime eventDateTimeByDateTime \u003d LocalDateTime.parse(eventDateTime, formatter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                tasklist.add(new Task(eventDetails, ADD_TYPE_EVENT, eventDateTimeByDateTime, isTaskComplete));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return tasklist;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Update the loaded file based on changes to the todo file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param todoString String of tasks based on TaskList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws FileNotFoundException File directory cannot be located"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws UnsupportedEncodingException File type is not supported"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void updateTodoFile(String todoString) throws FileNotFoundException, UnsupportedEncodingException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        writer \u003d new PrintWriter(filename, \"UTF-8\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        writer.printf(todoString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 90
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Base Task class for holding variables and methods relevant to tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Enumerate task type options."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Description of task details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Description of task type (eg. todo, deadline or event)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Boolean determining if task has been marked complete."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Date format for deadlines/event timings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    protected LocalDateTime dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Standard format of date presentation."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    protected DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor taking in the task details, type and whether it is complete."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param description Description of task details"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param taskType Description of task type"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param isDone Boolean determining if task has been marked complete"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Task(String description, String taskType, boolean isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Second constructor, for deadlines/events which have a dateTime aspect."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Task(String description, String taskType, LocalDateTime dateTime, boolean isDone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns tick or cross according to whether task is complete."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return Tick or cross indicating completion of task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Return task details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return Task details"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Return task type."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return Task type"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (taskType.equals(ADD_TYPE_TODO)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return \"[T]\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (taskType.equals(ADD_TYPE_DEADLINE)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return \"[D]\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (taskType.equals(ADD_TYPE_EVENT)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return \"[E]\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Return dateTime string of relevant Task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return String parsed from dateTime aspect of task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return dateTime.format(formatter);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Indicates completion of chosen Task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assert taskType.equals(ADD_TYPE_DEADLINE) || taskType.equals(ADD_TYPE_EVENT) || taskType.equals(ADD_TYPE_TODO)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                : \"Task type is invalid.\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        String stringToPrint \u003d getTaskType() + \" \" + getStatusIcon() + \" \" + getDescription();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (taskType.equals(ADD_TYPE_DEADLINE)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return stringToPrint + \" (by: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (taskType.equals(ADD_TYPE_EVENT)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return stringToPrint + \" (at: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return stringToPrint;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 118
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Handles operations to the task list and contains the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Enumerate relevant task type options."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String ADD_TYPE_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * ArrayList for tracking Tasks on the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * String for printing Tasks on the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private String listString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constant indentation after start of line (formatting)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor for an empty TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.listString \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor for loading a prior ArrayList of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param tasklist ArrayList of tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasklist) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.listString \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        for (Task task : tasklist) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            addTask(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Return ArrayList of tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return ArrayList of Tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Return string with all tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return String with all tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getListString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return listString;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Add new todo task to task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param newTask Details of incoming task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        list.add(newTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        updateTodoString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Add new deadline/event task to task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param details Details of incoming task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param dateTime Details on relevant date to task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param taskType Type of task to be added"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void addDateTask(String details, String dateTime, String taskType) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        LocalDateTime dateTimeByDateTime \u003d LocalDateTime.parse(dateTime, formatter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assert taskType.equals(ADD_TYPE_EVENT) || taskType.equals(ADD_TYPE_DEADLINE) : \"Wrong task type\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        addTask(new Task(details, taskType, dateTimeByDateTime, false));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Delete task from task list based on index on list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param index Index of task to be removed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        updateTodoString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Mark task as complete within the task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param index Index of task to be marked complete"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        list.get(index).markAsDone();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        updateTodoString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Helper function for findMatchingTasksString returning ArrayList of matching tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param keyword Search keyword for finding matching tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return ArrayList of matching tasks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public ArrayList\u003cTask\u003e findMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns formatted list of matching tasks to be printed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param keyword Search keyword for finding matching tasks"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @return String list of matching tasks"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String findMatchingTasksString(String keyword) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasksList \u003d findMatchingTasks(keyword);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        String tempListString \u003d \"\" + INDENT + \" \";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        for (Task task : matchingTasksList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            tempListString +\u003d counter + \". \" + task + \u0027\\n\u0027 + INDENT + \" \";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return tempListString;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Update tasks in String of tasks."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void updateTodoString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        listString \u003d \"\" + INDENT + \" \";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            listString +\u003d (i + 1) + \". \" + list.get(i);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            if (i !\u003d (list.size() - 1)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                listString +\u003d \u0027\\n\u0027 + INDENT + \u0027 \u0027;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 147
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Deals with user interaction."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constant indentation after start of line (formatting)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private String indent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructor for UI to indent correctly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param indent Constant indentation from start of line (formatting)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Ui(String indent) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.indent \u003d indent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns message to greet user and begin program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return \"Hello! I\u0027m Duke\\n\" + indent + \" \" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns message to greet user goodbye and end program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String exit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns error message in loading."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return \"Loading error! New file created.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns input error message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param errorMessage Relevant error message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String printError(String errorMessage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns response message to user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param responseMessage Relevant message"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String printResponse(String responseMessage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return responseMessage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 54
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 10
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void testTaskType() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Task testTask \u003d new Task(\"complete testing\", \"todo\", false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertEquals(testTask.getTaskType(), \"[T]\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void testTaskMarkAsDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Task testTask \u003d new Task(\"complete testing\", \"todo\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        testTask.markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertEquals(testTask.getStatusIcon(), \"[\\u2713]\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 18
    }
  }
]
