[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // configuration files expected to be in ./config/checkstyle/ by convention."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // public .jar file to ./build/libs in form {baseName}-{version}.jar"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    mainClassName \u003d \"duke.DukeLauncher\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "KendrickAng": 43
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "# Handler - Interactive Task Tracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " ![User interface screenshot](Ui.png)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* This is a desktop task tracking application. It has a GUI but most of the user interaction happens using a CLI (Command Line interface)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "The features available in the task tracker are summarised below."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "##### Commands overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* [todo](#11-todo---add-a-todo-task) - Create a new task with a description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* [event](#12-event---add-an-event-task) - Create a new task with a description and location/time"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* [deadline](#13-deadline---add-a-deadline-task) - Create a new task with a description and deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* [list](#2-list-all-tasks) - List all tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* [delete](#3-delete-a-task) - Delete a specified task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* [done](#4-mark-a-task-as-done) - Marks a task as done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* [remindme](#6-get-reminders-for-tasks) - Shows reminders for specified task types"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* [bye](#7-exit-the-application) - Exits the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "##### Command Format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Words in `\u003cUPPER_CASE\u003e` are parameters to be supplied by the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "  * E.g In `todo \u003cDESCRIPTION\u003e`, `DESCRIPTION` is a parameter which can be used as `todo grill chicken`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "### 1. Adding tasks to the tracker"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Three types of tasks, `TODO`, `EVENT` and `DEADLINE` can be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "##### Format: `\u003cTASK_TYPE\u003e \u003cPARAMETERS\u003e`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "#### 1.1) `todo` - Add a `TODO` task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Syntax:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "`todo \u003cDESCRIPTION\u003e`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Adds a new `TODO` with `DESCRIPTION` to the tracker."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Example usage:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "`todo grill beef`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Output:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    [T][X] grill beef"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Adds a new `TODO` to *grill beef*."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "#### 1.2) `event` - Add an `EVENT` task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Syntax:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "`event \u003cDESCRIPTION\u003e /at \u003cDETAILS\u003e`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Adds a new `EVENT` with `DESCRIPTION` and `DETAILS` to the tracker."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Example usage:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    event roast pork /at The Supreme Cork"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Output:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    [E][X] roast pork (at: The Supreme Cork)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Adds a new `EVENT` to *roast pork* at *The Supreme Cork*."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "#### 1.3) `deadline` - Add a `DEADLINE` task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Syntax:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    deadline \u003cDESCRIPTION\u003e /by \u003cDATETIME\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Adds a new `DEADLINE` with `DESCRIPTION`, to be done by `DATETIME` to the tracker."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Example usage:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    deadline clean beans /by 031219 2359"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Output:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    [D][X] clean beans (by: 03 December 2019, 11:59PM, GMT+8"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* Adds a new `DEADLINE` to *clean beans* by 3rd December, 2019, 11.59pm."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "### 2. List all task"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Displays all tasks in the tracker to the screen."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Syntax: `list`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Example usage:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    todo boil toy"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Output:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [T][X] boil toy  // only showing \u0027list\u0027 output"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "### 3. Delete a task"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Delete a particular task from the tracker."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Syntax: `delete \u003cTASK_INDEX\u003e`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `TASK_INDEX` is the numbering of the task when the `list` command is executed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Example usage:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    todo boil toy"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    event rush brush /at Dush"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    delete 2"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Output:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [T][X] boil toy  // before delete"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    2. [E][X] rush brush (at: Dush)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [T][X] boil toy  // after delete"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "### 4. Mark a task as done"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Syntax: `done \u003cTASK_INDEX\u003e`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Marks a particular task in the tracker as complete."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `TASK_INDEX` is the numbering of the task when the `list` command is executed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Example Usage:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    todo boil toy"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    event rush brush /at Dush"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    done 2"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Output:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [T][X] boil toy  // before \u0027done\u0027"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    2. [E][X] rush brush (at: Dush)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [T][X] boil toy  // after \u0027done\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    2. [E][O] rush brush (at: Dush)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "### 5. Find a task"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Searches and retrieves a task with the `KEYWORD` in the `DESCRIPTION`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Syntax: `find \u003cKEYWORD\u003e`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `KEYWORD` is the string keyword."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Example Usage:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    todo boil toy"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    event rush brush /at Dush"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    find ush"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Output:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [E][X] rush brush (/at: Dush)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "### 6. Get reminders for tasks:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "Get a reminder for tasks due soon, as well as overdue deadlines."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Syntax: `remindme \u003cTASK_TYPE\u003e`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* `TASK_TYPE` can be either `todo`, `event`, `deadline` or `all`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Example Usage:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    todo boil toy  // assume today\u0027s date is 18/09/2019, 6.55PM, Timezone GMT+8"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    event rush brush /at Dush"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    deadline grill mill /by 080919 2359"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    deadline steal meal /by 080920 2359"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    remindme event"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    remindme deadline"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    remindme all"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Output:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // remindme event"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [E][X] rush brush (at: Dush)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // remindme deadline"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [D][X] steal meal (by: 08 September 2020, 11:59PM, GMT+8)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Oh no, you have some overdue tasks!"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [D][X] grill mill (by: 08 September 2019, 11:59PM, GMT+8)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // remindme all"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    DEADLINE"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [D][X] steal meal (by: 08 September 2020, 11:59PM, GMT+8)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Oh no, you have some overdue tasks!"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [D][X] grill mill (by: 08 September 2019, 11:59PM, GMT+8)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    EVENT"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [E][X] rush brush (at: Dush)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    TODO"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    1. [T][X] boil toy"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "---"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "### 7. Exit the Application:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Syntax: `bye`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Example Usage:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    todo boil toy"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    bye"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "###### Output:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "* No output"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 209,
      "-": 18
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "T | 0 | to-do"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "D | 0 | deadline | /by | 080919 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "D | 0 | deadline | /by | 080920 2359"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "E | 0 | event | /at | Home"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 4
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.CommandResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Main Driver class housing the infinite loop."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Loads duke with task data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param filePath the file path of the data file from project root."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        initLogger();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.taskList \u003d storage.readFromDisk(); // leave index 0 empty for clarity"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (DukeIoException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            System.err.println(ui.showError(e));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.taskList \u003d new TaskList(); // only load the taskList if no error"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Default constructor. JavaFX GUI can\u0027t run without declaring this."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this(\"duke.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Executes a command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param fullCommand the command with parameters."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the response of the command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse getResponse(String fullCommand) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private void initLogger() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        LogManager.getLogManager().reset(); // remove all handlers for ALL loggers"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.setLevel(Level.ALL); // global switch for all handlers"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Log only critical errors for users"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // Log everything else for developer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"myLogger.log\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fh.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fh.setFormatter(new SimpleFormatter()); // MM DD, YYYY HH:MM:SS O \u003cname\u003e \u003cmsg\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // ignore"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger not working.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 87
    }
  },
  {
    "path": "src/main/java/duke/DukeLauncher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * The main entry point into the gui."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param primaryStage The stage to add our parent node."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // The FXMLLoader maps a control with fx:id defined in FXML to a variable with same name in controller."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 37
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.RemindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.TODO;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.DEADLINE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.EVENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.ALL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.logging.Level.FINE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.logging.Level.INFO;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Deals with making sense of commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final Locale LOCALE \u003d Locale.ENGLISH;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DEADLINE_PARSE_PATTERN \u003d \"ddMMyy HHmm\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DEADLINE_FORMAT_PATTERN \u003d \"dd MMMM yyyy, hh:mma, O\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses the full command and returns the corresponding Command instance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param command the full command to parse."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the command corresponding to the input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeException an exception generated when parsing the input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // remove trailing/leading whitespace and split by whitespace(s)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        command \u003d command.strip();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] commands \u003d command.split(\"[ ]+\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] args \u003d Arrays.copyOfRange(commands, 1, commands.length);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assert args.length \u003d\u003d commands.length - 1 : \"Incorrect array copy\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        switch (commands[0]) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseTodoCommand(args);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseEventCommand(args);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseDeadlineCommand(args);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseFindCommand(args);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseDoneCommand(args);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseDeleteCommand(args);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseListCommand(args);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"remindme\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseRemindCommand(args);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseBye(args);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeMissingDescriptionException(\"Hmm... I\u0027m sorry, but I don\u0027t know what that means...\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Business logic for each command. Refactor concept: Extract Method"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static Command parseTodoCommand(String[] args) throws DukeMissingDescriptionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Parse TODO command: {0}\", new Object[]{Arrays.toString(args)});"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (args.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeMissingDescriptionException(\"Hmm... I need to know your to-do description.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new AddCommand(TODO, args, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static Command parseEventCommand(String[] args) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Parse EVENT command: {0}\", new Object[]{Arrays.toString(args)});"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] eventArgs \u003d String.join(\" \", args).split(\" /at \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (eventArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException(\"Hmm... Incorrect argument count for event!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new AddCommand(EVENT, args, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static Command parseDeadlineCommand(String[] args) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Parse DEADLINE command: {0}\", new Object[]{Arrays.toString(args)});"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] deadlineArgs \u003d String.join(\" \", args).split(\" /by \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (deadlineArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException(\"Hmm... Incorrect argument count for deadline!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // enforce deadline format ddMMyy HHmm"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        parseDeadline(deadlineArgs[1]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new AddCommand(DEADLINE, args, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static Command parseFindCommand(String[] args) throws DukeMissingDescriptionException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Parse FIND command: {0}\", new Object[]{Arrays.toString(args)});"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (args.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeMissingDescriptionException(\"Hmm... I need to know what you\u0027re searching for.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String keyword \u003d args[0].strip();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new FindCommand(keyword, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static Command parseDoneCommand(String[] args) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Parse DONE command: {0}\", new Object[]{Arrays.toString(args)});"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        int doneIdx \u003d Integer.valueOf(args[0]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (doneIdx \u003c 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"Hmm... that task isn\u0027t in the list.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new DoneCommand(doneIdx, false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static Command parseDeleteCommand(String[] args) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Parse DELETE command: {0}\", new Object[]{Arrays.toString(args)});"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        int deleteIdx \u003d Integer.valueOf(args[0]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (deleteIdx \u003c 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"Hmm... that task isn\u0027t in the list.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new DeleteCommand(deleteIdx, false);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static Command parseListCommand(String[] args) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Parse LIST command: {0}\", new Object[]{Arrays.toString(args)});"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new ListCommand(false);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static Command parseRemindCommand(String[] args) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Parse REMIND command: {0}\", new Object[]{Arrays.toString(args)});"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (args.length !\u003d 1) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \"Hmm... would you like a reminder on your \u0027event\u0027 or \u0027deadline\u0027 tasks?\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        TaskType type;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (args[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            type \u003d TODO;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } else if (args[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            type \u003d DEADLINE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } else if (args[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            type \u003d EVENT;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } else if (args[0].equals(\"all\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            type \u003d ALL;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \"Hmm... I don\u0027t know those arguments. Do you mean \u0027deadline\u0027, \u0027event\u0027 or \u0027all\u0027?\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new RemindCommand(type, false);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static Command parseBye(String[] args) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Parse BYE command: {0}\", new Object[]{Arrays.toString(args)});"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new ExitCommand(true);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Business logic for date and time parsing. @@author KendrickAng-reused. Code adapted from duke/WeomuCat"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a DateTime object with format specified by the format pattern."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param in the input string, which must follow the parse pattern."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param type the task type in which are parsing for, which differs between Event types."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the ZonedDateTime object."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeUnknownInputException if the input string is of invalid format, or an invalid task type is passed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static ZonedDateTime parseDateTime(String in, TaskType type) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // switch allows us to parse dateTimes differently by task type. see parseDeadline for exampe."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return parseDeadline(in);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException(\"Hmm... please pass deadline task types instead.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static ZonedDateTime parseDeadline(String by) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(FINE, \"Parse deadline to ZonedDateTime: {0}\", new Object[]{by});"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            DateTimeFormatter parseFormatter \u003d DateTimeFormatter.ofPattern(DEADLINE_PARSE_PATTERN, LOCALE)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    .withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ZonedDateTime out \u003d ZonedDateTime.parse(by, parseFormatter);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(FINE, \"Parsed to ZonedDateTime successfully: {0}\", new Object[]{out});"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return out;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String.format(\"Hmm... that date format\u0027s wrong. Follow this format: %s\", DEADLINE_PARSE_PATTERN));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 223,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to add a new Task to Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private TaskType type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String[] args;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates the command to add a task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param type the type of task: deadline, event or to-do."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param args the arguments for creation of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param isExit whether to exit the application after execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public AddCommand(TaskType type, String[] args, boolean isExit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Adds a task to the TaskList, informs the user and updates the hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the response containing the response and boolean flag to exit the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // create the appropriate task, add to the list and write to disk"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Task task \u003d taskList.add(TaskFactory.getTask(type, args));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // inform the user the task has been added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showAddMessage(task, taskList.count());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // update hard disk"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        storage.writeToDisk(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String[] getArgs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.args;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 52
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents Duke commands that will be processed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Command(boolean isExit) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Executes the Command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the response containing the response and boolean flag to exit the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public abstract CommandResponse execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 30
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Helper class to store the String response and boolean flag indicating program exit."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class CommandResponse {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse(String response, boolean isExit) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.response;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 22
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to delete a specified task in Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private int idx;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DeleteCommand(int idx, boolean isExit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Deletes a specified task from the TaskList, informs the user and updates the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the response containing the response and boolean flag to exit the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // delete the task at corresponding index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Task task \u003d taskList.delete(idx);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // inform user of deletion"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showDeleteMessage(task, taskList.count());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // update hard disk"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        storage.writeToDisk(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 37
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to mark a task as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private int idx;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DoneCommand(int idx, boolean isExit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Marks a task in the TaskList as done, informs the user and updates the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the response containing the response and boolean flag to exit the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // mark the task corresponding to index as done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Task task \u003d taskList.markAsDone(idx);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // inform the user task has been marked done"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showDoneMessage(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // update hard disk"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        storage.writeToDisk(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to quit Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ExitCommand(boolean isExit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Quits Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the response containing the response and boolean flag to exit the program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showExitMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 28
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to find all tasks with specified keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public FindCommand(String keyword, boolean isExit) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Finds all tasks containing the keyword and lists them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the response containing the response and boolean flag to exit the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // create a new task list with results containing the keyword."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        TaskList searchList \u003d taskList.find(keyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // inform the user of matching queries (if any)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showSearchList(searchList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to list all tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ListCommand(boolean isExit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Lists all tasks in Duke\u0027s TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the response containing the response and boolean flag to exit the program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showListMessage(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 28
    }
  },
  {
    "path": "src/main/java/duke/command/RemindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private TaskType type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public RemindCommand(TaskType type, boolean isExit) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Shows a reminder of tasks to do in order."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the response containing the response and boolean flag to exit the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // create a new task list filtered to a specific task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        HashMap\u003cTaskType, TaskList\u003e taskDict \u003d taskList.filter(type);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showRemindList(taskDict, type);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 33
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * The general exception type thrown by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIllegalStateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that Duke is not in an appropriate state for the request operation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeIllegalStateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeIllegalStateException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIndexOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that the program tried to access some collection out of its index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeIndexOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeIndexOutOfBoundsException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that some I/O error occurred when reading/writing from some file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeIoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeIoException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeMissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that some arguments are missing from the command input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeMissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeMissingDescriptionException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeUnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that some incorrect input has tried to be passed as arguments in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeUnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeUnknownInputException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a Horizontal box with a label and Image."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        displayPicture.setClip(new Circle("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                displayPicture.getFitWidth() / 2,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                displayPicture.getFitHeight() / 2,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                50.0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Flips the dialog box on the vertical axis."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the current DialogBox instance."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private DialogBox flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a new right-justified dialog box."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param text the text to place in the label."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param img the image to place in the box."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the new dialog box."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a new left-justified dialog box."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param text the text to place in the label."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param img the image to place in the box."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the new dialog box."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new DialogBox(text, img).flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 78
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.CommandResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "// the @FXML notation marks a private or protected member, allowing FXML to access it despite the modifier."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A UI Controller class. For UI-related code."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaHunter.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaHandler.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Bind the dialog container to the button of the scroll pane, and greet the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Links the Duke instance and greets the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param duke the duke instance to link."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Greet the user"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                DialogBox.getDukeDialog(new Ui().showWelcomeMessage(duke.getTaskList()), dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Listens to the input field and button and carries out the main business logic of Duke."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Main business logic goes here"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        CommandResponse response;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            response \u003d new CommandResponse(Ui.addNewLine(e.getMessage()), false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Exit application programmatically if necessary"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (response.getIsExit()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // hacky way to get the primary stage"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Stage primaryStage \u003d (Stage) scrollPane.getScene().getWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            primaryStage.fireEvent(new WindowEvent("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            primaryStage,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            WindowEvent.WINDOW_CLOSE_REQUEST"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    DialogBox.getUserDialog("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            Ui.addNewLine(input),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            userImage),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            response.getResponse(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            dukeImage)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // We can do this since we (1) Defined userInput in MainWindow.fxml (2) gave userInput the @FXML tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 94
    }
  },
  {
    "path": "src/main/java/duke/gui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.ALL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.DEADLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.DEADLINE_OVERDUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.EVENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.TODO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String PREFIX \u003d \"    \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DIVIDER \u003d \"******************************************\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String WELCOME_MESSAGE_1 \u003d \"Hey partner! I\u0027m the\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String WELCOME_MESSAGE_2 \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"It\u0027s good to see you again! Here are your tasks. How can I help you?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String WELCOME_MESSAGE_3 \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"It\u0027s good to see you again! It seems you have no tasks yet. How can I help you?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String ADD_MESSAGE \u003d \"No problem. I\u0027ve added the task!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String SEARCH_MESSAGE \u003d \"Here\u0027s the matching tasks from your list!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String LIST_MESSAGE \u003d \"Glad to help partner! Here are your tasks: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String LIST_EMPTY_MESSAGE \u003d \"It seems we\u0027re done for the day! Amazing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String LIST_FILLED_MESSAGE \u003d \"Let\u0027s get to work!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String REMIND_MESSAGE \u003d \"Here are your upcoming tasks. Don\u0027t forget them!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String REMIND_OVERDUE_MESSAGE \u003d \"Oh no, you have some overdue tasks!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String REMIND_ONTIME_MESSAGE \u003d \"It seems you\u0027re right on track. Keep it up!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DELETE_MESSAGE_1 \u003d \"All right. That\u0027s one task down: \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DELETE_MESSAGE_2 \u003d \"Feels good to check that off, doesn\u0027t it?\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DONE_MESSAGE \u003d \"Great! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Aww... Come back soon partner!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String LOGO \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"  _  _   _   _  _ ___  _    ___ ___ \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \" | || | /_\\\\ | \\\\| |   \\\\| |  | __| _ \\\\\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \" | __ |/ _ \\\\| .` | |) | |__| _||   /\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \" |_||_/_/ \\\\_\\\\_|\\\\_|___/|____|___|_|_\\\\\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            + \"                                    \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Convenience method for formatting un-indented input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param input the text to format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    static String addNewLine(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return input + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Greets the user and shows his current tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the list of tasks to complete."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    String showWelcomeMessage(TaskList taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(WELCOME_MESSAGE_1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                LOGO,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                taskList.isEmpty() ? WELCOME_MESSAGE_3 : WELCOME_MESSAGE_2,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                showTaskList(taskList));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out a specified error message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param e the error to print."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showError(DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out the message indicating a task has been added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param task the task added."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskCount the number of tasks currently in the task list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showAddMessage(Task task, long taskCount) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(ADD_MESSAGE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                (taskCount \u003d\u003d 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    ? \"Now you have 1 task in the list.\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    : String.format(\"Now you have %d tasks in the list.\", taskCount)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out the message indicating a task has been marked done."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param task the task marked done."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showDoneMessage(Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(DONE_MESSAGE, \"\", task.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out the message indicating a task has been deleted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param task the deleted task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskCount the number of tasks remaining in the task list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showDeleteMessage(Task task, long taskCount) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(DELETE_MESSAGE_1,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                (taskCount \u003d\u003d 1"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        ? \"Now you have 1 task left. \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        : String.format(\"Now you have %d tasks left. \", taskCount)) + DELETE_MESSAGE_2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showListMessage(TaskList taskList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String postfix \u003d taskList.isEmpty() ? LIST_EMPTY_MESSAGE : LIST_FILLED_MESSAGE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(LIST_MESSAGE, \"\", showTaskList(taskList), postfix);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out the list of results from a keyword search."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param searchList the task list of results."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showSearchList(TaskList searchList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(SEARCH_MESSAGE, \"\", showTaskList(searchList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out the sorted task list of the specified task type. Checks for overdue deadlines."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskDict the dictionary mapping task type to its task list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param type the task type to sort by."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showRemindList(HashMap\u003cTaskType, TaskList\u003e taskDict, TaskType type) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (type \u003d\u003d TODO) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return showToUser(REMIND_MESSAGE, \"\", showTaskList(taskDict.get(TODO)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (type \u003d\u003d EVENT) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return showToUser(REMIND_MESSAGE, \"\", showTaskList(taskDict.get(EVENT)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (type \u003d\u003d DEADLINE) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            boolean hasOverdue \u003d !taskDict.get(DEADLINE_OVERDUE).isEmpty();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return showToUser(REMIND_MESSAGE, \"\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    + (!taskDict.get(DEADLINE).isEmpty() ? showTaskList(taskDict.get(DEADLINE)) : \"\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    + showToUser(\"\", hasOverdue ? REMIND_OVERDUE_MESSAGE : REMIND_ONTIME_MESSAGE, \"\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    + (hasOverdue ? showTaskList(taskDict.get(DEADLINE_OVERDUE)) : \"\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // ALL - deadlines, then events, then todos"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        boolean hasOverdue \u003d !taskDict.get(DEADLINE_OVERDUE).isEmpty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(REMIND_MESSAGE, \"\", DEADLINE.toString())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + (!taskDict.get(DEADLINE).isEmpty() ? showTaskList(taskDict.get(DEADLINE)) : \"\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                + showToUser(\"\", hasOverdue ? REMIND_OVERDUE_MESSAGE : REMIND_ONTIME_MESSAGE,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    hasOverdue ? showTaskList(taskDict.get(DEADLINE_OVERDUE)) : \"\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    EVENT.toString(), showTaskList(taskDict.get(EVENT)),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    TODO.toString(), showTaskList(taskDict.get(TODO)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out a task list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the task list to print."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (task !\u003d null) { // account for 0-indexing"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                sb.append(showToUser(String.format(\"%d. %s\", i, task)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints the exit message."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showExitMessage() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out a sequence of messages with dividers at beginning and end, and prefix added to each line."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param messages the sequence of messages to print."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String showToUser(String... messages) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String line: messages) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            sb.append(line).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 211
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.TODO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.EVENT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.DEADLINE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.nio.file.StandardOpenOption.CREATE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.nio.file.StandardOpenOption.WRITE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.logging.Level.INFO;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.logging.Level.SEVERE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.logging.Level.WARNING;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Stores and retrieves persisting task information from the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Loads the Path based on given uri."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param uri the uri to create the Path object with."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Storage(String uri) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.path \u003d Paths.get(uri);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Reads task data from the hard disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task list containing all tasks read from disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeIoException if some error occurs while reading the tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList readFromDisk() throws DukeIoException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Charset charset \u003d Charset.forName(\"ISO-8859-1\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            BufferedReader reader \u003d Files.newBufferedReader(path, charset);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null \u0026\u0026 !line.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String[] args \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String code \u003d args[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                boolean isDone \u003d args[1].equals(\"1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String[] taskArgs \u003d Arrays.copyOfRange(args, 2, args.length);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                if (code.equals(\"T\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    taskList.add(TaskFactory.getTask(TODO, taskArgs, isDone));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                } else if (code.equals(\"D\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    taskList.add(TaskFactory.getTask(DEADLINE, taskArgs, isDone));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                } else if (code.equals(\"E\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    taskList.add(TaskFactory.getTask(EVENT, taskArgs, isDone));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    throw new IOException(\"Attempting to read unknown task from disk!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(INFO, \"Read {0} tasks from disk successfully\", new Object[]{taskList.count()});"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(WARNING, \"Unable to read from disk. Will create new data file.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIoException(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Writes task data to the hard disk."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the task list containing all tasks to write to disk."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task list written to disk."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeException if some error occurs while writing the tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList writeToDisk(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Charset charset \u003d Charset.forName(\"ISO-8859-1\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // clear entire file and write on an empty file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            BufferedWriter bw \u003d Files.newBufferedWriter(path, charset, CREATE, TRUNCATE_EXISTING, WRITE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            for (Task task: tasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                if (task !\u003d null) { // account for the first null placeholder"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String desc \u003d task.getDescription();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    int isDone \u003d task.getIsDone() ? 1 : 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    if (task instanceof Todo) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.write(String.format(\"T | %d | %s\", isDone, desc));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.newLine();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        String deadline \u003d ((Deadline) task).getDeadline();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.write(String.format(\"D | %d | %s | /by | %s\", isDone, desc, deadline));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.newLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        String period \u003d ((Event) task).getPeriod();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.write(String.format(\"E | %d | %s | /at | %s\", isDone, desc, period));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.newLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        throw new IOException(\"Attempting to write unknown task to disk!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(INFO, \"Write {0} tasks to disk successfully\", new Object[]{taskList.count()});"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(SEVERE, \"Unable to write to disk\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIoException(e.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 125
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.Parser.DEADLINE_FORMAT_PATTERN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.Parser.LOCALE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.DEADLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a new Deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param description the task description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param deadline the deadline to complete the task by, of format \"dd/MM/yy HHmm\"."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeUnknownInputException if arguments are in incorrect format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Deadline(String description, String deadline) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this(description, deadline, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a new Deadline task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param description the deadline task description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param deadline the deadline to complete the task by, of format \"dd/MM/yy HHmm\"."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param isDone whether is task is marked done or not."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeUnknownInputException if arguments are in incorrect format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Deadline(String description, String deadline, boolean isDone) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Transforms the instance\u0027s deadline string into a ZonedDateTime object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the ZonedDateTime object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ZonedDateTime getZonedDateTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return Parser.parseDateTime(deadline, DEADLINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ZonedDateTime dateTime \u003d getZonedDateTime();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DateTimeFormatter deadlineFormatter \u003d DateTimeFormatter.ofPattern(DEADLINE_FORMAT_PATTERN, LOCALE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), dateTime.format(deadlineFormatter));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 62
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a task to be done at some specified time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Event(String description, String period) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this(description, period, false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Event(String description, String period, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getPeriod() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + period + \u0027)\u0027;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 26
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * The base class all Task classes are to inherit from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the status icon corresponding to whether the task is complete or not."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return \"O\" if the task is complete, \"X\" otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return (isDone ? \"O\" : \"X\"); //return O or X symbols"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Marks a task as complete."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return whether the task is complete or not."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    protected boolean markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return \u0027[\u0027 + getStatusIcon() + \u0027]\u0027 + \u0027 \u0027 + description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 46
    }
  },
  {
    "path": "src/main/java/duke/task/TaskFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.logging.Level.FINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.util.logging.Level.INFO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Implements the Factory pattern. Handles all types of task creation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a specific task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskType the type of task to create."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param args the required arguments to initialise the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the created task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeUnknownInputException if an unknown TaskType is passed as argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Task getTask(TaskType taskType, String[] args) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Create {0} with raw args {1}\", new Object[]{taskType, Arrays.toString(args)});"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // example args: {\"borrow\", \"book\"}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Todo todo \u003d new Todo(String.join(\" \", args));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(FINE, \"Create to-do {0}\", new Object[]{todo});"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return todo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // example eventArgs: {\"attend festival\", \"2pm-4pm\"}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String[] eventArgs \u003d String.join(\" \", args).split(\" /at \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Event event \u003d new Event(eventArgs[0].strip(), eventArgs[1].strip());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(FINE, \"Create event {0}\", new Object[]{event});"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // example deadlineArgs: {\"homework\", \"2/12/2019 1800\"}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String[] deadlineArgs \u003d String.join(\" \", args).split(\" /by \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Deadline deadline \u003d new Deadline(deadlineArgs[0].strip(), deadlineArgs[1].strip());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(FINE, \"Create deadline {0}\", new Object[]{deadline});"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException(\"Hmm... I don\u0027t understand that Tasktype enum...\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a specific task with specific completion status."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskType the type of task to create."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param args the required arguments to initialise the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param isDone the completion status of the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the created task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeUnknownInputException if an unknown TaskType is passed as argument."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Task getTask(TaskType taskType, String[] args, boolean isDone) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        logger.log(INFO, \"Create {0} {1} with raw args {2}\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                new Object[]{isDone, taskType, Arrays.toString(args)});"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Todo todo \u003d new Todo(String.join(\" \", args), isDone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(FINE, \"Create todo {0}\", new Object[]{todo});"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return todo;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String[] eventArgs \u003d String.join(\" \", args).split(\" /at \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Event event \u003d new Event(eventArgs[0].strip(), eventArgs[1].strip(), isDone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(FINE, \"Create event {0}\", new Object[]{event});"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String[] deadlineArgs \u003d String.join(\" \", args).split(\" /by \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Deadline deadline \u003d new Deadline(deadlineArgs[0].strip(), deadlineArgs[1].strip(), isDone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            logger.log(FINE, \"Create deadline {0}\", new Object[]{deadline});"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException(\"Hmm... I don\u0027t understand that Tasktype enum...\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 89
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.DEADLINE_OVERDUE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.TODO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.EVENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.DEADLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a list of tasks in Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        tasks.add(null); // leave index 0 unused for clarity."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Constructs a 1-indexed task list with the provided tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param tasks the list of tasks used to generate the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (task !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                this.tasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Add a task to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param task the task to add."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Task add(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param idx the index of the task to delete (as listed)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the deleted task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeIndexOutOfBoundsException if the index of the task to delete is not shown (as listed)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Task delete(int idx) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (idx \u003c\u003d 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"Hmm... There\u0027s no such task index.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tasks.remove(idx);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Gets a task from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param idx the index of the task to get (as listed)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task obtained."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeIndexOutOfBoundsException if the index of the task to delete is not shown (as listed)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Task get(int idx) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (idx \u003c\u003d 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"Hmm... There\u0027s no such task index.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tasks.get(idx);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Finds all tasks matching a keyword given."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param keyword the keyword to search among task descriptions for."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task list containing all matched tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        TaskList newList \u003d new TaskList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (Task task: this.getTaskList()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (task !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    newList.add(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Gets an ordered task list filtered to specific task type."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param type the task type to filter by."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the filtered, ordered tasklist."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public HashMap\u003cTaskType, TaskList\u003e filter(TaskType type) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        TaskList newList \u003d new TaskList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (Task task: this.getTaskList()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (task \u003d\u003d null"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || type \u003d\u003d DEADLINE \u0026\u0026 !(task instanceof Deadline)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || type \u003d\u003d EVENT \u0026\u0026 !(task instanceof Event)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || type \u003d\u003d TODO \u0026\u0026 !(task instanceof Todo)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            newList.add(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // have the null value stay at 0-index to maintain 1-indexing"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return sortByType(newList, type);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Arranges the tasks into a hash map of (task type : task) list of that task type."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param list the task list containing only specified tasks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param type the type present in the task list we sort by."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the hash map of arranged tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private HashMap\u003cTaskType, TaskList\u003e sortByType(TaskList list, TaskType type) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        HashMap\u003cTaskType, TaskList\u003e out \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ArrayList\u003cTask\u003e eventList \u003d sortEvents(list.getTaskList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            out.put(EVENT, new TaskList(eventList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return out;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            HashMap\u003cTaskType, ArrayList\u003cTask\u003e\u003e h \u003d extractTasks(list.getTaskList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            out.put(DEADLINE, new TaskList(sortDeadlines(h.get(DEADLINE))));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            out.put(DEADLINE_OVERDUE, new TaskList(sortDeadlines(h.get(DEADLINE_OVERDUE))));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return out;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // Todos don\u0027t need to be sorted"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            out.put(TODO, new TaskList(list.getTaskList()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            HashMap\u003cTaskType, ArrayList\u003cTask\u003e\u003e h2 \u003d extractTasks(list.getTaskList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // add deadlines first, then events, then todos. Todos aren\u0027t sorted (yet)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            out.put(DEADLINE, new TaskList(sortDeadlines(h2.get(DEADLINE))));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            out.put(DEADLINE_OVERDUE, new TaskList(sortDeadlines(h2.get(DEADLINE_OVERDUE))));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            out.put(EVENT, new TaskList(sortEvents(h2.get(EVENT))));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            out.put(TODO, new TaskList(h2.get(TODO)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return out;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            assert false; // shouldn\u0027t reach here"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private HashMap\u003cTaskType, ArrayList\u003cTask\u003e\u003e extractTasks(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // separate into overdue deadlines and on-time deadlines"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArrayList\u003cTask\u003e overdue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArrayList\u003cTask\u003e onTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArrayList\u003cTask\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArrayList\u003cTask\u003e todos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ZonedDateTime now \u003d ZonedDateTime.now(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (Task task: list) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                Deadline d \u003d (Deadline) task;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                // overdue if supposed deadline is earlier than now"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                if (d.getZonedDateTime().compareTo(now) \u003c 0) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    overdue.add(d);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    onTime.add(d);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                events.add(task);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            } else if (task instanceof Todo) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                todos.add(task);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        HashMap\u003cTaskType, ArrayList\u003cTask\u003e\u003e h \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        h.put(DEADLINE, onTime);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        h.put(DEADLINE_OVERDUE, overdue);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        h.put(EVENT, events);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        h.put(TODO, todos);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return h;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private ArrayList\u003cTask\u003e sortDeadlines(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        list.sort((d1, d2) -\u003e {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (d1 \u003d\u003d null \u0026\u0026 d2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (d1 \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (d2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ZonedDateTime date1 \u003d Parser.parseDateTime(((Deadline) d1).getDeadline(), DEADLINE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            ZonedDateTime date2 \u003d Parser.parseDateTime(((Deadline) d2).getDeadline(), DEADLINE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return date1.compareTo(date2);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private ArrayList\u003cTask\u003e sortEvents(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // account for task lists being 1-indexed, with null in index 0"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        list.sort((e1, e2) -\u003e {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (e1 \u003d\u003d null \u0026\u0026 e2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (e1 \u003d\u003d null) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (e2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return ((Event) e1).getPeriod().compareTo(((Event) e2).getPeriod());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Marks a task as completed."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param idx the index of the task to mark as done (as listed)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task marked as complete."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeIndexOutOfBoundsException if the index of the task to delete is not shown (as listed)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Task markAsDone(int idx) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (idx \u003c\u003d 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"Hmm... There\u0027s no such task index.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Task task \u003d tasks.get(idx);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the number of tasks in the list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public long count() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tasks.size() - 1; // account for 1-indexing."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Checks if the task list is empty."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return true if empty, false otherwise."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return count() \u003d\u003d 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 258
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents the different types of tasks that can be created."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    TODO, EVENT, DEADLINE, DEADLINE_OVERDUE, ALL"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 8
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a task to do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 20
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author KendrickAng-reused --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c!-- Solution adapted from ccyccyccy/duke --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"490.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" style\u003d\"-fx-background-color: white; -fx-background-radius: 8.0\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cFont name\u003d\"Courier New\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cclip\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cCircle centerX\u003d\"50.0\" centerY\u003d\"50.0\" radius\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/clip\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 36,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"400.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"400.0\" layoutY\u003d\"556.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"98.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"554.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"498.0\" style\u003d\"-fx-background-color: lightblue;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Test general incorrect command parsing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void parseCommandIncorrectInputExceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] tests \u003d {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"\", \"      \", \"blah\", \"/by\", \"fsdaf\", \"exit\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String command: tests) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            assertThrows(DukeMissingDescriptionException.class, () -\u003e Parser.parse(command));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Tests for parsing commands related to Deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void parseDeadlineCorrectInputCorrectOutput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] fullCommandArr \u003d {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"deadline live /by 031219 1800\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"deadline die /by 041219 1800\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[][] outArr \u003d {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            {\"live\", \"/by\", \"031219\", \"1800\"},  // live each day like it\u0027s your last"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            {\"die\", \"/by\", \"041219\", \"1800\"}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (int i \u003d 0; i \u003c fullCommandArr.length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            assertArrayEquals("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    ((AddCommand) Parser.parse(fullCommandArr[i])).getArgs(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    outArr[i]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void parseDeadlineInsufficientArgsExceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] fullCommandArr \u003d {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"deadline \","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"deadline live /by\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String command: fullCommandArr) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            assertThrows(DukeUnknownInputException.class, () -\u003e Parser.parse(command));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void parseDeadlineWrongDateFormatExceptionThrown() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] fullCommandArr \u003d {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"deadline live /by 3/12/2019\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"deadline live /by 3/12 1800\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"deadline live /by 3/12 9999\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String command: fullCommandArr) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            assertThrows(DukeUnknownInputException.class, () -\u003e Parser.parse(command));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Tests for commands related to Event."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void parseEventCorrectInputCorrectOutput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] in \u003d {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"event live and die /at 2pm - 4pm\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"event revive /at 4.05pm\"  // gamers never die"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[][] out \u003d {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            {\"live\", \"and\", \"die\", \"/at\", \"2pm\", \"-\", \"4pm\"},"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            {\"revive\", \"/at\", \"4.05pm\"}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (int i \u003d 0; i \u003c in.length; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            assertArrayEquals("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    out[i],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    ((AddCommand) Parser.parse(in[i])).getArgs()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void parseEventInsufficientArgsExceptionThrown() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] in \u003d {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"event live and die\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"event live and die /at\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String command: in) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            assertThrows(DukeUnknownInputException.class, () -\u003e Parser.parse(command));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Tests for commands related to Todo."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void parseTodoCorrectInputCorrectOutput() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] in \u003d {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \"todo live\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[][] out \u003d {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            {\"live\"}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (int i \u003d 0; i \u003c in.length; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            assertArrayEquals("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                out[i],"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                ((AddCommand) Parser.parse(in[i])).getArgs()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 126
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DeadlineStub extends Deadline {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DeadlineStub(String description, String deadline, boolean isDone) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description, deadline, isDone);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 7
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void deadlineGetDeadlineCorrectInputCorrectOutput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        DeadlineStub deadline \u003d new DeadlineStub(\"Test\", \"031219 1800\", false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(\"031219 1800\", deadline.getDeadline());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 14
    }
  },
  {
    "path": "src/test/java/duke/task/EventStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class EventStub extends Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public EventStub(String description, String period, boolean isDone) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description, period, isDone);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 7
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void eventGetPeriodManualInputCorrectOutput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EventStub event \u003d new EventStub(\"Test\", \"3/12/2019 1800\", false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(\"3/12/2019 1800\", event.getPeriod());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void eventToStringManualInputCorrectFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        EventStub event \u003d new EventStub(\"Test\", \"3/12/2019 1800\", false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(\"[E][X] Test (at: 3/12/2019 1800)\", event.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 20
    }
  },
  {
    "path": "src/test/java/duke/task/TodoStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class TodoStub extends Todo {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TodoStub(String description, boolean isDone) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 7
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void todoToStringManualInputCorrectFormat() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        TodoStub todo \u003d new TodoStub(\"Test\", false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(\"[T][X] Test\", todo.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 14
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tHello! I\u0027m duke.Duke. What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tGot it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[T][X] borrow book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNow you have 1 duke.task in the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tGot it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[D][X] return book (by: Sunday)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tGot it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[E][X] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNow you have 3 tasks in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t1. [T][X] borrow book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t2. [D][X] return book (by: Sunday)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t3. [E][X] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t:\u0027( OOPS!!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t:\u0027( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNice! I\u0027ve marked this duke.task as done:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[T][O] borrow book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNice! I\u0027ve marked this duke.task as done:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[D][O] return book (by: Sunday)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNoted. I\u0027ve removed this duke.task:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[D][O] return book (by: Sunday)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t1. [T][O] borrow book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t2. [E][X] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tBye. Hope to see you again soon!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 49
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "todo"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "blah"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "if not exist ..\\out mkdir ..\\out"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM compile the code into the out folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\out ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "   echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "   exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "java -classpath ..\\out main/java/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 21
    }
  }
]
