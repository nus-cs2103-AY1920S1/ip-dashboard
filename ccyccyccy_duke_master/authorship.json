[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "run {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 33,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    String fullCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    String[] splitInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Constructor for general Command class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param fullCommand The line that the user types."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    Command(String fullCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        splitInput \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Carries out implementation of Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param tasks TaskList of all added tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Duke output string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws DukeException When command cannot execute due to wrong user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public abstract String execute(TaskList tasks) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 23
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"d MMMM Y hh:mma\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Duke.Duke.Deadline Constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param by Date string formatted in the form \"d/M/yyyy HHmm\"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, inputFormat);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(outputFormat) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Used in saving of task data for storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Formatted string representation of deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"|\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(\"D\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(by.format(inputFormat));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Transform string representation of deadline back to object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param saveString String representation of deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Duke.Duke.Deadline object constructed from saved data."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static Deadline parseSaveString(String saveString) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] saveStringArr \u003d saveString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        boolean isDone \u003d saveStringArr[1].equals(\"1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String description \u003d saveStringArr[2];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String by \u003d saveStringArr[3];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            deadline.markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 59
    }
  },
  {
    "path": "src/main/java/duke/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    DeadlineCommand(String fullCommand) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int byIndex \u003d fullCommand.indexOf(\" /by \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (byIndex \u003c 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new DukeException(\"Command deadline requires an argument /by, followed by deadline date\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String deadlineDescription \u003d  fullCommand.substring(9, byIndex);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String by \u003d fullCommand.substring(byIndex + 5);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Deadline deadline \u003d new Deadline(deadlineDescription, by);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + deadline.toString()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + String.format(\"\\nNow you have %d tasks in the list.\", tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 24
    }
  },
  {
    "path": "src/main/java/duke/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    DeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Task taskToDelete;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int deleteIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            deleteIndex \u003d Integer.parseInt(splitInput[1]) - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new DukeException(\"Argument passed to delete must be a valid integer\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            taskToDelete \u003d tasks.getTaskAtIndex(deleteIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new DukeException(\"Selected task number does not exist.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        tasks.deleteTaskAt(deleteIndex);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + taskToDelete.toString()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + String.format(\"\\nNow you have %d tasks in the list.\", tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 28
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String backgroundColor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private DialogBox(String text, Image img, String textBackgroundColor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        dialog.setStyle(\"-fx-background-color: \" + textBackgroundColor + \";\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String textBackgroundColor \u003d \"#DCF2FA\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new DialogBox(text, img, textBackgroundColor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String textBackgroundColor \u003d \"#BFE9F9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        var db \u003d new DialogBox(text, img, textBackgroundColor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 66
    }
  },
  {
    "path": "src/main/java/duke/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    DoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Task taskToMarkAsDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int selectedIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            selectedIndex \u003d Integer.parseInt(splitInput[1]) - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new DukeException(\"Argument passed to done must be a valid integer\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            taskToMarkAsDone \u003d tasks.getTaskAtIndex(selectedIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new DukeException(\"Selected task number does not exist.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        taskToMarkAsDone.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + taskToMarkAsDone.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 27
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Entry class to program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String filePath \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (FileNotFoundException ignore) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            // Make use of default created empty TaskList if no save file is found"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            ui.showSaveFileNotFoundError();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Initialize and run program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        while (!(input \u003d ui.readCommand()).equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                c.execute(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                storage.save(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                output \u003d c.execute(tasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                storage.save(tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 71,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 7
    }
  },
  {
    "path": "src/main/java/duke/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class ErrorCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    ErrorCommand(String fullCommand) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 13
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"d MMMM Y hh:mma\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Duke.Duke.Event Constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param at Date string formatted in the form \"d/M/yyyy HHmm\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, inputFormat);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(outputFormat) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"|\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(\"E\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(at.format(inputFormat));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Transform string representation of event back to object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param saveString String representation of event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Duke.Duke.Event object constructed from saved data."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static Event parseSaveString(String saveString) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] saveStringArr \u003d saveString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        boolean isDone \u003d saveStringArr[1].equals(\"1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String description \u003d saveStringArr[2];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String at \u003d saveStringArr[3];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 56
    }
  },
  {
    "path": "src/main/java/duke/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    EventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int atIndex \u003d fullCommand.indexOf(\" /at \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (atIndex \u003c 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new DukeException(\"Duke.Duke.Command event requires an argument /at, followed by event date\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String eventDescription \u003d  fullCommand.substring(6, atIndex);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String at \u003d fullCommand.substring(atIndex + 5);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Event event \u003d new Event(eventDescription, at);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + event.toString()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + String.format(\"\\nNow you have %d tasks in the list.\", tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 24
    }
  },
  {
    "path": "src/main/java/duke/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String searchString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            searchString \u003d fullCommand.substring(5);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new DukeException(\"Find command needs an argument\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TaskList filteredTasks \u003d tasks.search(searchString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredTasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            sj.add((i + 1) + \". \" + filteredTasks.getTasks().get(i));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 27
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 12
    }
  },
  {
    "path": "src/main/java/duke/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    ListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            sj.add((i + 1) + \". \" + tasks.getTasks().get(i));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 18
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 52
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Returns specific Duke.Duke.Command from given user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param fullCommand User input string."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Duke.Duke.Command to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] splitInput \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String command \u003d splitInput[0];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new ListCommand(fullCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new DeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new EventCommand(fullCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new TodoCommand(fullCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new ErrorCommand(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 32
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public final class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Save data to filePath specified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param taskList Tasks to be saved."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IOException When cannot save task data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String directoryName \u003d new File(filePath).getParent();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        File directory \u003d new File(directoryName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        directory.mkdir();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            sj.add(task.getSaveString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        writer.write(sj.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Load data from filePath specified."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Duke.Duke.TaskList as loaded from file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws DukeException When file format is wrong."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IOException When unable to read file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TaskList load() throws DukeException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String line \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            switch (line.charAt(0)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                Todo todo \u003d Todo.parseSaveString(line);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                tasks.add(todo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                Deadline deadline \u003d Deadline.parseSaveString(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                tasks.add(deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                Event event \u003d Event.parseSaveString(line);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new DukeException(\"Unknown save file format\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new TaskList(tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 67
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    void markAsDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Gets string formatted to be saved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return String to be written into save file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public abstract String getSaveString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 30
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Task getTaskAtIndex(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Returns number of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Number of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Delete task at index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param index Duke.Duke.Task index to be deleted, zero-indexed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void deleteTaskAt(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.tasks.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Add task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param task Duke.Duke.Task to be added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TaskList search(String str) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new TaskList(this.tasks.stream().filter(t -\u003e t.description.contains(str)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 57
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Duke.Duke.Todo Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param description Description of todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"|\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(\"T\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Transform string representation of todo back to object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param saveString String representation of todo."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Duke.Duke.Todo object constructed from saved data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static Todo parseSaveString(String saveString) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] saveStringArr \u003d saveString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        boolean isDone \u003d saveStringArr[1].equals(\"1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String description \u003d saveStringArr[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            todo.markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 44
    }
  },
  {
    "path": "src/main/java/duke/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    TodoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String todoDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            todoDescription \u003d fullCommand.substring(5);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Todo todo \u003d new Todo(todoDescription);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + todo.toString()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + String.format(\"\\nNow you have %d tasks in the list.\", tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 23
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final String indent \u003d \"    \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Prints welcome message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String intro \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + \"What can I do for you?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(indent(wrapWithHorizontalLines(intro)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Prints goodbye message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String endMessage \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(indent(wrapWithHorizontalLines(endMessage)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Prints list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void showTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            sj.add((i + 1) + \". \" + taskList.getTasks().get(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(indent(wrapWithHorizontalLines(sj.toString())));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Prints message after markAsDone command executed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param task Task marked as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void showMarkAsDone(Task task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + indent(task.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(indent(wrapWithHorizontalLines(output)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Reads input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Input string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Wraps text with horizontal lines."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param str String to be wrapped."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Wrapped string."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String wrapWithHorizontalLines(String str) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + str"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + \"\\n\" + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Prints message after add task command executed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param task Task added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param numberOfTasksLeft Number of tasks left."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void showAddTask(Task task, int numberOfTasksLeft) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + indent(task.toString())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + String.format(\"\\nNow you have %d tasks in the list.\", numberOfTasksLeft);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(indent(wrapWithHorizontalLines(output)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Prints message after delete task command executed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param task Task deleted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param numberOfTasksLeft Number of tasks left."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void showDeleteTask(Task task, int numberOfTasksLeft) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + indent(task.toString())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + String.format(\"\\nNow you have %d tasks in the list.\", numberOfTasksLeft);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(indent(wrapWithHorizontalLines(output)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Prints message for find result command."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param tasks Filtered tasks from search."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void showFindResult(TaskList tasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        sj.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            sj.add((i + 1) + \". \" + tasks.getTasks().get(i));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(indent(wrapWithHorizontalLines(sj.toString())));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Prints message after error command executed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void showGenericError() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(indent(wrapWithHorizontalLines(output)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Prints message if no save file is detected."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void showSaveFileNotFoundError() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String output \u003d \"Save file not found. Creating new save file...\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        System.out.println(indent(wrapWithHorizontalLines(output)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Indents given string block."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param str String block to be indented."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Intended string block."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String indent(String str) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] indentedStrings \u003d Arrays.stream(str.split(\"\\n\")).map(s -\u003e indent + s).toArray(String[]::new);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return String.join(\"\\n\", indentedStrings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 131
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            \u003cclip\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u003cCircle centerX\u003d\"50.0\" centerY\u003d\"50.0\" radius\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            \u003c/clip\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void getSaveString_void_returnsCorrectlyFormattedString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Deadline d \u003d new Deadline(\"Some stuff to do\", \"25/11/2019 1100\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(d.getSaveString(), \"D|0|Some stuff to do|25/11/2019 1100\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void toString_void_producesCorrectlyFormattedString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Deadline d \u003d new Deadline(\"Some stuff to do\", \"25/11/2019 1100\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(d.toString(), \"[D][✘] Some stuff to do (by: 25 November 2019 11:00AM)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 18
    }
  },
  {
    "path": "src/test/java/TodoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void execute_void_addsTaskToTaskList () throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TodoCommand c \u003d new TodoCommand(\"todo test this method\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TaskList t \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        c.execute(t, new Ui(), new Storage(\"testPath\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(t.getTaskAtIndex(0).toString(), \"[T][✘] test this method\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 13
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 6
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "if ! javac -cp ../src/main/java/ -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 35
    }
  }
]
