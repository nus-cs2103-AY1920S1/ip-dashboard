[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 28,
      "-": 19
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "# Duke Task Manager User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "To execute the program, please ensure you have a duke.txt text file and the duke-0.2.jar jar executable file are in the same directory."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "## ___Features___ "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Add`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `List`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Delete`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Done`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Find`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Bye`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `List` "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "#####   Lists all the current tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    1.[D][✓] cs2103 (by: 30 September 2019, 11.59PM)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    2.[E][✘] acronis (at: 26 September 2019, 6.00PM)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    3.[T][✘] workout"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Add`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "#####    Adds a task to the current database. Tasks can be a ToDo, Deadline or Event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    todo midterm paper"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    [T][✘] midterm paper"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    deadline finish lab1 /by 01/10/2019, 2359"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    [D][✘] finish lab1 (by: 01 October 2019, 11.59PM)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    event fintech hackathon /at 11/11/2019, 1800"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    [E][✘] fintech hackathon (at: 11 November 2019, 6.00PM)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "         "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Delete`  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "##### Deletes selected task.   "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    delete 1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    [D][✓] cs2103 (by: 30 September 2019, 11.59PM)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Done`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "##### Marks the selected task as done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    done 1"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    [E][✘] acronis (at: 26 September 2019, 6.00PM)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Find`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "##### Finds tasks that contains the specified keyword."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    find midterm"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    3.[T][✘] midterm paper"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "### `Bye`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "##### Ends interaction with Duke and saves new data to file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    bye"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 98,
      "-": 17
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "D | 1 | cs2103 | 30 September 2019, 11.59PM"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "E | 1 | acronis | 26 September 2019, 6.00PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "E | 1 | slush | 12 December 2019, 12.00PM"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 3
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Represents the Duke task manager*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        storage \u003d new Storage(\"duke.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        dialogContainer \u003d new VBox(20.0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                DialogBox.getUserDialog(userText.getText(), new ImageView(user).getImage()),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                DialogBox.getDukeDialog(dukeText.getText(), new ImageView(duke).getImage())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        );"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return ui.getResponse();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 149,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 49
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * AddCommand handles the adding of tasks into Duke list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected Task addedTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public AddCommand(String fullCommand, Task addedTask) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.addedTask \u003d addedTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        tasks.addTask(addedTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.clearResponse();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.showTaskAdded(addedTask, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 29
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Command is the parent class of all commands, storing full command in its"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * state and having an execute method as well as an exit method."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected String fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * DeleteCommand handles the deletion of tasks from Duke list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public DeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(fullCommand.replaceAll(\"\\\\D+\",\"\")) - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        Task deletedTask \u003d tasks.getTasks().get(taskIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        tasks.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.clearResponse();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.showTaskDeleted(deletedTask, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 28
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * DoneCommand handles the marking of tasks as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public DoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(fullCommand.replaceAll(\"\\\\D+\",\"\")) - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        Task completedTask \u003d tasks.getTasks().get(taskIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        tasks.doneTask(completedTask);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.clearResponse();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.showTaskDone(completedTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * ExitCommand handles the exit of Duke when executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public ExitCommand(String fullCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.clearResponse();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.showFarewell();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 25
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected String keyWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public FindCommand(String fullCommand, String keyWord) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.clearResponse();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.showMatchingTasksMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            if (description.contains(keyWord)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                int taskIndex \u003d tasks.getTasks().indexOf(task) + 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                ui.showMatchingTasks(task, taskIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 31
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.handler.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * ListCommand handles the listing of all tasks in Duke list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public ListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.clearResponse();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ui.showTasksMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        for (int i \u003d 1; i \u003c tasks.getNumberOfTasks() + 1; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            Task currentTask \u003d tasks.getTasks().get(i - 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            String line \u003d String.format(i + \".\" + currentTask, currentTask.getStatusIcon());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            ui.setResponse(line);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 30
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * DukeException takes in an error message and prints it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 10
    }
  },
  {
    "path": "src/main/java/duke/handler/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Parser is the logic handler of Duke. It breaks down each command entered"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * by the user and returning a Command object of its corresponding type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Parser() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        String line \u003d fullCommand.toLowerCase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        if (line.length() \u003e\u003d 3 \u0026\u0026 line.substring(0, 3).equals(\"bye\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            ExitCommand exitCommand \u003d new ExitCommand(line);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            return exitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } else if (line.length() \u003e\u003d 4 \u0026\u0026 line.substring(0, 4).equals(\"list\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            ListCommand listCommand \u003d new ListCommand(line);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            return listCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } else if (line.length() \u003e\u003d 6 \u0026\u0026 line.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            DeleteCommand deleteCommand \u003d new DeleteCommand(line);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            return deleteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } else if (line.length() \u003e\u003d 4 \u0026\u0026 line.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            DoneCommand doneCommand \u003d new DoneCommand(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            return doneCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            Task newTask \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            if (line.length() \u003e\u003d 4 \u0026\u0026 line.substring(0, 4).equals(\"todo\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String newLine \u003d line.substring(5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                if (newLine.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    newTask \u003d new ToDo(newLine);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    AddCommand addCommand \u003d new AddCommand(line, newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    return addCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            } else if (line.length() \u003e\u003d 8 \u0026\u0026 line.substring(0, 8).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                int index \u003d line.indexOf(\"/by \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                if (index \u003d\u003d -1 || line.substring(9, index).length() \u003d\u003d 0 || line.substring(index + 3).length() \u003d\u003d 0 ) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! Please specify a [description of deadline] /by [date of deadline].\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    String description \u003d line.substring(9, index - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    String by \u003d line.substring(index + 4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    newTask \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    AddCommand addCommand \u003d new AddCommand(line, newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    return addCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            } else if (line.length() \u003e\u003d 5 \u0026\u0026 line.substring(0, 5).equals(\"event\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                int index \u003d line.indexOf(\"/at \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                if (index \u003d\u003d -1 || line.substring(6, index).length() \u003d\u003d 0 || line.substring(index + 3).length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! Please specify a [description of event] /at [date of event]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    String description \u003d line.substring(6, index - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    String at \u003d line.substring(index + 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    newTask \u003d new Event(description, at);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    AddCommand addCommand \u003d new AddCommand(line, newTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    return addCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            } else if (line.length() \u003e\u003d 4 \u0026\u0026 line.substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                if (line.substring(5).length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! Please specify a keyword.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    String keyWord \u003d line.substring(5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    FindCommand findCommand \u003d new FindCommand(fullCommand, keyWord);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    return findCommand;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 79
    }
  },
  {
    "path": "src/main/java/duke/handler/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Storage is the handler that retrieves data from the duke.txt file, and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * writes new data to the same file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(\"duke.txt\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String[] readData \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                Task newTask \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                if (readData[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    newTask \u003d new ToDo(readData[1], readData[2]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else if (readData[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    newTask \u003d new Deadline(readData[1], readData[2], readData[3]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else if (readData[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    newTask \u003d new Event(readData[1], readData[2], readData[3]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                if (newTask !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    tasks.add(newTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(\"duke.txt\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                char type \u003d task.getTaskType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String status \u003d (task.getStatusIcon().equals(\"\\u2713\")) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String date \u003d (type \u003d\u003d \u0027T\u0027) ? \"\" : \" | \" + task.getDate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                writer.write(type + \" | \" + status + \" | \" + description + date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 72
    }
  },
  {
    "path": "src/main/java/duke/handler/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Ui is the face of Duke, taking in inputs from users and also"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * displaying template messages of Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.response \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        response \u003d \"Hello from\\n\" + logo + \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showFarewell() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showTasksMessage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showTaskAdded(Task addedTask, int numberOfTasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(addedTask.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(String.format(\"Now you have %d tasks in the list.\", numberOfTasks));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showTaskDeleted(Task deletedTask, int numberOfTasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(deletedTask.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(String.format(\"Now you have %d tasks in the list.\", numberOfTasks));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showTaskDone(Task completedTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(completedTask.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showMatchingTasksMessage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showMatchingTasks(Task matchedTask, int taskIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(taskIndex + \".\" + matchedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "//    public void showLine() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "//        setResponse(\"_______________________________\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "//        System.out.println(\"_______________________________\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        clearResponse();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(error);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        clearResponse();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        setResponse(\"☹ OOPS!!! File could not be found.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void setResponse(String line) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        response +\u003d line + \"\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void clearResponse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        response \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 104
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Represents a Deadline task. A Deadline is a task that has"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * a \u0027description\u0027 and a \u0027by\u0027 date and time that task has to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * be completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private char taskType \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private SimpleDateFormat simpleDateParser \u003d new SimpleDateFormat(\"dd/MM/yyyy, HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private SimpleDateFormat simpleDateFormatter \u003d new SimpleDateFormat(\"dd MMMM yyyy, h.mma\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            Date dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            if (by.contains(\"/\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                dateTime \u003d simpleDateParser.parse(by);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                dateTime \u003d simpleDateFormatter.parse(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            this.by \u003d dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Deadline(String status, String description, String by) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.setStatus(status);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            Date dateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            if (by.contains(\"/\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                dateTime \u003d simpleDateParser.parse(by);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                dateTime \u003d simpleDateFormatter.parse(by);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            this.by \u003d dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return String.format(\"[D][%s] \" + super.toString() + \" (by: \" + getDate() + \")\", super.getStatusIcon());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return simpleDateFormatter.format(by);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Represents an Event task. An Event is a task that has"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * a \u0027description\u0027 and an \u0027at\u0027 date and time that task has to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * be completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private char taskType \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private SimpleDateFormat simpleDateParser \u003d new SimpleDateFormat(\"dd/MM/yyyy, HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private SimpleDateFormat simpleDateFormatter \u003d new SimpleDateFormat(\"dd MMMM yyyy, h.mma\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            Date dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            if (at.contains(\"/\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                dateTime \u003d simpleDateParser.parse(at);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                dateTime \u003d simpleDateFormatter.parse(at);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            this.at \u003d dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Event(String status, String description, String at) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.setStatus(status);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            Date dateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            if (at.contains(\"/\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                dateTime \u003d simpleDateParser.parse(at);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                dateTime \u003d simpleDateFormatter.parse(at);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            this.at \u003d dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return String.format(\"[E][%s] \" + super.toString() + \" (at: \" + getDate() + \")\", super.getStatusIcon());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return simpleDateFormatter.format(at);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Represents a task to be completed. A task has a description and a boolean"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * state isDone, describing if the task is completed or not."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void setStatus(String status) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.isDone \u003d (status.equals(\"1\")) ? true : false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void setIsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return \u0027n\u0027;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 43
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Represents a list of tasks to be handled by Duke. It has methods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * for handling each task object in the list, such as adding, deleting,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * marking as done etc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void doneTask(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        task.setIsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 38
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " * Represents a to do task that needs to be completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private char taskType \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public ToDo(String status, String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.setStatus(status);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return String.format(\"[T][%s] \" + super.toString(), super.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 28
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void testTaskType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        assertEquals(\u0027D\u0027, new Deadline(\"cs2103 ip\", \"30/09/2019, 2359\").getTaskType());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void testNewTaskIsUndone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        assertEquals(\"\\u2718\", new Deadline(\"cs2103 ip\", \"30/09/2019, 2359\").getStatusIcon());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 17
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 10
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void testTaskType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        assertEquals(\u0027E\u0027, new Event(\"cs2103 ip\", \"30/09/2019, 2359\").getTaskType());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void testNewTaskIsUndone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        assertEquals(\"\\u2718\", new Event(\"cs2103 ip\", \"30/09/2019, 2359\").getStatusIcon());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 17
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void testTaskType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        assertEquals(\u0027T\u0027, new ToDo(\"cs2103 ip\").getTaskType());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void testNewTaskIsUndone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        assertEquals(\"\\u2718\", new ToDo(\"cs2103 ip\").getStatusIcon());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 17
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "todo 1"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 21
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "       mainClassName \u003d \"seedu.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 2,
      "-": 168
    }
  }
]
