[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    //id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "version \u00270.1.4\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    archiveBaseName \u003d \"Ouroboros\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    archiveVersion \u003d \"0.2.1\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/*javafx {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}*/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "run {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 58,
      "-": 14
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] training"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[E][?] testEvent (at: 20/9/2010 0500-0530)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] sleep"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] hi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 2"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 3"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 4"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 5"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 6"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 7"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 8"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 9"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 10"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 11"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 12"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 12"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 13"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 14"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 15"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 16"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 17"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 18"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 19"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 20"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 22"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[E][?] 15 (at: 20/11/2019 1500-1530)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] a"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] b"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 125
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "# __User Guide__"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "_Duke is a command-line-based task manager._"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "## _Features_"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "### 1. Add a task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Add a task either of type Todo, Deadline or Event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* __Todo__ "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * format: todo \u003cTASK_NAME\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * Example: "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    * Usage: todo borrow_book     "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    * Expected Outcome: "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][-]borrow_book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "1 tasks to go"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* __Deadline__ "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * format: deadline \u003ctask_name\u003e /by \u003cdue date/time\u003e "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    * due date/time must be written in the format (d/MM/yyyy) (HHmm)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * Example: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    * Usage: deadline return_book /by 31/9/2019 2359     "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    * Expected Outcome: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[D][-]return_book (by: 30/9/2019 2359)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "2 tasks to go"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* __Event__ "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * format: event \u003ctask_name\u003e /at \u003cevent date\u003e \u003cstart time - end time\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    * event date/time must be written in the format (d/MM/yyyy) (HHmm-HHmm)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * Example: "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    * Usage: event CS2103_lecture /at 20/09/2019 1200-1400     "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    * Expected Outcome:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[E][-] CS2103_lecture (at: 20/09/2019 1200-1400)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "3 tasks to go"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "### 2. Mark a task as done"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Mark an existing task as complete. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Incomplete tasks have a \"-\" status symbol left of their task name, while completed tasks have a \"+\" status symbol."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* format: done \u003cindex\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * index indicates the position of the task on the list to mark as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Example"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * done 1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Expected Outcome: "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Nice!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][+]borrow_book"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "### 3. Delete a task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Delete an existing task from the task list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* format: done \u003cindex\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * index indicates the position of the task on the list to mark as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Example:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * done 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Expected Outcome: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Ok. I\u0027ve removed the task:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][+]borrow_book"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "2 tasks left"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "### 4. Delete all tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Delete every task from the task list and starting fresh."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* format: clear"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Example:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "  * clear"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Expected Outcome: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Got it. Starting fresh."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "### 5. Find tasks using keywords"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Find a task or certain tasks using given keyword(s)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* format: search \u003ckeyword\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Example: search book"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Here are the matching task(s) in your list:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "1.[D][-]return_book (by: 30/9/2019 2359)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "### 6. Display the task list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Display the full list of tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* format: list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Example: list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Nice and Light."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Here are the task(s) in your list:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "1.[D][-]return_book (by: 30/9/2019 2359)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "2.[E][-] CS2103_lecture (at: 20/09/2019 1200-1400)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "### 7. Set task as recurssive."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Set a task to recur once every specified time period"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* format: recur \u003cindex\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Example: recur 2 days 2"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "*Expected Outcome:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Got it."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Setting this event to recurssive:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "2.[E][-] CS2103_lecture (at: 20/09/2019 1200-1400) every: 2 day(s)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "### 8. Set recurssive task as non-recurssive."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Set a task to ocue only once at the specified time."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* format: revert \u003cindex\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Example: revert 2"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Got it."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Setting this event to non-recurring:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "2.[E][-] CS2103_lecture (at: 20/09/2019 1200-1400)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "### 9. exit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "Application closes after displaying farewell message."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* format: bye"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Example: bye"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "* Expected Outcome:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "See you around..."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 121,
      "-": 13
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.setMinHeight(this.dialog.getMinHeight());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void getFont(String fName, int size) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        InputStream is \u003d Main.class.getResourceAsStream(fName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Font font \u003d  Font.loadFont(getClass().getResourceAsStream(fName), size);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.dialog.setFont(font);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        db.getFont(\"/fonts/Dudu_Calligraphy.ttf\",25);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        db.getFont(\"/fonts/Faraco_Hand.ttf\", 18);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 71
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Duke with no params."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Required to for javaFx application to function."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Duke(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String filePath \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (c.isExit()){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ui.showGoodbye();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return outContent.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(sw);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            e.printStackTrace(pw);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String sStackTrace \u003d sw.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return \"OOPS! Dunno what to do with this: \" + System.lineSeparator() + sStackTrace;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 60,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 12
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            stage.setTitle(\"Ouroboros\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        VBox.setVgrow(scrollPane, javafx.scene.layout.Priority.ALWAYS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String welcomeMsg \u003d (\"      Hi there.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"      Welcome to\"  + System.lineSeparator() + \"      Ouroborus\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(welcomeMsg, dukeImage));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                //new HBox(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                //new HBox(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            PauseTransition pause \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            pause.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            pause.play();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 66
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to add a new Task to Task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String specifics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for AddCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param taskType type of task (e.g. deadline, event etc.)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param specifics includes the task name as well as the date and time in the case of DEADLINE and EVENT."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public AddCommand(FullCommand taskType, String specifics) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d taskType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.specifics \u003d specifics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to check if command is an ExitCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false as command is an AddCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(!super.type.getName().equals(\"bye\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * adds task corresponding to command type and specifics to TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks TaskList to add the task to."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList stored in storage.filepath."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Creating new Deadline and Event throws exception if not written in correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            newTask \u003d new Todo(specifics);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            newTask \u003d new Deadline(specifics);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            newTask \u003d new Event(specifics);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.readTask(newTask, tasks.taskNum);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 61
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ClearCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for ClearCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ClearCommand(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.CLEAR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to check if command is an ExitCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false as command is a ClearCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(!super.type.getName().equals(\"bye\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Clears task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks Current TaskList object used in this instance of Duke. Removes specified task from tasks.schedule."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage Updates data record of TaskList in storage.filepath."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Thrown when index \u003d\u003d 0, or when index is larger than number of Task(s) in TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int incompleteNum \u003d tasks.taskNum - tasks.completedNum;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        tasks.reset();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.readClear(incompleteNum);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 38
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Abstract class which all other command classes extend. (AddCommand etc...) with the exception of FulLCommand enum."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    FullCommand type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Checks to see if type equals FullCommand.BYE."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return boolean value whether this is an Exit command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return type.getName().equals(\"bye\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Carries out the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke.."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException subclass of Command may throw DukeException when executed with invalid specification."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 30
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to remove Task from Task List."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index the index of the task to delete n the Task List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.DELETE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to check if command is an ExitCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false as command is a DeleteCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(!super.type.getName().equals(\"bye\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Removes the current (index)th task from the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks Current TaskList object used in this instance of Duke. Removes specified task from tasks.schedule."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage Updates data record of TaskList in storage.filepath."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Thrown when index \u003d\u003d 0, or when index is larger than number of Task(s) in TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Task removedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.readDelete(removedTask, tasks.taskNum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Index out of bounds.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Please enter a single integer for index of task to delete.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 50
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Recurrence;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for EditCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index index of Task in TaskList to mark as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditCommand(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.DONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used tp check if command is an ExitCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false as command is an EditCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(!super.type.getName().equals(\"bye\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Marks the (index)th task in TaskList as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke.."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Thrown when index \u003d\u003d 0, or when index is larger than number of Task(s) in TaskList,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *                       or when index of Task to markAsComplete is not properly presented."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Task completedTask \u003d tasks.complete(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.readDone(completedTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (completedTask instanceof Recurrence) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                if (((Recurrence) completedTask).isRecurring) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    Task nextTask \u003d ((Recurrence) completedTask).getRecurrence();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    tasks.addTask(nextTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    ui.showUpdateMessage(nextTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Index out of bounds.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Please enter a single integer index of task to delete.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 59
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to end program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.BYE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /** Used by Duke class method run to check for exit command and terminate program if exit command is found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return true as command is ExitCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(super.type.getName().equals(\"bye\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Closes FileWriter used by storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke. Not needed here."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user. Not needed here."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage closes FileWriter of storage. Changes to Task List are recorded in storage.filepath."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException if invalid filepath. (Directory tampered with when program is running)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 35
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to list all tasks containing keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param keyword when executed, will search for all tasks with keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.FIND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * FindCommand is not a ExitCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(!super.type.getName().equals(\"bye\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Generates a TaskList shortlist containing only tasks with the keyword."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Passes TaskList as an argument for ui.showMatches to display to user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks TaskList containing all Tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException should not be thrown for this Command subclass."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ArrayList\u003cTask\u003e shortlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (Task task: tasks.getList()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (task.findWord(keyword)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                shortlist.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.showMatches(new TaskList(shortlist));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 56
    }
  },
  {
    "path": "src/main/java/command/FullCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Enum detailing all the valid commands Duke understands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Used by Parser to generate Command Object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Easy way to check if user types invalid command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public enum FullCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    LIST(\"list\"), DONE(\"done\"), DELETE(\"delete\"), TODO(\"todo\"), DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EVENT(\"event\"), BYE(\"bye\"), FIND(\"find\"), RECUR(\"recur\"), CLEAR(\"clear\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        REVERT(\"revert\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private FullCommand(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Generates FullCommand based on String user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param keyword Specifies the type of FullCommand)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return return FullCommand to be parsed by parser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Thrown when user enters invalid command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static FullCommand getByName(String keyword) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (FullCommand command : values()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (command.getName().equals(keyword)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        throw new DukeException(\"no such command\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 41
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to display the full list of recorded tasks to user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor of ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.LIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to check if command is an ExitCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return ConstructorCommand is not ExitCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(!super.type.getName().equals(\"bye\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Passes TaskList as an argument for ui.readList to display to user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke.."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException should not be thrown for this Command subclass."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.readList(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 40
    }
  },
  {
    "path": "src/main/java/command/RecurCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Recurrence;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class RecurCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String unitTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for EditCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param details include index of Task in TaskList to set as recurring, type of unit time, and amount of unit time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public RecurCommand(String details) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            super.type \u003d FullCommand.RECUR;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String[] detailsArr \u003d details.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.index \u003d Integer.parseInt(detailsArr[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.unitTime \u003d detailsArr[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.quantity \u003d Integer.parseInt(detailsArr[2]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Give instructions in the format: Recur (index) (unit_time) (quantity)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used tp check if command is an ExitCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false as command is an RecurCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(!super.type.getName().equals(\"bye\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Marks the (index)th task in TaskList as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke.."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Thrown when index \u003d\u003d 0, or when index is larger than number of Task(s) in TaskList,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *                       or when index of Task to markAsComplete is not properly presented."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task task \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Can only set Event or Deadline as a recurrence.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Recurrence recurrence \u003d (Recurrence) task;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        recurrence.setAsRecurring(unitTime, quantity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.showRecurMessage(recurrence);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 58
    }
  },
  {
    "path": "src/main/java/command/RevertCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Recurrence;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class RevertCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for EditCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index include index of Task in TaskList to revert back to non-recurring."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public RevertCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.REVERT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used tp check if command is an ExitCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false as command is an RevertCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(!super.type.getName().equals(\"bye\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Marks the (index)th task in TaskList as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke.."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Thrown when index \u003d\u003d 0, or when index is larger than number of Task(s) in TaskList,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *                       or when index of Task to markAsComplete is not properly presented."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Todo tasks are not recurring.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (task instanceof Recurrence) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                if (!((Recurrence) task).isRecurring) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    throw new DukeException(\"Task is not recurring.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Recurrence recurrence \u003d (Recurrence) task;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            recurrence.revert();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.showRevertMessage(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Index out of bounds.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Please enter a single integer index of task to delete.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 60
    }
  },
  {
    "path": "src/main/java/datetime/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Wrapper of LocalDateTime. Stores date and time for Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DateTime  implements Cloneable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String display;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static DateTimeFormatter getStart \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static DateTimeFormatter getTime \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction of Deadline object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads substring from user input and gets date and time of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime Must be in the form (d/M/yyyy HHmm)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return DateTime object as dateTime parameter of Deadline object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown if date_time is not presented in the correct form."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime setDeadline(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime deadline \u003d new DateTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            deadline.start \u003d LocalDateTime.parse(dateTime, getStart);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            deadline.display \u003d deadline.start.format(getStart);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Deadline date/time format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in date(d/M/yyyy) time(HHmm)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction of Deadline object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads substring from text file and gets date and time of the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime Must be in the form (d/M/yyyy HHmm)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return DateTime object as dateTime parameter of Deadline object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime readDeadLine(String dateTime) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime deadline \u003d new DateTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        deadline.start \u003d LocalDateTime.parse(dateTime, getStart);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        deadline.display \u003d deadline.start.format(getStart);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction of Event object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads substring from user input and gets date, start time and end time of task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime Must be in the form (d/MM/yyyy HHmm-HHmm)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return DateTime object as dateTime parameter of Event object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown if missing end time or if date_time is not presented in the correct form."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime setEventTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime event \u003d new DateTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            int divider \u003d dateTime.indexOf(\"-\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (divider \u003d\u003d -1 || (divider \u003d\u003d dateTime.length() - 1)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Need to have end time.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String end \u003d dateTime.substring(divider + 1, dateTime.length());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            event.start \u003d LocalDateTime.parse(dateTime.substring(0, divider), getStart);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            event.endTime \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            event.display \u003d (event.start.format(getStart) + \"-\" + event.endTime.format(getTime));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Event date/time format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in date(d/M/yyyy) start_time(HHmm)-end_time(HHmm)\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction of Event object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads substring from text file and gets date, start time and end time of task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime Must be in the form (d/M/yyyy HHmm-HHmm)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return DateTime object as dateTime parameter of Event object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown if missing end time. This should not happen unless text file was tempered with."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime readEventTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime event \u003d new DateTime();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int divider \u003d dateTime.indexOf(\"-\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (divider \u003d\u003d -1 || (divider \u003d\u003d dateTime.length() - 1)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            || dateTime.substring(divider + 1).replace(\" \", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Need to have end time.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String end \u003d dateTime.substring(divider + 1, dateTime.length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        event.start \u003d LocalDateTime.parse(dateTime.substring(0, divider), getStart);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        event.endTime \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        event.display \u003d event.start.format(getStart) + \"-\" + event.endTime.format(getTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Object clone()throws CloneNotSupportedException{"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return super.clone();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Set date for next recurring event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param unitTime Time period in days/ weeks/ months/ years"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param quantity Amount of said time period."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return new Date"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException when DateTime cannot be cloned or when there is invalid unitTime input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DateTime setNewDate(String unitTime, int quantity) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime newTime \u003d (DateTime) this.clone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            switch (unitTime) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case \"day\": case \"days\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                newTime.start \u003d newTime.start.plusDays(quantity);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                newTime.updateDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return newTime;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case \"week\": case \"weeks\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                newTime.start \u003d newTime.start.plusDays(quantity * 7);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                newTime.updateDisplay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return newTime;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case \"month\": case \"months\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                newTime.start \u003d newTime.start.plusMonths(quantity);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                newTime.updateDisplay();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return newTime;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case \"year\": case\"years\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                newTime.start \u003d newTime.start.plusYears(quantity);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                newTime.updateDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return newTime;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Event can only be set to recur every n days/ weeks/ months/ years, not \" + unitTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (CloneNotSupportedException e){"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Error cloning DateTime\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void updateDisplay(){"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (this.endTime \u003d\u003d null){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.display \u003d this.start.format(getStart);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.display \u003d this.start.format(getStart) + \"-\" + this.endTime.format(getTime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return display;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 151
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Wraps exception. Helps to check if exception has been accounted for."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Catches exception and throws DukeException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 16
    }
  },
  {
    "path": "src/main/java/filewriter/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package filewriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Class used to store and read from text file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    FileWriter fileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int completedNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor of Storage object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param filePath filepath to text file to be read from and edited."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException When CreateWriter throws DukeException."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Storage(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void write(TaskList schedule) throws DukeException{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            File text \u003d new File(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            text.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fileWriter \u003d new FileWriter(text, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fileWriter.write(schedule.toText());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Error creating fileWriter\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Method to interpret each line in txt file and add corresponding Task to TaskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param line every line in the txt file represents a task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return Task object with type, task name, date and timing as described in String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown when Task is not stored in the correct format in txt file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Task read(String line) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        switch (line.charAt(line.indexOf(\"[\") + 1)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            output \u003d new Todo(line.substring(7, line.length()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            updateStatus(output, line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                int timeDivider \u003d line.indexOf(\"(by:\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                int recDivider \u003d line.indexOf(\" every: \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                String input \u003d line.substring(7, timeDivider);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                boolean isRecurring \u003d (recDivider !\u003d -1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                if (isRecurring){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    input +\u003d \"/by \" + DateTime.readDeadLine(line.substring(timeDivider + 5, recDivider - 1)).toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    input +\u003d \"/by \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                            + DateTime.readDeadLine(line.substring(timeDivider + 5, line.length() - 1)).toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                output \u003d new Deadline(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                updateStatus(output, line);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                getRecurrance(recDivider, line, output);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Deadline task not stored properly.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                int timeDivider \u003d line.indexOf(\"(at:\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                int recDivider \u003d line.indexOf(\" every: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                String input \u003d line.substring(7, timeDivider);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                boolean isRecurring \u003d (recDivider !\u003d -1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                if (isRecurring){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    input +\u003d \"/at \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                            + DateTime.readEventTime(line.substring(timeDivider + 5, recDivider - 1)).toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    input +\u003d \"/at \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                            + DateTime.readEventTime(line.substring(timeDivider + 5, line.length() - 1)).toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                output \u003d new Event(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                updateStatus(output, line);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                getRecurrance(recDivider, line, output);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Event task not stored properly.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Invalid entry in txt file: \"+ line);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void updateStatus(Task task, String line){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (line.substring(4,5).equals(\"+\")){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            completedNum +\u003d 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void getRecurrance(int recDivider, String line, Task task) throws DukeException{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (recDivider !\u003d -1){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (task instanceof Todo){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Txt error: Can only set Event or Deadline as a recurrence.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String[] details \u003d line.substring(recDivider + 8, line.length() - 4).split(\" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ((Recurrence) task).setAsRecurring(details[1], Integer.parseInt(details[0]));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads txt file and updates TaskList accordingly."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return object with updated ArrayList taskList used in construction of TaskList object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException when read throws DukeException."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Storage load() throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            completedNum \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            File text \u003d new File(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            text.createNewFile();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            text.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(text));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Stream\u003cString\u003e stream"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u003d reader.lines();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            taskList \u003d new ArrayList(stream.filter(line -\u003e !line.equals(\"\"))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    .map(line -\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                            return read(line);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                            throw new RuntimeException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    }).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Unforeseen load errors: \" + e.getMessage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction method of TaskList."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return ArrayList of Task"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ArrayList\u003cTask\u003e getSchedule() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Return number of completed tasks stored in txt file"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public int getCompletedNum(){"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return completedNum;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 165
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Used to parse String user input/ text file to get corresponding Command object to execute."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Process user input/ line from txt file and gets appropriate command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param instruction String from user input/ text file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return Corresponding Task to be executed in run method of Duke class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException When there are no matching command. i.e user input or line from txt file is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static Command parse(String instruction) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String[] wordArr \u003d instruction.split(\" \", 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        FullCommand command \u003d FullCommand.getByName(wordArr[0]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new EditCommand(Integer.parseInt(wordArr[1]) - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(wordArr[1]) - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new FindCommand(wordArr[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case RECUR:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new RecurCommand(wordArr[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case REVERT:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new RevertCommand(Integer.parseInt(wordArr[1]) - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case CLEAR:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                if (wordArr[1].equals(\"\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    throw new DukeException(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new AddCommand(command, wordArr[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IndexOutOfBoundsException | DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Give instructions in the format: (instruction type) (details)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (command.equals(FullCommand.RECUR)){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Give instructions in the format: Recur (index) (unit_time) (quantity)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"\u0027done\u0027 and \u0027delete\u0027 must be followed by an integer index.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 54
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Deadline task object. Has an task name, date and time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Deadline extends Recurrence {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    DateTime dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Deadline object. Called when generating TaskList based on user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param description includes task name, date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown when description format is incorrect. or when setDeadline throws DukeException."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Deadline(String description) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int divider \u003d description.indexOf(\"/by\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (divider \u003d\u003d -1 || (divider \u003d\u003d description.length() - 3)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || description.substring(divider + 4).replace(\" \", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Deadline format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Deadline (taskname) /by date(d/MM/yyyy) time(HHmm)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dateTime \u003d DateTime.setDeadline(description.substring(divider + 4, description.length()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.description \u003d super.description.substring(0, divider);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor used for generating next recurrence of Deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param taskName name of event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime next session timing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Deadline(String taskName, DateTime dateTime){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Generates uncompleted clone of task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return new task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task getRecurrence() throws DukeException{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(super.isRecurring);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime newDateTime \u003d this.dateTime.setNewDate(super.unitTime, super.quantity);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Deadline newTask \u003d new Deadline(super.description, newDateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        newTask.isDone \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * toString method of DeadLine."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return String denoting task name, status date and time of Deadline task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"[D][\" + super.getStatusIcon() + \"]\" + \" \" + super.description"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"(by: \" + dateTime.toString() + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (super.isRecurring) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            output +\u003d \" every: \" + super.quantity + \" \" + super.unitTime + \"(s)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 65
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Event task object. Has an task name, date, starting time and ending time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Event extends Recurrence {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    DateTime dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Event object. Called when generating TaskList based on user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param description contains task name, date, starting time and ending time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown when description format is incorrect. or when setEventTime throws DukeException."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Event(String description) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int divider \u003d description.indexOf(\"/at\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (divider \u003d\u003d -1 || (divider \u003d\u003d description.length() - 3)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || description.substring(divider + 4).replace(\" \", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Event format\" + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Event (taskname) /by date(d/MM/yyyy) start_time(HHmm)-end_time(HHmm)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dateTime \u003d DateTime.setEventTime(description.substring(divider + 4, description.length()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.description \u003d super.description.substring(0, divider);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor used for generating next recurrence of Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param taskName name of event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime next session timing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Event(String taskName, DateTime dateTime){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Generates uncompleted clone of task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return new task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task getRecurrence() throws DukeException{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert(super.isRecurring);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime newDateTime \u003d this.dateTime.setNewDate(super.unitTime, super.quantity);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Event newTask \u003d new Event(super.description, newDateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        newTask.isDone \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * toString method of Event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return String denoting task name, status, date, and starting and ending time of task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"[E][\" + super.getStatusIcon() + \"]\" + \" \" + super.description + \"(at: \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + dateTime.toString() + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (super.isRecurring) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            output +\u003d \" every: \" + super.quantity + \" \" + super.unitTime + \"(s)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 65
    }
  },
  {
    "path": "src/main/java/task/Recurrence.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public abstract class Recurrence extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isRecurring;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String unitTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor method of Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param description contains information of Task. Includes task name and may include date and time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Recurrence(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public abstract Task getRecurrence() throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Set task as recurring"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param unitTime Recurrence cycle measured in unitTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param quantity Amount of unit time per cycle."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setAsRecurring(String unitTime, int quantity){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        isRecurring \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.unitTime \u003d unitTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reverts task to non recurring."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void revert(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        isRecurring \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.unitTime \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.quantity \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 40
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Abstract class which all other Task classes extend. (Event etc...)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected boolean deleted;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *Constructor method of Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param description contains information of Task. Includes task name and may include date and time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.deleted \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute method of findCommand is called."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Checks to see if description of task contains keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param keyword word/phrase to find in description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return boolean value indicating if word/phrase can be found in description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean findWord(String keyword) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (description.indexOf(keyword) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called in toString method. Indicates status of completion of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return tick if task is completed, and cross otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return (isDone ? \"+\" : \"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * sets isDone value to true."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Generates uncompleted clone of task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 67
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Object containing data structure to store Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public int taskNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public int completedNum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isFirst;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Task List."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when generating Task List from txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage contains ArrayList of Task specified from txt file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.schedule \u003d storage.getSchedule();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            taskNum \u003d schedule.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            completedNum \u003d storage.getCompletedNum();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (taskNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                isFirst \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                isFirst \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Task List."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        taskNum \u003d schedule.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (taskNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Task List."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param schedule ArrayList of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e schedule) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        taskNum \u003d schedule.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (taskNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Gets Task corresponding to specified index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index indicates which task in the task list to return."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return Task as specified by index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return schedule.get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Marks a Task in task list as done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index Specifies which task to mark as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return completed Task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws NullPointerException thrown if schedule.get(index) attempts to reference an object with a null value."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws IndexOutOfBoundsException thrown when index is greater than number of Task(s) in schedule."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws NumberFormatException thrown if index is not of type int."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task complete(int index)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throws NullPointerException, IndexOutOfBoundsException, NumberFormatException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task completedTask \u003d schedule.get(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        completedTask.markAsDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        completedNum +\u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return completedTask;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Adds new Task to TaskList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param task Task to add."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        schedule.add(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        taskNum++;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Deletes Task from TaskList."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index Specifies which task to delete."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return deleted Task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws NullPointerException thrown if schedule.get(index) attempts to reference an object with a null value."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws IndexOutOfBoundsException thrown when index is greater than number of Task(s) in schedule."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws NumberFormatException thrown if index is not of type int."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task remove(int index)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throws NullPointerException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task removedTask \u003d schedule.get(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        schedule.remove(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        taskNum--;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (removedTask.getStatusIcon().equals(\"+\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            completedNum --;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return removedTask;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Resets the entire list and start fresh."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void reset(){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        taskNum \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        completedNum \u003d 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to get ArrayList schedule from TaskList."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute method of FindCommand is called."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return ArrayList"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * toString method of TaskList."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return contents of TaskList. i.e. tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (taskNum !\u003d 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            for (int index \u003d 0; index \u003c taskNum; index++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                Task task \u003d schedule.get(index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                output +\u003d (\"     \" + (index + 1) + \".\" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output.substring(0, output.length() - 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Converts data in taskList to the appropriate String format to be stored in text file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return String text."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toText(){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (taskNum !\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            for (int index \u003d 0; index \u003c taskNum; index++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                Task task \u003d getTask(index);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                output +\u003d (task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output.substring(0, output.length() - 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 169
    }
  },
  {
    "path": "src/main/java/task/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Used for testing purposes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class TaskStub extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskStub(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.isDone \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 23
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Extends Task. Has a task name."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Todo(String description) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"[T][\" + super.getStatusIcon() + \"]\" + \" \" + super.description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 19
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Recurrence;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Determines what is displayed to user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute method of ExitCommand is called."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"    See you around...\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used for printing border."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"    \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (int n \u003d 0; n \u003c 40; n++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            output +\u003d \"_\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when a task is entered by user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute of AddTask is called."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param newTask task entered."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param taskNum  number of tasks in Task List."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readTask(Task newTask, int taskNum) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"       \" + newTask.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     \" + taskNum + \" tasks to go.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Displays delete message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute of DeleteCommand is called."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param removedTask Task being removed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param taskNum      Number of Task(s) left in the Task List."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDelete(Task removedTask, int taskNum) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Ok. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     \" + removedTask.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (removedTask.getStatusIcon().equals(\"-\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(\"     You didn\u0027t complete the task\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(\"     before deleting it...\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     \" + taskNum + \" tasks left.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Displays message when a user finishes a task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Calls when execute of EditCommand is called."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param completedTask Task which has been marked as done."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDone(Task completedTask) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Nice!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     \" + completedTask.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Displays contents of Task List."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute of ListCommand is called."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks TaskList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readList(TaskList tasks) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (tasks.taskNum - tasks.completedNum \u003e 5) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(\"Woah that\u0027s hella lot of stuff to do. You sure you\u0027re alright?\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(\"Nice and Light.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"Here are the task(s) in your list: \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readClear(int incompleteNum){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (incompleteNum \u003c 5) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(\"     Got it. Starting fresh.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(\"     Yeah just sweep it under the rug.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(\"     That\u0027s going to help.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Displays matching Tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute method of FindCommand is called."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks TaskList of tasks with keyword."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showMatches(TaskList tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"Here are the matching task(s) in your list: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(tasks);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showRecurMessage(Recurrence task){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Got it.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Setting this event to recurring:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     \" + task);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showRevertMessage(Task task){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Got it.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Setting this event to non-recurring:\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     \" + task);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Message shown when recurring event is updated to next session."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showUpdateMessage(Task task){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"I\u0027ve updated your schedule with the timing for next session.\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + System.lineSeparator() + task);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Display message when DukeException is caught."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param errorMsg DukeException e.getMessage()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String showError(String errorMsg) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String message \u003d \"      OOPS!!! \" + errorMsg;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when Duke Exception is thrown when instantiating Task List and/ or Storage Objects."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called by run method in Duke class."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"      OOPS!!! Loading Error\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 155
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cBorderPane prefHeight\u003d\"105.0\" prefWidth\u003d\"105.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003ccenter\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"199.0\" fitWidth\u003d\"176.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "               \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "               \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/center\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 34
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\t\t\u003cURL value\u003d\"@application.css\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cFont name\u003d\"System Italic\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#239281\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cFont name\u003d\"System Bold Italic\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 29
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 10
    }
  },
  {
    "path": "src/test/java/Ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readTaskTest(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task test \u003d new TaskStub(\"Task Message\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Ui().readTask(test, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String expectedMessage \u003d \"     Got it. I\u0027ve added this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + \"       Task Message\" + System.lineSeparator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + \"     Now you have 1 tasks in the list.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + System.lineSeparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(expectedMessage, outContent.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDeleteTest(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task test \u003d new TaskStub(\"Task Message\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Ui().readDelete(test, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String expectedMessage \u003d \"     Noted. I\u0027ve removed this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"       Task Message\" + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"     Now you have 0 tasks in the list.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(expectedMessage, outContent.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDone(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task test \u003d new TaskStub(\"Completed Task Message\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Ui().readDone(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String expectedMessage \u003d \"     Nice! I\u0027ve marked this task as done:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"       Completed Task Message\" + System.lineSeparator()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(expectedMessage, outContent.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 50
    }
  },
  {
    "path": "src/test/java/datetime/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setDeadLine_incorrectFormat_exceptionThrown(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime.setDeadline(\"30.11.2019 05:00\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Incorrect Deadline date/time format.\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \"    Please key in date(d/M/yyyy) time(HHmm)\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDeadLineTest(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime deadline \u003d DateTime.readDeadLine(\"30/11/2019 0500\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(\"30/11/2019 0500\", deadline.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEventTime_noEndTime_exceptionThrown(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime.setEventTime(\"30/11/2019 0500-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Need to have end time.\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEventTime_incorrectFormat_exceptionThrown(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime.setEventTime(\"30.11.2019 05:00-05:30\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Incorrect Event date/time format.\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \"    Please key in date(d/M/yyyy) start_time(HHmm)-end_time(HHmm)\", e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readEventTimeTest(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime eventTime \u003d DateTime.readEventTime(\"30/11/2019 0500-0600\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"30/11/2019 0500-0600\", eventTime.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readEventTime_noEndTime_exceptionThrown(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime eventTime \u003d DateTime.readEventTime(\"30/11/2019 0500-\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Need to have end time.\", e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 63
    }
  },
  {
    "path": "src/test/java/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void constructor_noDate_exceptionThrown(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"Generate Exception /by    \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String expectedOutput \u003d \"Incorrect Deadline format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Deadline (taskname) /by date(d/MM/yyyy) time(HHmm)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(expectedOutput, e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 20
    }
  },
  {
    "path": "src/test/java/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void constructor_noDate_exceptionThrown(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Event event \u003d new Event(\"Generate Exception\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String expectedOutput \u003d \"Incorrect Event format\" + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Event (taskname) /by date(d/MM/yyyy) start_time(HHmm)-end_time(HHmm)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(expectedOutput, e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 5
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 21
    }
  }
]
