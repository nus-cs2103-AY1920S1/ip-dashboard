[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 32,
      "-": 15
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "E|1|read book|13/2/1997 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "D|1|return book|15/3/1997 0800"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 3
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of adding a Task object into a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object to be added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the adding of the Task object into a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The add task message is returned."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String add task message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        tasks.addTask(this.task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assert tasks.taskListSize() \u003e 0: \"List of Tasks should be at least 1 after adding new task\"; // // Precondition for showAddTaskMessage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showAddTaskMessage(this.task, tasks.taskListSize());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 32
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Abstract class to represent a command to be executed when an input is entered into a Duke object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws Exception;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return false by default, only overridden in ExitCommand to return true."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 17
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents a deadline, which is a type of task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * An deadline has a description and is due by a specific date/time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected Date byDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String hour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String minute;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a deadline object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the String argument for the deadline date/time into a date object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * If the deadline date/time argument is not in the required format, an exception is thrown."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the deadline created."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param by The String of the deadline time/date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException if \"by\" contains invalid information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Deadline(String description, String by) throws InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] dateTime \u003d by.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] date \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy hh:mm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.day \u003d date[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.month \u003d date[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.year \u003d date[2];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.hour \u003d dateTime[1].substring(0, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.minute \u003d dateTime[1].substring(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.byDate \u003d format.parse(day + \"/\" + month + \"/\" + year + \" \" + hour + \":\" + minute);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidTaskArgumentDukeException(\"OOPS!!! The format of deadline timing is invalid.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the deadline\u0027s date object into the required format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The String of the deadline\u0027s date/time in the required format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String dateToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (this.day.equals(\"1\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027st of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"2\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027nd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"3\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027rd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027th of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return format.format(this.byDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateToString() + \")\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 78
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of deleting a Task object from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber Index of the Task object to be deleted."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the deletion of the Task object from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given index of task to be deleted is first checked to be valid or not."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * After deletion, the delete task message is returned."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object that contains task to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display delete task message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String delete task message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when an invalid task number index is given so no Task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     object can be retrieved from the TaskList object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.taskListSize()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task removedTask \u003d tasks.getTask(taskNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return ui.showDeleteTaskMessage(removedTask, tasks.taskListSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!!! There is no task labelled that number!!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 39
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DialogBox(Label l, ImageView iv, String color) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // set text box radius and color"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        l.setStyle(\"-fx-background-color:\" + color + \"; -fx-background-radius: 20\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        l.setPadding(new Insets(15, 15, 15, 15));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // Set background color of dialogbox"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.setStyle(\"-fx-background-color:PEACHPUFF\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Rectangle clip \u003d new Rectangle("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                displayPicture.getFitWidth(), displayPicture.getFitHeight()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        clip.setArcWidth(100);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        clip.setArcHeight(100);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // snapshot the rounded image."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SnapshotParameters parameters \u003d new SnapshotParameters();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        parameters.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        WritableImage image \u003d displayPicture.snapshot(parameters, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // remove the rounding clip so that our effect can show through."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setClip(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // store the rounded image in the imageView."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new DialogBox(l, iv, \"CORAL\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        var db \u003d new DialogBox(l, iv, \"ORANGE\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 76
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of marking a Task object as done from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber Index of the Task object to be marked as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the marking of the Task object from a Duke object\u0027s TaskList object as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given index of task to be marked as done is first checked to be valid or not."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * After being marked, the marked task as done message is returned."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object that contains task to be marked as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display task marked as done  message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String marked task as done message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when an invalid task number index is given so no Task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     object can be retrieved from the TaskList object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.taskListSize()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            tasks.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return ui.showMarkTaskAsDoneMessage(tasks.getTask(taskNumber));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There is no task labelled that number!!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 38
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * A program that manages and keeps track of a list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Features include adding and deleting tasks, as well as displaying list of current tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Tasks can be marked as done once the user has completed it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private AnchorPane mainLayout;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final int STAGE_HEIGHT \u003d 800;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private final int STAGE_WIDTH \u003d 600;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/drakeNO.jpg\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/drakeYES.jpg\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a Duke Object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            storage.getTasksFromFile(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            ui.showExceptionError(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Processes a String input and returns the required String message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param input String command from the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The response from Duke to the given input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assert c !\u003d null: \"Command should not be null\"; //Precondition for execute method"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return ui.showExceptionError(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        setUpStageComponents(stage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        formatComponents(stage, \"Duke\", STAGE_WIDTH, STAGE_HEIGHT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayLogo();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            handleUserInput(stage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            handleUserInput(stage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Initialises the different components of the Duke GUI."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stage Stage of the GUI."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void setUpStageComponents(Stage stage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Formats the components in the Duke GUI to specified heights and widths."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stage Stage of the GUI."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param title Title of the window Duke runs on."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stageWidth Width of the stage."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stageHeight Height of the stage."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void formatComponents(Stage stage, String title, int stageWidth, int stageHeight) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final int SCROLLPANE_WIDTH \u003d STAGE_WIDTH - 15;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final int SCROLLPANE_HEIGHT \u003d STAGE_HEIGHT - 65;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final int USERINPUT_WIDTH \u003d STAGE_WIDTH - 75;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final int SENDBUTTON_WIDTH \u003d 55;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setTitle(title);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setMinHeight(stageHeight);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setMinWidth(stageWidth);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        mainLayout.setPrefSize(stageWidth, stageHeight);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setPrefSize(SCROLLPANE_WIDTH, SCROLLPANE_HEIGHT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        userInput.setPrefWidth(USERINPUT_WIDTH);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        sendButton.setPrefWidth(SENDBUTTON_WIDTH);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * the dialog container. Clears the user input after processing. If the user input is the exit command  \"bye\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * closes the application after 2 seconds."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stage Javafx stage to be closed if input is \"bye\"."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void handleUserInput(Stage stage) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (userInput.getText().equals(\"bye\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            delay.setOnFinished( event -\u003e stage.close() );"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void displayLogo() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String logo2 \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \"DDD    U     U   K     K    EEEEEE \\n\" +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \"D    D   U     U    K  K     E    \\n\" +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \"D     D  U     U    K K      EEEE  \\n\" +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \"D    D   U     U    K  K     E    \\n\" +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \"DDD    UUUU  K      K   EEEEEE \\n\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Label greetingText \u003d new Label(\"Hello from\\n\" + logo2);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(greetingText, new ImageView(duke)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Passes the String input from the GUI to the Duke\u0027s run method to process it."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the response from Duke."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param input String input from the GUI"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String response from Duke to be displayed back to the user."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Main Method of Duke object."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param args argument of main method."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 216,
      "-": 9
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when any error occurs while a Duke object is running."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an event, which is a type of task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * An event has a description and starts at a specific date/time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected Date atDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String hour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String minute;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an event object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the String argument for the event date/time into a date object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * If the event date/time argument is not in the required format, an exception is thrown."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the event created."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param at The String of the event time/date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException if \"at\" contains invalid information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Event(String description, String at) throws InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy hh:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] dateTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] date \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.day \u003d date[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.month \u003d date[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.year \u003d date[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.hour \u003d dateTime[1].substring(0, 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.minute \u003d dateTime[1].substring(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.atDate \u003d format.parse(day + \"/\" + month + \"/\" + year + \" \" + hour + \":\" + minute);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidTaskArgumentDukeException(\"OOPS!!! The format of event timing is invalid.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the event\u0027s date object into the required format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The String of the event\u0027s date/time in the required format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String dateToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (this.day.equals(\"1\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027st of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"2\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027nd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"3\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027rd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027th of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return format.format(this.atDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateToString() + \")\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 76
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of exiting a Duke object run."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Contains the method calls to execute this command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the exit from a Duke object\u0027s run process."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Task objects are saved into the Duke object\u0027s filepath and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * the exit message is returned."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object of the Duke object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display the tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String exit message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        storage.loadTasksToFile(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showByeMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return To stop the Duke object from running, returns true."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 33
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of finding tasks with a specified keyword in a Duke object\u0027s tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String keyWord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a FindCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param keyWord Keyword to search for in the list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the search and retrieval of all the Task objects in a Duke object\u0027s TaskList object that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * contains the keyword. The tasks as retrieved as a new TaskList object which is then listed to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to search in."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display any results from the search."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list of tasks found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        TaskList tasksWithKeyword \u003d tasks.findTasks(this.keyWord);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assert tasksWithKeyword !\u003d null: \"List of tasks returned from search should never be null\"; // Postcondition for findTasks method."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showFindTasksMessage(tasksWithKeyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 31
    }
  },
  {
    "path": "src/main/java/InvalidCommandDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when an invalid command is entered"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * into a Duke object."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class InvalidCommandDukeException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public InvalidCommandDukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 9
    }
  },
  {
    "path": "src/main/java/InvalidTaskArgumentDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when a task object is created with invalid arguments."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class InvalidTaskArgumentDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public InvalidTaskArgumentDukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 8
    }
  },
  {
    "path": "src/main/java/InvalidTaskDescriptionDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when a task object is created with an invalid description argument."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class InvalidTaskDescriptionDukeException extends InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public InvalidTaskDescriptionDukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 9
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 7
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of listing all Task objects from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the displaying of all Task objects from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object with tasks to be displayed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display the tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param storage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list of all tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showListMessage(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 18
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Makes sense of user input into a Duke Object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Parses the input command and then returns the corresponding command object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * If the input is invalid, a Duke exception is thrown."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param fullCommand String input into a Duke object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Command object based on the input parsed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws DukeException thrown when input entered is invalid and does not correspond to any command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String trimmedCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (trimmedCommand.equals(\"\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] splitCommand \u003d trimmedCommand.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        switch (splitCommand[0]) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(splitCommand[1]) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                assert taskNumber \u003e\u003d 0: \"Task number entered can only be non-negative\"; // Precondition for DoneCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! Please enter a task number!!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(splitCommand[1]) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                assert taskNumber \u003e\u003d 0: \"Task number entered can only be non-negative\"; // Precondition for DeleteCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! Please enter a task number!!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String keyWord \u003d joinStringArrayFromIndex(splitCommand, 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String trimmedKeyWord \u003d keyWord.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (trimmedKeyWord.equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new FindCommand(trimmedKeyWord);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String todoDescription \u003d joinStringArrayFromIndex(splitCommand, 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String trimmedTodoDescription \u003d todoDescription.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (trimmedTodoDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidTaskDescriptionDukeException(\"OOF!!! \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"The description of a todo cannot be empty!!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new AddCommand(new ToDo(trimmedTodoDescription));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] deadlineDescriptionDate \u003d extractDescriptionDate(splitCommand, \"/by\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String deadlineDescription \u003d deadlineDescriptionDate[0].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String deadlineDate \u003d deadlineDescriptionDate[1].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (!deadlineDescription.equals(\"\") \u0026\u0026 !deadlineDate.equals(\"\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new AddCommand(new Deadline(deadlineDescription, deadlineDate));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidTaskDescriptionDukeException(\"OOF!!! \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"The description/timing of a deadline cannot be empty!!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] eventDescriptionDate \u003d extractDescriptionDate(splitCommand, \"/at\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String eventDescription \u003d eventDescriptionDate[0].trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String eventDate \u003d eventDescriptionDate[1].trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (!eventDescription.equals(\"\") \u0026\u0026 !eventDate.equals(\"\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new AddCommand(new Event(eventDescription, eventDate));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidTaskDescriptionDukeException(\"OOF!!! \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"The description/timing of an event cannot be empty!!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Concatenates the elements in a string array, starting from the given index."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param arr String array to join elements from."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param startIndex index of the array to start joining elements."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String made of the concatenated elements in the given array."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static String joinStringArrayFromIndex(String[] arr, int startIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d startIndex; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            output +\u003d arr[i];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (i !\u003d arr.length - 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                output +\u003d \" \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Separates the elements in a String array that is divided by the given regex."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Concatenates each element into two strings - description and date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param arr String array with elements to divide and concatenate."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param regex The element in the array that divides the two outputs."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String array of size 2 that contains the description and date in each index."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static String[] extractDescriptionDate(String[] arr, String regex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] descriptionDate \u003d new String[2]; // description stored in index 0, date stored in index 1."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        boolean isRecordingDescription \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (!arr[i].equals(regex) \u0026\u0026 isRecordingDescription) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                description +\u003d arr[i];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (i + 1 \u003c arr.length \u0026\u0026 !arr[i + 1].equals(regex)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    description +\u003d \" \";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else if (arr[i].equals(regex) \u0026\u0026 isRecordingDescription) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                isRecordingDescription \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else if (!arr[i].equals(regex) \u0026\u0026 !isRecordingDescription) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                date +\u003d arr[i];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (i !\u003d arr.length - 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    date +\u003d \" \";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        descriptionDate[0] \u003d description;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        descriptionDate[1] \u003d date;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return descriptionDate;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 142
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Deals with loading/saving tasks from/to a file in the hard drive."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a Storage object with the file\u0027s file path as the argument."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param filePath String of file\u0027s filepath."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Accesses the file and extracts tasks from it, saving the tasks into a TaskList object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskList Tasks extracted from file will be added to this TaskList object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws FileNotFoundException Thrown when the file specified by the filepath does not exist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException Thrown when the file contains invalid information"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     to create task objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getTasksFromFile(TaskList taskList) throws FileNotFoundException, InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        File taskFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Scanner scanner \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String textLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            taskList.addTask(stringToTask(textLine));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Saves the tasks in the TaskList object into the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskList TaskList object with tasks to be saved."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws IOException thrown if an error occurs when writing into the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void loadTasksToFile(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.taskListSize(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                fileWriter.write(taskToString(taskList.getTask(i)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (i !\u003d taskList.taskListSize() - 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    fileWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts a String in the valid format into a task object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Used in getTasksFromFile method to extract task objects from a file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param text String input in required format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Task object created from processing the input text."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException Thrown when the String text is in an invalid format so"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     the argument entered when creating a task object is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Task stringToTask(String text) throws InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] textSplit \u003d text.split(\"\\\\|\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Task resultTask;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (textSplit[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask \u003d new ToDo(textSplit[2]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (textSplit[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask \u003d new Deadline(textSplit[2], textSplit[3]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask \u003d new Event(textSplit[2], textSplit[3]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (textSplit[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask.markAsDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return resultTask;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts a task object into its String representation to be saved into a file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Used in loadTasksToFile method to save tasks objects into a file as Strings."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object to be represented as a String."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String representation of the argument Task object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String taskToString(Task task) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String taskType \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String isDone \u003d \"0\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            isDone \u003d \"1\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            taskType \u003d \"T\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return taskType + \"|\" + isDone + \"|\" + description;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else { // event or deadline"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                taskType \u003d \"E\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                time \u003d ((Event) task).getAt();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                taskType \u003d \"D\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                time \u003d ((Deadline) task).getBy();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return taskType + \"|\" + isDone + \"|\" + description + \"|\" + time;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 127
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents a task in a Duke object\u0027s task list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Each task has a description and marker to indicate if it is completed."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a task object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Each task is set as not done by default."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the task created."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the String unicode of the tick symbol if the task is marked done,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and returns the String unicode of the cross symbol if otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return the String unicode of either the tick or cross symbol."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Sets the task as completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the String format of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The String format of a task consists a tick or cross symbol to indicate if it is done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and its description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String format of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + this.description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 56
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the list of Tasks in a Duke object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a TaskList object that stores the list of tasks of a Duke object in an ArrayList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Task getTask(int taskNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this.tasks.get(taskNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks.remove(taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Marks the task at the given index in the ArrayList as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber index of the task in the ArrayList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void markAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks.get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public int taskListSize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Given a String keyword, searches all tasks which has a description containing the keyword."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Tasks that contains the keyword are added to a newly created TaskList object and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * this TaskList object is returned."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param keyWord keyword to search for in list of tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return TaskList object containing all tasks that contain the keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public TaskList findTasks(String keyWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        TaskList tasksWithKeyWord \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] descriptionSplit \u003d currentTask.getDescription().split(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            List\u003cString\u003e descriptionWords \u003d Arrays.asList(descriptionSplit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (descriptionWords.contains(keyWord)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                tasksWithKeyWord.addTask(currentTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return tasksWithKeyWord;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 74
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Represents a to-do, which is a type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the to-do created."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Takes in the user input into a Duke object and displays output to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String line \u003d \"    ____________________________________________________________\" + \"\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String welcomeMessage \u003d \"     Hello! I\u0027m Duke\\n     What can I do for you?\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String byeMessage \u003d \"     Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an Ui object to take input user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Reads the next input from the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return the String command input by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the welcome message when a Duke object is started."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String welcome message when Duke is started."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showWelcomeMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return line + welcomeMessage + line;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the list of tasks in the TaskList object argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object with tasks to be displayed to the user in a list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list of tasks in TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showListMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String list \u003d line + \"     Here are the tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.taskListSize(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list \u003d list + \"     \" + (i + 1) + \".\" + tasks.getTask(i) + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        list \u003d list + line;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the exception message of the argument exception to the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param e Exception whose message needs to be displayed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String exception message of the argument exception."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showExceptionError(Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return line + \"     \" + e.getMessage() + \"\\n\" + line;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns message when a task is added to the TaskList object arugment."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object to be added to TaskList object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskListSize Number of Task objects in TaskList object after the Task object is added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String message when a task is added to the TaskList."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showAddTaskMessage(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String output \u003d line + \"     Got it. I\u0027ve added this task: \\n\" + \"       \" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"     Now you have \" + taskListSize + \" task(s) in the list.\\n\" + line;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns message when a Task object is marked as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object that is marked as done."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String message when a Task object is marked as done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showMarkTaskAsDoneMessage(Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return line + \"     Nice! I\u0027ve marked this task as done:\\n       \" + task.toString() + \"\\n\" + line;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns String message when a Task object is deleted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskListSize Number of Task objects in TaskList object after the Task object is deleted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String message when a Task object is deleted."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showDeleteTaskMessage(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return line + \"     Noted. I\u0027ve removed this task:\\n       \" + task.toString()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\\n     Now you have \" + taskListSize + \" task(s) in the list.\\n\" + line;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns exit message when a Duke object stops running."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String exit message when a Duke object stops running."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showByeMessage() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return line + byeMessage + line;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the list of tasks in the TaskList object argument."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The tasks in the TaskList object argument contains the keyword entered by the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object with tasks to be displayed to the user in a list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list of tasks in the TaskList object argument."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showFindTasksMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String list \u003d line + \"     Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.taskListSize(); i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list \u003d list + \"     \" + (i + 1) + \".\" + tasks.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        list \u003d list + line;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 122
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void testStringConversion() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"[D][\\u2718] test deadline (by: 1st of January 2019, 06:00PM)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                (new Deadline(\"test deadline\",\"1/1/2019 1800\")).toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_validDates_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"1st of January 2019, 06:00PM\", (new Deadline(\"test event 1\",\"1/1/2019 1800\")).dateToString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"13th of February 2019, 09:00AM\", (new Deadline(\"test event 2\",\"13/2/2019 0900\")).dateToString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"3rd of August 2019, 05:30PM\", (new Deadline(\"test event 3\",\"3/8/2019 1730\")).dateToString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_inValidDates_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(0, (new Deadline(\"test event 4\",\"monday\")).dateToString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The format of deadline timing is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 29
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void testStringConversion() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"[E][\\u2718] test event (at: 1st of January 2019, 06:00PM)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                (new Event(\"test event\",\"1/1/2019 1800\")).toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_validDates_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"1st of January 2019, 06:00PM\", (new Event(\"test event 1\",\"1/1/2019 1800\")).dateToString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"13th of February 2019, 09:00AM\", (new Event(\"test event 2\",\"13/2/2019 0900\")).dateToString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"3rd of August 2019, 05:30PM\", (new Event(\"test event 3\",\"3/8/2019 1730\")).dateToString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_inValidDates_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(0, (new Event(\"test event 4\",\"monday\")).dateToString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The format of event timing is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 30
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test todo\", (new ToDo(\"test todo\")).toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 14
    }
  }
]
