[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    version \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.4.2\u0027)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "run {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 26,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "This interactive application helps you manage your tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### Feature 1: Adding Todo tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You can add **todo** tasks to your list. These tasks do not have time constraints (e.g. deadlines)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### Feature 2: Adding tasks with a deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You can add tasks with **deadlines** to your list. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### Feature 3: Adding scheduled events"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You can add a scheduled event that has a starting date/time "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "and/or ending date/time to your list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### Feature 4: Listing all tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You can see all the tasks that are currently in your list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### Feature 5: Marking as done"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You can mark a task you have completed as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### Feature 6: Deleting from the list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You can delete a task from your list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### Feature 7: Finding tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You can find all the tasks that contains a keyword you are interested in."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### Feature 8: Tagging tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You can tag your tasks with a descriptor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### Feature 9: Finding tags"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You can find all the tasks that have been tagged with a particular descriptor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### `todo` - Adds a *Todo* to the list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a **todo** task to the list. Descriptors can also be added to tag this task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`todo [TASK_DESCRIPTION] [(optional)#DESCRIPTOR]`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`todo read book #important`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Got it, I\u0027ve added this task:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   [T][NOT DONE] read book #important"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### `deadline` - Adds a task with a *deadline* to the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a **deadline** task to the list. Either a due date or due time should be specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "However, a time should not be specified without a date. Descriptors can also be added to tag this task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The date should be in the format DD/MM/YYYY. The time should be in the 24 hour notation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`deadline [TASK_DESCRIPTION] /by [DUE_DATE] [(optional)DUE_TIME] [(optional)#DESCRIPTOR]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`deadline project /by 12/09/2019 2359 #important`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    [D][NOT DONE] project #important (by: 12th SEPTEMBER 2019, 11.59pm)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Now you have 2 tasks in your list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### `event` - Adds a scheduled *event* to the list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds an **event** task to the list. A starting date/time should be specified. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "An ending date and time is optional. However, a time should not be specified without a date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Descriptors can also be added to tag this task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The date should be in the format DD/MM/YYYY. The time should be in the 24 hour notation."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`event [TASK_DESCRIPTION] /at [START_DATE] [(optional)START_TIME] /to "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "[(optional)END_DATE] [(optional)END_TIME] [(optional)#DESCRIPTOR]`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`event meeting /at 12/09/2019 1600 /to 12/09/2019 1700 #important`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    [E][NOT DONE] meeting #important (at: 12th SEPTEMBER 2019, 4pm to 12th SEPTEMBER 2019, 5pm)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Now you have 3 tasks in your list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### `list` - Shows all tasks in the list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Shows all the tasks that are currently in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "1. [T][NOT DONE] read book #important"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "2. [D][NOT DONE] project #important (by: 12th SEPTEMBER 2019, 11.59pm)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "3. [E][NOT DONE] meeting #important (at: 12th SEPTEMBER 2019, 4pm to 12th SEPTEMBER 2019, 5pm)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### `done` - Marks task as done"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Marks a specified task as done."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`done [LIST_INDEX_OF_TASK]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    [D][DONE] project #important (by: 12th SEPTEMBER 2019, 11.59pm)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### `delete` - Deletes a task from the list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes a specified task from the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`delete [LIST_INDEX_OF_TASK]`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    [D][DONE] project #important (by: 12th SEPTEMBER 2019, 11.59pm)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### `find` - Finds tasks that matches the keyword"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Shows all the tasks that includes the matching keyword."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`find [KEYWORD]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "1. [T][NOT DONE] read book #important"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### `tag` - Tags a tasks with a descriptor"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Tags a specified task with a descriptor "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`tag [LIST_INDEX_OF_TASK] #[DESCRIPTOR]`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`tag 2 #cs2103`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Got it. I\u0027ve tagged this task:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    [E][NOT DONE] meeting #important #cs2103 (at: 12th SEPTEMBER 2019, 4pm to 12th SEPTEMBER 2019, 5pm)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "### `#` - Finds tasks with tag"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Shows all tasks that matches the tag."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`#[DESCRIPTOR]`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`#cs2103`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "These tasks are #cs2103!"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    [E][NOT DONE] meeting #important #cs2103 (at: 12th SEPTEMBER 2019, 4pm to 12th SEPTEMBER 2019, 5pm)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 190,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the User\u0027s \u003ccode\u003eDialogBox\u003c/code\u003e."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param text User\u0027s input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param img User\u0027s photo."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return \u003ccode\u003eDialogBox\u003c/code\u003e for user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Flips the position of Duke\u0027s response and returns Duke\u0027s \u003ccode\u003eDialogBox\u003c/code\u003e."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param text Duke\u0027s response."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param img Duke\u0027s photo."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return \u003ccode\u003eDialogBox\u003c/code\u003e for user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 73
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a personal assistant chatbot that keeps track of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An \u003ccode\u003eDuke\u003c/code\u003e object corresponds to a new chatbot with its own \u003ccode\u003eStorage\u003c/code\u003e and \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eDuke\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param filePath File path of file to store the information in the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Runs the chatbot."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ui.greetUser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ui.drawLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ui.printException(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ui.drawLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Generates the response by Duke in response to the user\u0027s input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param input Input by user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getResponse(String input) throws UnsupportedEncodingException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ByteArrayOutputStream message \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PrintStream ps \u003d new PrintStream(message, true, \"UTF-8\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final PrintStream old \u003d System.out;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        generateResponse(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.setOut(old);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void generateResponse(String input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.drawLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printException(e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.drawLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Generates Duke\u0027s starting greeting."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Duke\u0027s greeting."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String generateWelcomeMessage() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ByteArrayOutputStream message \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PrintStream ps \u003d new PrintStream(message);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final PrintStream old \u003d System.out;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ui.greetUser();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.setOut(old);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        new Duke(\"C:\\\\Users\\\\Yi Yin\\\\Documents\\\\Year 2\\\\Semester 1\\\\CS2103\\\\duke\\\\data\\\\duke.txt\").run();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 106,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Duke duke \u003d new Duke(\"C:\\\\Users\\\\Yi Yin\\\\Documents\\\\Year 2\\\\Semester 1\\\\CS2103\\\\duke\\\\data\\\\duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            stage.setTitle(\"ACRE\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 35
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Pooh2.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Pooh.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        dialogContainer.getChildren().add(new Group(DialogBox.getDukeDialog(duke.generateWelcomeMessage(), dukeImage)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void handleUserInput() throws UnsupportedEncodingException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Group(DialogBox.getUserDialog(input, userImage)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Group(DialogBox.getDukeDialog(response, dukeImage))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 57
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.FindTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.TagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a parser to make sense of inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Processes the user input and creates the corresponding commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param fullCommand Command input by user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Corresponding command that is input by user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws DukeException If a new command cannot be created due to invalid input parameters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String userInput \u003d fullCommand.replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return exit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return list();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (userInput.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return todo(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (userInput.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return deadline(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (userInput.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return event(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (userInput.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return done(userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (userInput.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return delete(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (userInput.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return find(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (userInput.startsWith(\"tag\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return tag(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (userInput.startsWith(\"#\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return findTag(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command findTag(String userInput) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String details \u003d userInput.replaceFirst(\"#\", \"\").trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new FindTagCommand(details);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command tag(String userInput) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String details \u003d userInput.replaceFirst(\"tag\", \"\").trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (details.charAt(0) \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new MissingDescriptionException(\"tag\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int index \u003d Integer.parseInt(\"\" + details.charAt(0)) - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String hashTags \u003d details.substring(1).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] tags \u003d hashTags.split(\"#\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new TagCommand(index, tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command find(String userInput) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String details \u003d userInput.replaceFirst(\"find\", \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new FindCommand(details.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command delete(String userInput) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] deleteDetails \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean descriptionIsEmpty \u003d deleteDetails.length \u003c 2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (descriptionIsEmpty) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new MissingDescriptionException(\"delete\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String listActionIndex \u003d deleteDetails[1].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int arrayActionIndex \u003d Integer.parseInt(listActionIndex) - 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new DeleteCommand(arrayActionIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command done(String userInput) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] doneDetails \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean descriptionIsEmpty \u003d doneDetails.length \u003c 2;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (descriptionIsEmpty) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new MissingDescriptionException(\"done\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String listActionIndex \u003d doneDetails[1].trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int arrayActionIndex \u003d Integer.parseInt(listActionIndex) - 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new DoneCommand(arrayActionIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command event(String userInput) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String details \u003d userInput.replaceFirst(\"event\", \"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new AddEventCommand(details.trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command deadline(String userInput) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String details \u003d userInput.replaceFirst(\"deadline\", \"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new AddDeadlineCommand(details.trim());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command todo(String userInput) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String details \u003d userInput.replaceFirst(\"todo\", \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new AddTodoCommand(details.trim());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command list() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static Command exit() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 121
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Time;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a storage in the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eStorage\u003c/code\u003e object corresponds to a specific file in the hard disk that stores the information"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * of the corresponding \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eStorage\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param filePath File path of the file stored in the hard disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Loads the task information from the hard disk."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return A list of \u003ccode\u003eTask\u003c/code\u003e objects that can be used to create a new \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws duke.exception.StorageException If the file in the hard disk cannot be found."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws StorageException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Scanner fileReader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                String taskInformation \u003d fileReader.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                String[] information \u003d taskInformation.split(\" \\\\| \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                String type \u003d getType(information);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                boolean isDone \u003d getDoneStatus(information);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                String description \u003d getDescription(information);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    loadDeadline(tasks, information, isDone, description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    loadTodo(tasks, information, isDone, description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    loadEvent(tasks, information, isDone, description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    throw new StorageException(\"OOPS!!! Something must have gone wrong during storage.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (FileNotFoundException | InvalidDateException | InvalidTimeException exception) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new StorageException(\"OOPS!!! Something must have gone wrong during storage.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private ArrayList\u003cString\u003e getTags(String tagsAsStrings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasNoTags \u003d tagsAsStrings.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasNoTags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] individualTags \u003d tagsAsStrings.split(\"#\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 1; i \u003c individualTags.length; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tags.add(individualTags[i].trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getType(String[] information) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return information[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private boolean getDoneStatus(String[] information) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Integer.parseInt(information[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getDescription(String[] information) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return information[2];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void loadEvent(ArrayList\u003cTask\u003e tasks, String[] information,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                           boolean isDone, String description) throws InvalidDateException, InvalidTimeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String startDate \u003d information[3];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String startTime \u003d information.length \u003e 4 ? information[4] : \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String endDate \u003d information.length \u003e 5 ? information[5] : \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String endTime \u003d information.length \u003e 6 ? information[6] : \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String tagsAsStrings \u003d information.length \u003e 7 ? information[7].trim() : \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d getTags(tagsAsStrings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Event event \u003d new Event(description, new Date(startDate), new Time(startTime), new Date(endDate),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Time(endTime));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        addTags(event, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            event.setDone();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void loadTodo(ArrayList\u003cTask\u003e tasks, String[] information, boolean isDone, String description) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            todo.setDone();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String tagsAsStrings \u003d information.length \u003e 3 ? information[3].trim() : \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d getTags(tagsAsStrings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        addTags(todo, tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void loadDeadline(ArrayList\u003cTask\u003e tasks, String[] information,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                              boolean isDone, String description)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throws InvalidDateException, InvalidTimeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String date \u003d information[3];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasTimeDetails \u003d information.length \u003d\u003d 5;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasTimeDetails) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            time \u003d information[4];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, new Date(date), new Time(time));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            deadline.setDone();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String tagsAsStrings \u003d information.length \u003e 5 ? information[5].trim() : \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d getTags(tagsAsStrings);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        addTags(deadline, tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void addTags(Task task, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            task.addTag(tags.get(i));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Writes the information of the \u003ccode\u003eTask\u003c/code\u003e objects in a \u003ccode\u003eTaskList\u003c/code\u003e to the file in the hard disk."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Tasks that have been updated through various commands."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws StorageException If information cannot be written to the file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void writeToHardDisk(TaskList tasks) throws StorageException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getListSize(); i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                String type \u003d task.getType();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                int isDone \u003d task.isDone() ? 1 : 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                String tags \u003d task.getTagsAsStrings();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                StringBuilder taskInformation \u003d new StringBuilder();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    writeDeadline((Deadline) task, type, isDone, description, taskInformation, tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    writeTodo(type, isDone, description, taskInformation, tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    writeEvent((Event) task, type, isDone, description, taskInformation, tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                fileWriter.write(taskInformation.toString() + \"\\n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new StorageException(\"OOPS!!! Something went wrong :\" + exception.getMessage());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void writeEvent(Event task, String type, int isDone, String description, StringBuilder taskInformation,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                            String tags) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Event event \u003d task;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String startDate \u003d event.getUnprocessedStartDate();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String startTime \u003d event.getUnprocessedStartTime();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String endDate \u003d event.getUnprocessedEndDate();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String endTime \u003d event.getUnprocessedEndTime();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        taskInformation.append(type + \" | \" + isDone + \" | \" + description + \" | \");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        taskInformation.append(startDate + \" | \" + startTime + \" | \" + endDate + \" | \" + endTime + \" | \" + tags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void writeTodo(String type, int isDone, String description, StringBuilder taskInformation, String tags) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        taskInformation.append(type + \" | \" + isDone + \" | \" + description + \" | \" + tags);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void writeDeadline(Deadline task, String type, int isDone,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                               String description, StringBuilder taskInformation, String tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Deadline deadline \u003d task;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String date \u003d deadline.getUnprocessedDate();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String time \u003d deadline.getUnprocessedTime();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        taskInformation.append(type + \" | \" + isDone + \" | \" + description + \" | \" + date + \" | \" + time + \" | \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + tags);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 200
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a new list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An \u003ccode\u003eTaskList\u003c/code\u003e object corresponds to a new list that stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * This constructor will be used if there are already tasks stored in the hard disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks List of tasks that were loaded from the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Second constructor for \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * This constructor will be used if there are no tasks stored in the hard disk."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the list of tasks that are stored in this object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return List of \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the number of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Size of the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Adds a new \u003ccode\u003eTask\u003c/code\u003e object to the list of tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param task Instance of \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Removes a \u003ccode\u003eTask\u003c/code\u003e object from the list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param index List index of the task to be removed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the \u003ccode\u003eTask\u003c/code\u003e object at that list index."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param index List index of the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Task that is stored at the input index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void addTag(int index, String tag) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        tasks.get(index).addTag(tag);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 74
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a user interface."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eUi\u003c/code\u003e object handles interaction between the user and the chatbot by reading and outputting messages."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected Scanner userInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints the Duke logo and greets the user for the first time the program is run."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void greetUser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \"      ___             _____       ______       _____\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + \"   /            \\\\       /   ____|     |    ___    \\\\    |    ___|\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + \"  /    /    \\\\    \\\\     |    |              |   |___|   /    |   |___ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + \" /    / __ \\\\    \\\\   |    |____     |    |      \\\\   \\\\    |   |___ \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + \"/ _ /         \\\\ _ \\\\  \\\\______|   | _ |        \\\\_ \\\\  |_____|\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        drawLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.out.println(\"\\tHello! I\u0027m Pooh\\n\\tWhat can I do for you?\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        drawLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints a line in the console."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void drawLine() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.out.println(\"---------------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints the bye message when the user exits the program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return userInput.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Closes the \u003ccode\u003eScanner\u003c/code\u003e object that reads user input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void closeScanner() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        userInput.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints the input message in the console."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints exception messages."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param exception Exceptions that occur after processing the user input command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void printException(DukeException exception) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String message \u003d exception.getMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints the message to inform user of a successful deletion."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param task Task that has been deleted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param numberOfTasks Number of tasks left in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void printDeleteMessage(Task task, int numberOfTasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"\\t \" + task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"Now you have \" + numberOfTasks + (numberOfTasks \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints the message to inform user that a task has been successfully marked as done."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param task Task that has been marked as done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void printDoneMessage(Task task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"\\t \" + task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints the message to inform user of a successful addition of a task to the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param task Task that has been added."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param numberOfTasks Number of tasks currently in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void printAddedMessage(Task task, int numberOfTasks) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"\\t \" + task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"Now you have \" + numberOfTasks + (numberOfTasks \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void printTagMessage(Task task, String[] tags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"Got it. I have tagged this task: \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"\\t \" + task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints the error when the information in storage could not be loaded."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        printMessage(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Prints the tasks matching the input tag."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tag Tag input by the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Tasks that match the tag."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void printTasksMatchingTag(String tag, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            printMessage(\"There are no tasks that are #\" + tag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            printMessage(\"These tasks are #\" + tag + \"!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                printMessage(\"\\t \" + task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 137
    }
  },
  {
    "path": "src/main/java/duke/calendar/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a date. A \u003ccode\u003eDate\u003c/code\u003e object corresponds to a date on a Gregorian calendar with a day,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * month and year."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String unprocessedDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected int day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected Month month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected int year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eDate\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param unprocessedDate User unprocessed date input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws duke.exception.InvalidDateException If cannot process date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Date(String unprocessedDate) throws InvalidDateException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.unprocessedDate \u003d unprocessedDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        processDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Processes the user input date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * If unprocessed date is empty, the date will not be processed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws InvalidDateException If date is in the wrong format or invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processDate() throws InvalidDateException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isEmptyDate \u003d unprocessedDate.equals(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isEmptyDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] dateSplit \u003d unprocessedDate.split(\"/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isWrongFormat \u003d dateSplit.length \u003e 3 || dateSplit.length \u003c 3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isWrongFormat) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidDateException(\"OOPS!!! Please specify the date\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \" in the format date/month/year e.g. 2/12/2019.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        processMonth(dateSplit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        processYear(dateSplit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        processDay(dateSplit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void processMonth(String[] dateSplit) throws InvalidDateException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int monthNumber \u003d Integer.parseInt(dateSplit[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isInvalidMonth(monthNumber)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidDateException(\"OOPS!!! Please input a valid month.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.month \u003d Month.of(monthNumber);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void processYear(String[] dateSplit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.year \u003d Integer.parseInt(dateSplit[2]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void processDay(String[] dateSplit) throws InvalidDateException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int inputDay \u003d Integer.parseInt(dateSplit[0]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int monthNumber \u003d Integer.parseInt(dateSplit[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int year \u003d Integer.parseInt(dateSplit[2]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isInvalidDay(inputDay, monthNumber, year)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidDateException(\"OOPS!!! Please input a valid day.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.day \u003d inputDay;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if input month is valid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param monthNumber Month number input by user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether the input month is valid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isInvalidMonth(int monthNumber) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (monthNumber \u003e\u003d 1 \u0026\u0026 monthNumber \u003c\u003d 12) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if input day is valid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param day Day number input by user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param monthNumber Month number input by user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param year Year number input by user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether the input day is valid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isInvalidDay(int day, int monthNumber, int year) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        switch (monthNumber) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 12:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 31) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 11:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 30) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (isLeapYear(year) \u0026\u0026 day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 29) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else if (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 28) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if input year is a leap year."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param year Year number input by user."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether the input year is a leap year."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (year % 100 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (year % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns day number."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Day."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns month e.g. JANUARY."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Month."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns year number."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Year."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the unprocessed date."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Unprocessed date."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getUnprocessedDate() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return unprocessedDate;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isEmptyDate \u003d month \u003d\u003d null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isEmptyDate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean dateEndsWithFirst \u003d day % 10 \u003d\u003d 1 \u0026\u0026 day !\u003d 11;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean dateEndsWithSecond \u003d day % 10 \u003d\u003d 2 \u0026\u0026 day !\u003d 12;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (dateEndsWithFirst) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return day + \"st of \" + month + \" \" + year;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (dateEndsWithSecond) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return day + \"nd of \" + month + \" \" + year;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return day + \"th of \" + month + \" \" + year;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 193
    }
  },
  {
    "path": "src/main/java/duke/calendar/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a time. A \u003ccode\u003eTime\u003c/code\u003e object corresponds to a specified hour and minutes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String unprocessedTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String processedTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected boolean isAfternoon \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eTime\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param unprocessedTime User unprocessed time input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws InvalidTimeException If cannot process time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Time(String unprocessedTime) throws InvalidTimeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.unprocessedTime \u003d unprocessedTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        processTime();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Processes the user input time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * If unprocessed time is empty, the time will not be processed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws InvalidTimeException If time is in the wrong format or invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processTime() throws InvalidTimeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isEmptyTime \u003d unprocessedTime.equals(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isEmptyTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isIncorrectFormat \u003d unprocessedTime.length() !\u003d 4;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isIncorrectFormat) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidTimeException(\"OOPS!!! Please input a valid time e.g. 1800.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int time \u003d Integer.parseInt(unprocessedTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int hour \u003d time / 100;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int minute \u003d time % 100;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isInvalidTime \u003d hour \u003e 23 || minute \u003e 59;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isInvalidTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidTimeException(\"OOPS!!! Please input a valid time.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isPastNoon \u003d hour \u003e 11;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isPastNoon) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            hour \u003d hour % 12;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            isAfternoon \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isMidnight \u003d hour \u003d\u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isMidnight) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            hour \u003d 12;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.processedTime \u003d formatTime(hour, minute);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String formatTime(int hour, int minute) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder timing \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        timing.append(hour);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isNotExactHour \u003d minute !\u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isLessThanTenMinutes \u003d minute \u003c 10;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isNotExactHour) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (isLessThanTenMinutes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                timing.append(\":\" + \"0\" + minute);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                timing.append(\":\" + minute);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return timing.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the unprocessed time."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Unprocessed time."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getUnprocessedTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return unprocessedTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isEmptyTime \u003d processedTime \u003d\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isEmptyTime) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isAfternoon) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return processedTime + \"pm\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return processedTime + \"am\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 92
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InsufficientDetailsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a deadline command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An \u003ccode\u003eAddDeadlineCommand\u003c/code\u003e object corresponds to a command to add a \u003ccode\u003eDeadline\u003c/code\u003e object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * to a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eAddDeadlineCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param details Details required to create a \u003ccode\u003eDeadline\u003c/code\u003e object, which includes a task description,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *                a \u003ccode\u003eDate\u003c/code\u003e and/or \u003ccode\u003eTime\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public AddDeadlineCommand(String details) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates a new \u003ccode\u003eDeadline\u003c/code\u003e object and adds it to input \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eUi\u003c/code\u003e object to output a message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eStorage\u003c/code\u003e object to write all \u003ccode\u003eTask\u003c/code\u003e objects in the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * \u003ccode\u003eTaskList\u003c/code\u003e object to the hard disk."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws MissingDescriptionException If description is missing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws duke.exception.InsufficientDetailsException If insufficient details are given."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throws MissingDescriptionException, InsufficientDetailsException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] detailsSplitFromTags \u003d details.split(\"#\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasSpecifiedTags \u003d detailsSplitFromTags.length !\u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String tags \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasSpecifiedTags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tags \u003d detailsSplitFromTags[1].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            boolean hasNoTag \u003d tags.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (hasNoTag) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                throw new MissingDescriptionException(\"tag\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] detailsSplit \u003d detailsSplitFromTags[0].trim().split(\"/by\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean descriptionIsEmpty \u003d detailsSplit.length \u003d\u003d 0 || getAction(detailsSplit).length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasInsufficientDetails \u003d detailsSplit.length \u003c 2 || getDeadline(detailsSplit).length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (descriptionIsEmpty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new MissingDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasInsufficientDetails) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InsufficientDetailsException(\"OOPS!!! The description of a deadline\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \" requires a task and/or a due date\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        addDeadline(tasks, ui, storage, detailsSplit, tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void addDeadline(TaskList tasks, Ui ui, Storage storage, String[] detailsSplit, String tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Task taskDeadline \u003d createDeadline(detailsSplit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tasks.addTask(taskDeadline);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super.addTags(taskDeadline, tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            int numberOfTasks \u003d tasks.getListSize();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printAddedMessage(taskDeadline, numberOfTasks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            storage.writeToHardDisk(tasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printException(exception);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Task createDeadline(String[] detailsSplit) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String action \u003d getAction(detailsSplit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String deadline \u003d getDeadline(detailsSplit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] dateAndTimeSplit \u003d deadline.split(\" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Date deadlineDate \u003d createDate(dateAndTimeSplit);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Time deadlineTime \u003d createTime(dateAndTimeSplit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new Deadline(action, deadlineDate, deadlineTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getAction(String[] detailsSplit) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return detailsSplit[0].trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getDeadline(String[] detailsSplit) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return detailsSplit[1].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getDate(String[] dateAndTimeSplit) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return dateAndTimeSplit[0];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getTime(String[] dateAndTimeSplit) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return dateAndTimeSplit[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Date createDate(String[] dateAndTimeSplit) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String date \u003d getDate(dateAndTimeSplit);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new Date(date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Time createTime(String[] dateAndTimeSplit) throws InvalidInputException, InvalidTimeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasNoSpecifiedTime \u003d dateAndTimeSplit.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasSpecifiedTime \u003d dateAndTimeSplit.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasNoSpecifiedTime) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new Time(\"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (hasSpecifiedTime) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new Time(getTime(dateAndTimeSplit));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this object is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether this command is an exit command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the input details for the \u003ccode\u003eAddDeadlineCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Details for command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (o instanceof AddDeadlineCommand) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            AddDeadlineCommand obj \u003d (AddDeadlineCommand) o;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return obj.getDetails().equals(details);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 153
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InsufficientDetailsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents an event command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An \u003ccode\u003eAddEventCommand\u003c/code\u003e object corresponds to a command to add a \u003ccode\u003eEvent\u003c/code\u003e object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * to a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eAddEventCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param details Details required to create an \u003ccode\u003eEvent\u003c/code\u003e object, which includes a task description,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *                a start \u003ccode\u003eDate\u003c/code\u003e and/or a start \u003ccode\u003eTime\u003c/code\u003e, an optional end \u003ccode\u003eDate\u003c/code\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *                and/or end \u003ccode\u003eTime\u003c/code\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public AddEventCommand(String details) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates a new \u003ccode\u003eEvent\u003c/code\u003e object and adds it into input \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eUi\u003c/code\u003e object to output a message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eStorage\u003c/code\u003e object to write all \u003ccode\u003eTask\u003c/code\u003e objects"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * in the \u003ccode\u003eTaskList\u003c/code\u003e to the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws MissingDescriptionException If description is missing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws InsufficientDetailsException If insufficient details are given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throws MissingDescriptionException, InsufficientDetailsException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] detailsSplitFromTags \u003d details.split(\"#\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasSpecifiedTags \u003d detailsSplitFromTags.length !\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String tags \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasSpecifiedTags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tags \u003d detailsSplitFromTags[1].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            boolean hasNoTag \u003d tags.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (hasNoTag) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                throw new MissingDescriptionException(\"tag\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] detailsSplit \u003d detailsSplitFromTags[0].trim().split(\"/at\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean descriptionIsEmpty \u003d detailsSplit.length \u003d\u003d 0 || getEvent(detailsSplit).length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean scheduleTimeIsEmpty \u003d detailsSplit.length \u003c 2 || getTimings(detailsSplit).length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (descriptionIsEmpty) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new MissingDescriptionException(\"event\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (scheduleTimeIsEmpty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InsufficientDetailsException(\"OOPS!!! The description of an event requires a task and/or\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \"a scheduled time\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        addEvent(tasks, ui, storage, detailsSplit, tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void addEvent(TaskList tasks, Ui ui, Storage storage, String[] detailsSplit, String tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Task taskEvent \u003d createEvent(detailsSplit);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tasks.addTask(taskEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super.addTags(taskEvent, tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            int numberOfTasks \u003d tasks.getListSize();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printAddedMessage(taskEvent, numberOfTasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            storage.writeToHardDisk(tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printException(exception);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Task createEvent(String[] detailsSplit) throws InsufficientDetailsException, InvalidInputException,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            InvalidTimeException, InvalidDateException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String event \u003d getEvent(detailsSplit);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String timings \u003d getTimings(detailsSplit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String startDetails \u003d getStartDetails(timings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean noStartDetails \u003d startDetails.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (noStartDetails) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InsufficientDetailsException(\"OOPS!!! Please input a start date/time.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String endDetails \u003d getEndDetails(timings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Date eventStartDate \u003d createStartDate(startDetails);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Time eventStartTime \u003d createStartTime(startDetails);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Date eventEndDate \u003d createEndDate(endDetails);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Time eventEndTime \u003d createEndTime(endDetails);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new Event(event, eventStartDate, eventStartTime, eventEndDate, eventEndTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Date createStartDate(String startDetails) throws InvalidDateException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] startDateAndTimeSplit \u003d startDetails.split(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String startDate \u003d getDate(startDateAndTimeSplit);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new Date(startDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Time createStartTime(String startDetails) throws InvalidInputException, InvalidTimeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] startDateAndTimeSplit \u003d startDetails.split(\" \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String startTime \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasStartTime \u003d startDateAndTimeSplit.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasWrongFormat \u003d startDateAndTimeSplit.length \u003e 2;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasStartTime) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            startTime \u003d getTime(startDateAndTimeSplit);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (hasWrongFormat) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new Time(startTime);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Date createEndDate(String endDetails) throws InvalidDateException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] endDateAndTimeSplit \u003d endDetails.split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String endDate \u003d getDate(endDateAndTimeSplit);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new Date(endDate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Time createEndTime(String endDetails) throws InvalidInputException, InvalidTimeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] endDateAndTimeSplit \u003d endDetails.split(\" \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String endTime \u003d \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasEndTime \u003d endDateAndTimeSplit.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasWrongFormat \u003d endDateAndTimeSplit.length \u003e 2;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasEndTime) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            endTime \u003d getTime(endDateAndTimeSplit);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (hasWrongFormat) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new Time(endTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getEvent(String[] detailsSplit) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return detailsSplit[0].trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getTimings(String[] detailsSplit) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return detailsSplit[1].trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getStartDetails(String timings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] startAndEndSplit \u003d timings.split(\"/to\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return startAndEndSplit[0].trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getDate(String[] dateAndTimeSplit) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return dateAndTimeSplit[0].trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getTime(String[] dateAndTimeSplit) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return dateAndTimeSplit[1].trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String getEndDetails(String timings) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] startAndEndSplit \u003d timings.split(\"/to\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasEndDetails \u003d startAndEndSplit.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasEndDetails) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return startAndEndSplit[1].trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this object is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether this command is an exit command."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the input details for the \u003ccode\u003eAddEventCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Details for command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (o instanceof AddEventCommand) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            AddEventCommand obj \u003d (AddEventCommand) o;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return obj.getDetails().equals(details);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 200
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a todo command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An \u003ccode\u003eAddTodoCommand\u003c/code\u003e object corresponds to a command to add a \u003ccode\u003eTodo\u003c/code\u003e object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * to a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eAddTodoCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param details Details required to create a \u003ccode\u003eTodo\u003c/code\u003e object, which includes a task description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public AddTodoCommand(String details) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates a new \u003ccode\u003eTodo\u003c/code\u003e object and adds it into input \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eUi\u003c/code\u003e object to output a message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eStorage\u003c/code\u003e object to write all \u003ccode\u003eTask\u003c/code\u003e objects"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * in the \u003ccode\u003eTaskList\u003c/code\u003e to the hard disk."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws MissingDescriptionException If description is empty."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] detailsSplitFromTags \u003d details.split(\"#\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasSpecifiedTags \u003d detailsSplitFromTags.length !\u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String tags \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasSpecifiedTags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tags \u003d detailsSplitFromTags[1].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean descriptionIsEmpty \u003d detailsSplitFromTags[0].trim().length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (descriptionIsEmpty) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new MissingDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        addTodo(tasks, ui, storage, detailsSplitFromTags[0], tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void addTodo(TaskList tasks, Ui ui, Storage storage, String description, String tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Task todo \u003d new Todo(description.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tasks.addTask(todo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super.addTags(todo, tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            int numberOfTasks \u003d tasks.getListSize();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printAddedMessage(todo, numberOfTasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            storage.writeToHardDisk(tasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printException(exception);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this object is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether this command is an exit command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the input details for the \u003ccode\u003eAddTodoCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Details for command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (o instanceof AddTodoCommand) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            AddTodoCommand obj \u003d (AddTodoCommand) o;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return obj.getDetails().equals(details);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 93
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parent class of all other types of commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eCommand\u003c/code\u003e object corresponds to a command to perform some action on a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Performs an action corresponding to the type of command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this object is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether this command is an exit command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected void addTags(Task task, String tags) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] individualTags \u003d tags.split(\"#\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c individualTags.length; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            boolean isEmptyTag \u003d individualTags[i].trim().length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (isEmptyTag) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            task.addTag(individualTags[i].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 43
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a delete command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eDeleteCommand\u003c/code\u003e object corresponds to a command to remove a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * from a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eDeleteCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param index Index of \u003ccode\u003eTask\u003c/code\u003e that is to be deleted in a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Deletes \u003ccode\u003eTask\u003c/code\u003e with given index from the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eUi\u003c/code\u003e object to output a message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eStorage\u003c/code\u003e object to write all \u003ccode\u003eTask\u003c/code\u003e objects"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * in the \u003ccode\u003eTaskList\u003c/code\u003e to the hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws InvalidIndexException If non-existent index is provided."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidIndexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isOutOfBounds \u003d index \u003e\u003d tasks.getListSize();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isOutOfBounds) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        delete(tasks, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void delete(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            tasks.deleteTask(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            int numberOfTasks \u003d tasks.getListSize();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printDeleteMessage(task, numberOfTasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            storage.writeToHardDisk(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printException(exception);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this object is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether this command is an exit command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the input index for the \u003ccode\u003eDeleteCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Index for command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (o instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            DeleteCommand obj \u003d (DeleteCommand) o;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return obj.getIndex() \u003d\u003d index;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 85
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a done command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eDoneCommand\u003c/code\u003e object corresponds to a command to mark a \u003ccode\u003eTaskList\u003c/code\u003e object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * in a \u003ccode\u003eTaskList\u003c/code\u003e as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eDoneCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param index Index of \u003ccode\u003eTask\u003c/code\u003e object that is to be marked as done in a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Marks a \u003ccode\u003eTask\u003c/code\u003e with given index as done in the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eUi\u003c/code\u003e object to output a message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eStorage\u003c/code\u003e object to write all \u003ccode\u003eTask\u003c/code\u003e objects"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * in the \u003ccode\u003eTaskList\u003c/code\u003e to the hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws InvalidIndexException If non-existent index is provided."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidIndexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isOutOfBounds \u003d index \u003e\u003d tasks.getListSize();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isOutOfBounds) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        markAsDone(tasks, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void markAsDone(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Task action \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            action.setDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printDoneMessage(action);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            storage.writeToHardDisk(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printException(exception);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this object is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether this command is an exit command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the input index for the \u003ccode\u003eDoneCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Index for command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (o instanceof DoneCommand) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            DoneCommand obj \u003d (DoneCommand) o;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return obj.getIndex() \u003d\u003d index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 83
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents an exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An \u003ccode\u003eExitCommand\u003c/code\u003e object corresponds to a command to close Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eUi\u003c/code\u003e object to output a message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eUi\u003c/code\u003e object to close the scanner that reads user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ui.closeScanner();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this object is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether this command is an exit command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (o instanceof ExitCommand) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 52
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a find command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eFindCommand\u003c/code\u003e object corresponds to a command to find tasks with a given keyword in"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * from a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eFindCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param details Details for find command, which includes the keyword that is being searched for."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public FindCommand(String details) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Searches for \u003ccode\u003eTask\u003c/code\u003e objects with given keyword in their description in the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eUi\u003c/code\u003e object to output the \u003ccode\u003eString\u003c/code\u003e representations of"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * the matching \u003ccode\u003eTask\u003c/code\u003e objects in \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasNoKeyWord \u003d details.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasNoKeyWord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            printAll(tasks, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            printMatching(tasks, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void printMatching(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ui.printMessage(\"Here are the matching tasks in your list: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getListSize(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (tasks.getTask(i).getDescription().contains(details)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ui.printMessage((i + 1) + \". \" + tasks.getTask(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void printAll(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ui.printMessage(\"\\t Here are the matching tasks in your list: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getListSize(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printMessage(\"\\t \" + (i + 1) + \". \" + tasks.getTask(i));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this object is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether this command is an exit command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the keyword for the \u003ccode\u003eFindCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Details for command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (o instanceof FindCommand) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            FindCommand obj \u003d (FindCommand) o;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return obj.getDetails().equals(details);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 86
    }
  },
  {
    "path": "src/main/java/duke/command/FindTagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a \u003ccode\u003eFindTagCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A\u003c \u003ccode\u003eFindTagCommand\u003c/code\u003e corresponds to a command searching for all the tasks that are labelled with this tag."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class FindTagCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eFindTagCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tag Input tag that is being searched for."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public FindTagCommand(String tag) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Iterates through all the tasks and finds those with matching tags."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cTask\u003e actions \u003d tasks.getList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c actions.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Task task \u003d actions.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String tags \u003d task.getTagsAsStrings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (tags.contains(tag)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ui.printTasksMatchingTag(tag, matchingTasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a list command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eListCommand\u003c/code\u003e object corresponds to a command to list all \u003ccode\u003eTask\u003c/code\u003e objects"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * in a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eListCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls the method in the \u003ccode\u003eUi\u003c/code\u003e object to output the \u003ccode\u003eString\u003c/code\u003e representations of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * the \u003ccode\u003eTask\u003c/code\u003e objects in \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ui.printMessage(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getListSize(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printMessage((i + 1) + \". \" + tasks.getTask(i));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this object is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether this command is an exit command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (o instanceof ListCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 53
    }
  },
  {
    "path": "src/main/java/duke/command/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a \u003ccode\u003eTagCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eTagCommand\u003c/code\u003e corresponds to a command to tag a specific task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    String[] tags;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eTagCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param index Index of task to be tagged."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tags Input tags by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public TagCommand(int index, String[] tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Tags a task at a specified index with an input tag."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e which stores \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e which handles user input and outputs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param storage Instance of \u003ccode\u003eStorage\u003c/code\u003e which stores and loads information to and from the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws InvalidIndexException If the index is more than the size of the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws MissingDescriptionException If no tag is specified."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidIndexException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            MissingDescriptionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isOutOfBounds \u003d index \u003e\u003d tasks.getListSize();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isOutOfBounds) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        tag(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void tag(TaskList tasks, Ui ui, Storage storage) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Task action \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            boolean hasNoTag \u003d tags.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (hasNoTag) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                throw new MissingDescriptionException(\"tag\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            for (int i \u003d 1; i \u003c tags.length; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                boolean isEmptyTag \u003d tags[i].trim().length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (isEmptyTag) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                action.addTag(tags[i]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printTagMessage(action, tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            storage.writeToHardDisk(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ui.printException(exception);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 68
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a checked exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eDukeException\u003c/code\u003e object corresponds to an exception that is thrown when user inputs are invalid or"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * have the wrong format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eDukeException\u003c/code\u003e."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param message Message about the exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the message about the exception."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Exception message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/InsufficientDetailsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class InsufficientDetailsException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eInsufficientDetailsException\u003c/code\u003e."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param message Message about the exception."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public InsufficientDetailsException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class InvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eDateFormatException\u003c/code\u003e."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param message Message about the exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public InvalidDateException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eInvalidIndexException\u003c/code\u003e."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public InvalidIndexException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(\"OOPS!!! This item does not exist.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eInvalidInputException\u003c/code\u003e."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public InvalidInputException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class InvalidTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eInvalidTimeException\u003c/code\u003e."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param message Message about the exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public InvalidTimeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eMissingDescriptionException\u003c/code\u003e."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param taskType Type of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MissingDescriptionException(String taskType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(\"OOPS!!! The description of a \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class StorageException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eStorageException\u003c/code\u003e."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param message Message about the exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public StorageException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 13
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Time;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eDeadline\u003c/code\u003e object corresponds to a type of \u003ccode\u003eTask\u003c/code\u003e object with a due date and an optional"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * time that it is due."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected Time time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param description Description for the deadline task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param date Date that the task is due."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param time Time that the task is due."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Deadline(String description, Date date, Time time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the unprocessed due date of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Unprocessed date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getUnprocessedDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return date.getUnprocessedDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the unprocessed due time of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Unprocessed time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getUnprocessedTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return time.getUnprocessedTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the type of task that this \u003ccode\u003eDeadline\u003c/code\u003e object is."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Deadline type."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + date.toString() + (time.toString().equals(\"\") ? \"\" : \", \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + time.toString()) + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.calendar.Time;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents an event task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An \u003ccode\u003eEvent\u003c/code\u003e object corresponds to a type of \u003ccode\u003eTask\u003c/code\u003e object with a scheduled date and start time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * and an optional end date and end time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected Date startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected Time startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected Date endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected Time endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param description Description for the event task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param startDate Scheduled start date of event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param startTime Scheduled start time of event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param endDate Scheduled end date of event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param endTime Scheduled end time of event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Event(String description, Date startDate, Time startTime, Date endDate, Time endTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the unprocessed start date of the event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Unprocessed start date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getUnprocessedStartDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return startDate.getUnprocessedDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the unprocessed start time of the event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Unprocessed start time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getUnprocessedStartTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return startTime.getUnprocessedTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the unprocessed end date of the event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Unprocessed end date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getUnprocessedEndDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return endDate.getUnprocessedDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the unprocessed end time of the event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Unprocessed end time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getUnprocessedEndTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return endTime.getUnprocessedTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the type of task that this \u003ccode\u003eEvent\u003c/code\u003e object is."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Event type."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        output.append(\"[E]\" + super.toString() + \" (at: \" + startDate.toString()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + (startTime.toString().equals(\"\") ? \"\" : \", \" + startTime.toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (endDate.toString().equals(\"\") \u0026\u0026 endTime.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            output.append(\")\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (endDate.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                output.append(\" to \" + endTime.toString() + \")\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else if (endTime.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                output.append(\" to \" + endDate.toString() + \")\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                output.append(\" to \" + endDate.toString() + \", \" + endTime.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 91
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parent class of all other types of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A \u003ccode\u003eTask\u003c/code\u003e object corresponds to a task to be added to a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    protected ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns a tick icon if the task is completed and a cross icon if otherwise."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Icon to indicate status of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return (isDone ? \"DONE\" : \"NOT DONE\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Sets the task as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Description of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns status of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether the task is completed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Adds tags to the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param tag Input tag."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void addTag(String tag) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the tags in the hashtag form (with a preceding #)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return All tags."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getTagsAsStrings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder hashTags \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            hashTags.append(\"#\" + tags.get(i) + \" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return hashTags.toString().trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks the type of the task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Type of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description + \" \" + getTagsAsStrings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 85
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An \u003ccode\u003eTodo\u003c/code\u003e object corresponds to a type of \u003ccode\u003eTask\u003c/code\u003e object with a task to be completed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructor for \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param description Description of the todo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the type of task that this \u003ccode\u003eEvent\u003c/code\u003e object is."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Todo type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 29
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: aliceblue;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" maxWidth\u003d\"270.0\" style\u003d\"-fx-label-padding: 3;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cFont name\u003d\"Candara Light\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#0c0c0c\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Emoji\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: aliceblue;\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 23
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.function.DoubleUnaryOperator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_bye() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(new ExitCommand(), Parser.parse(\"bye\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_list() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(new ListCommand(), Parser.parse(\"list\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_todo() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(new AddTodoCommand(\"read book\"), Parser.parse(\"todo read book\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_deadline() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(new AddDeadlineCommand(\"read book /by 2/12/2019 1800\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Parser.parse(\"deadline read book /by 2/12/2019 1800\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_event() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(new AddEventCommand(\"book reading /at 2/12/2019 1800 /to 2/12/2019 1900\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Parser.parse(\"event book reading /at 2/12/2019 1800 /to 2/12/2019 1900\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_done() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(new DoneCommand(1), Parser.parse(\"done 2\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_delete() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(new DeleteCommand(1), Parser.parse(\"delete 2\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_error() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Parser.parse(\"blah\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 67
    }
  },
  {
    "path": "src/test/java/duke/calendar/DateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processedDate_success() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Date date \u003d new Date(\"2/12/2019\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(\"2nd of DECEMBER 2019\", date.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processedDate_wrongMonth_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Date date \u003d new Date(\"2/13/2019\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            assertEquals(\"OOPS!!! Please input a valid month.\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processedDate_wrongDay_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Date date \u003d new Date(\"29/2/2019\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            assertEquals(\"OOPS!!! Please input a valid day.\", e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processedDate_wrongFormat_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Date date \u003d new Date(\"2/2019\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            assertEquals(\"OOPS!!! Please specify the date\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \" in the format date/month/year e.g. 2/12/2019.\", e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 49
    }
  },
  {
    "path": "src/test/java/duke/calendar/TimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package duke.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processedTime_success() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Time time \u003d new Time(\"0000\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(\"12am\", time.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processedDate_wrongHour_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Time time \u003d new Time(\"2450\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            assertEquals(\"OOPS!!! Please input a valid time.\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processedDate_wrongMinute_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Time time \u003d new Time(\"2361\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            assertEquals(\"OOPS!!! Please input a valid time.\", e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void processedDate_wrongFormat_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Time time \u003d new Time(\"17092\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            assertEquals(\"OOPS!!! Please input a valid time e.g. 1800.\", e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 48
    }
  }
]
