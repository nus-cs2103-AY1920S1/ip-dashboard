[
  {
    "path": "src/main/java/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Deadlines extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private LocalDateTime deadline ;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Deadlines(boolean done, String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(done, description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"D | \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"1 | \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"0 | \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description + \" | \" + Parser.toFileDateTime(deadline));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"[D]\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✓] \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✗] \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\" (by: \" + Parser.printDate(deadline) + \")\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 35
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String taskListPath \u003d \"./src/main/data/taskList.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    String lineWrap(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(input + \"\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String greet() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(logo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"What can I do for you?\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String bye() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return lineWrap(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String getList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append((i + 1) + \". \" + taskList.get(i).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (i !\u003d taskList.size() - 1) { //last item"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Task createTask(String str, String command) throws DukeException { //command is either todo, deadline or event"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] splitStr;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new ToDo(false, str);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (command.equals(\"deadline\")) { //eg input: deadline return book /by 2/12/2019 1800"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            splitStr \u003d str.split(\"/by\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"Invalid format. Please use \u0027by:\u0027 to state your deadline\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime dt \u003d Parser.parseDateTime(splitStr[1].trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new Deadlines(false, splitStr[0].trim(), dt);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (command.equals(\"event\")) { //eg input: event proj meeting /at 2/12/2019 1800 - 2/12/2019 1800"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            splitStr \u003d str.split(\"/at\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"Invalid format. Please use \u0027at:\u0027 to state your deadline\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] dateString \u003d splitStr[1].trim().split(\" - \"); //e.g. 2/12/2019 1800 - 2/12/2019 1800"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime start \u003d Parser.parseDateTime(dateString[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime end \u003d Parser.parseDateTime(dateString[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new Events(false, splitStr[0].trim(), start, end);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String deleteTask(int taskNum) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task t \u003d taskList.get(taskNum - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"  \" + t + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        taskList.remove(taskNum - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String addTask(Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"  \" + task + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String markTask(int taskNum) throws DukeException { //mark as done. Need to check if already done, and if so throw exception"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d taskList.get(taskNum - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"  \" + task.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private int parseTaskInt(String str) throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        int taskInt;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            taskInt \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (taskInt \u003e taskList.size() || taskInt \u003c 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"That task number does not exist, please try again\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"Please state a valid task number\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return taskInt;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void executeCommand(String command, String[] inputSplit) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(lineWrap(getList()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int taskInt \u003d parseTaskInt(inputSplit[1]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(lineWrap(markTask(taskInt)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fileManager.updateFile(taskList, taskListPath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (command.equals(\"todo\") || command.equals(\"deadline\") || command.equals(\"event\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (inputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of a \" + command + \" cannot be empty.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Task task \u003d createTask(inputSplit[1], command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(lineWrap(addTask(task)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fileManager.updateFile(taskList, taskListPath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int taskInt \u003d parseTaskInt(inputSplit[1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(lineWrap(deleteTask(taskInt)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fileManager.updateFile(taskList, taskListPath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private void loadFile(String filePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            File f \u003d new File(filePath); //hardCoded file directory"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String[] strArr \u003d line.split(Pattern.quote(\" | \"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Task task \u003d fileManager.createTask(strArr);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(lineWrap(\"Data is loaded from data/taskList.txt\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(lineWrap(\"File not found, data not loaded!\\nCreating new file taskList.txt\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                f.createNewFile(); //creates new text file"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (IOException ioE) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                System.out.println(lineWrap(ioE.getMessage()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void start() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        System.out.println(greet());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        loadFile(taskListPath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] inputSplit \u003d input.split(\" \", 2); //split into command and remaining sentence"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String command \u003d inputSplit[0];"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    System.out.println(bye());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    executeCommand(command, inputSplit);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                System.out.println(lineWrap(e.getMessage()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 179,
      "-": 8
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 5
    }
  },
  {
    "path": "src/main/java/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Events(boolean done, String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(done, description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"E | \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"1 | \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"0 | \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description + \" | \" + Parser.toFileDateTime(start) + \" - \" + Parser.toFileDateTime(end));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"[E]\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✓] \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✗] \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\" (\" + Parser.printDate(start) + \" - \" + Parser.printDate(end) + \")\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "DivineDX": 38
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        duke.start();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 6
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    //example input: 2/12/2019 1800"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTimeStr) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] strSplit \u003d dateTimeStr.split(\" \");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] date \u003d strSplit[0].split(\"/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String time \u003d strSplit[1];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int hours \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int mins \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return LocalDateTime.of(year, month, day, hours, mins);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(\"Invalid Date-Time format. Error Message: \" + e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(\"Please use DD/MM/YYYY HHMM E.g. [2/12/2019 1800]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String toFileDateTime(LocalDateTime dateObj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dateObj.getDayOfMonth() + \"/\" + dateObj.getMonthValue() + \"/\" + dateObj.getYear() + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + String.format(\"%02d\", dateObj.getHour())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + String.format(\"%02d\", dateObj.getMinute());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String printDate(LocalDateTime dateObj) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dateObj.getDayOfMonth() + \" \" + dateObj.getMonth() +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                \" \" + dateObj.getYear() + \" \" + String.format(\"%02d\", dateObj.getHour())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + String.format(\"%02d\", dateObj.getMinute());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 42
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class fileManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static Task createTask(String[] textArr) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String type \u003d textArr[0];"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        boolean done \u003d textArr[1].equals(\"1\"); //1 means done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"T\": //todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            task \u003d new ToDo(done, textArr[2]);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"D\": //deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime deadline \u003d Parser.parseDateTime(textArr[3]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            task \u003d new Deadlines(done, textArr[2], deadline);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"E\": //event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] startEndStr \u003d textArr[3].split(\" - \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime start \u003d Parser.parseDateTime(startEndStr[0]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime end \u003d Parser.parseDateTime(startEndStr[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            task \u003d new Events(done, textArr[2], start, end);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static void updateFile(List\u003cTask\u003e taskList, String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(t.toFileString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (i !\u003d taskList.size() - 1) { //final item, dont add new line"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            System.out.println(\"Cannot write to file: \" + e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 50
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Task(boolean isDone, String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"Task is already done!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public abstract String toFileString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 20
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ToDo(boolean done, String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(done, description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"T | \");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"1 | \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"0 | \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"[T]\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✓] \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✗] \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 29
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String lineWrap(String input) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(input + \"\\n\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(logo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"What can I do for you?\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String bye() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return lineWrap(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 27
    }
  }
]
