[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Duke is a task manager that allows users to manage any tasks they have to do."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "## 2. Usage"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.1 List Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.1.1 `list` - Prints list of all the tasks in from the list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Lists everything in the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example input:*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example output:*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "1. [D][X][1] submission (by: 31-12-2019 23:59)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "2. [E][/][3] raid (at: 20-09-2019 18:00)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "3. [T][X][3] read book"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.2 Done Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.2.1 `done`- Sets a task as done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Marks a task as done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example input:*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example output:*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Noted, I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "  [D][/][2] homework (/by 31-12-2019 23:59)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.3 Delete Command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.3.1 `delete` - Deletes a task from the list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Removes a task from the list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example input:*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example output:*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Noted, I\u0027ve removed this task:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "  [T][/][2] sleep"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.4 Find Command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.4.1 `find`- Searches the list for tasks with keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Prints a list of tasks with matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example input:*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "find book"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example output:*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "1. [T][X][3] read book"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "2. [D][X][1] return book (by: 25-12-2019 23:00)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.5 Add Commands"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Add different types of tasks to the list.  All newly added tasks will be marked as undone by default"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.5.1 `todo`- Add todo task to the list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Adds a todo task to the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example input:*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*format: *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "todo sleep 2"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example output:*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Got it I\u0027ve added this task:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "  [T][X][2] sleep"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Now you have 3 tasks in the list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.5.2 `event`- Add event task to the list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Adds an event task to the list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example input:*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "event workshop 1 /at 12-06-2019 14:00"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example output:*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Got it I\u0027ve added this task:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "  [E][X][1] workshop (at: 12-06-2019 14:00)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Now you have 4 tasks in the list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.5.3 `deadline`- Add deadline task to the list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Adds a deadline task to the list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example input:*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "deadline assignment 1 /by 31-12-2019 23:59"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example output:*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Got it I\u0027ve added this task:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "  [D][X][1] assignment (by: 31-12-2019 23:59)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Now you have 5 tasks in the list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.6 Bye Command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 2.6.1 `bye` - terminates duke and saves the changes made"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Exits duke and saves all changes made"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example input:*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "bye"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "*Example output:*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "### 3. Command Summary"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "| Command  | Usage  |  Example |"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "|---|---|---|"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "| ListCommand  | list| list  |"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "| DoneCommand  | done \u003c$index\u003e  |  done 3 |"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "| DeleteCommand  | delete \u003c$index\u003e  |  delete 2 |"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "| FindCommand  | find \u003c$word(s) to find\u003e  |  find book |"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "| AddCommand  |  todo \u003c$description\u003e \u003c$priority\u003e |  todo read book 3 |"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "| AddCommand  | event \u003c$description\u003e \u003c$priority\u003e /at \u003c$date\u003e \u003c$time\u003e | event raid Area 51 1 /at 20-09-2019 18:00  |"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "| AddCommand  |  deadline \u003c$description\u003e \u003c$priority\u003e /by \u003c$date\u003e \u003c$time\u003e | deadline final submission 1 /by 31-12-2019 23:59  |"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "| ByeCommand | bye  |   |"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 149,
      "-": 9
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\tid \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "group \u0027main.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "version \u00270.2\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    mainClassName \u003d \"UI.Launcher\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.1.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.1.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "test {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 42,
      "-": 17
    }
  },
  {
    "path": "src/main/java/Command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Executable that add tasks to the task list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class AddCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructs Add command object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public AddCommand(Task task){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Gets the information of task just added to the list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return The information of latest added task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Task getTask(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Performs action to add task to list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param storage loads and saves the list of tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, UI ui)  {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        tasks.add(this.task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        System.out.println(\"\\t Got it I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        System.out.println(\"\\t \" + tasks.getLatest());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        System.out.println(\"\\t Now you have \" + tasks.getLength() + \" in the list\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d  \"Got it I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"   \" + tasks.getLatest() + \"\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"Now you have \" + tasks.getLength() + \" in the list\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d ui.line();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 49
    }
  },
  {
    "path": "src/main/java/Command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Ends the session with user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, UI ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"Bye see you soon\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d ui.line();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Changes state of program to end"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return switch to end the session"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        super.isExit \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 29
    }
  },
  {
    "path": "src/main/java/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Abstract command class for all kinds of commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    protected String taskMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor for command class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param storage loads and saves list of tasks to file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage, UI ui) ;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Message of what action was executed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return Message of action performed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return taskMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Switch to end the session"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return boolean to end the session"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 36
    }
  },
  {
    "path": "src/main/java/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Executable that deletes task from the list of task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructs delete command class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param index of the task to be deleted"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public DeleteCommand(int index){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Performs action to delete specified task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param storage loads and saves list of tasks to file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, UI ui){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(tasks.getLength()\u003c index){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d  \"No such task to remove\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d ui.line();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d  \"Noted, I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d \"  \" + tasks.getTask(index) + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            tasks.deleteTask(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d ui.line();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 42
    }
  },
  {
    "path": "src/main/java/Command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Executable to mark a task as done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructs done command class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param index of task to be marked done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public DoneCommand(int index){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Performs action to mark specified task as done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param storage loads and saves list of tasks to file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, UI ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(tasks.getLength() \u003c index){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d  \"No such task to mark as done\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            tasks.setDone(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d  \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d \"   \" + tasks.getTask(index)+\"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 39
    }
  },
  {
    "path": "src/main/java/Command/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Shows the all possible commands if user inputs command that does not exist"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class ErrorCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public ErrorCommand(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, UI ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"Command does not exist\\nThese are the commands:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"-list to list tasks\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"-done \u003cnumber\u003e to find task\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"-delete \u003cnumber\u003e to delete task\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"-find \u003cword\u003e to find task with specified word\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"-todo \u003cdescription\u003e \u003cpriority\u003e to add todo task reminder\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"-deadline \u003cdescription\u003e \u003cpriority\u003e /by\u003cdate/time\u003e to add deadline reminder\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d \"-event \u003cdescription\u003e \u003cpriority\u003e /at\u003cdate/time\u003e to add event reminder\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d ui.line();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 29
    }
  },
  {
    "path": "src/main/java/Command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Executable to find all tasks for the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    String wordToFind;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    ArrayList\u003cTask\u003e searchResults;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructs find command class"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param word to find in list of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public FindCommand(String word){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        wordToFind \u003d word.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Performs action to find tasks containing specified word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param storage loads and saves list of tasks to file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, UI ui)  {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for(Task t: tasks.getTasks()){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if(t.toString().contains(wordToFind)){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                searchResults.add(t);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(searchResults.isEmpty()){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d \"\\t Sorry no matches\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            for(Task task : searchResults){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                 System.out.println(\"\\t \" + counter + \". \" + task.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                 taskMessage +\u003d  counter + \". \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                 counter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d ui.line();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 53
    }
  },
  {
    "path": "src/main/java/Command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Executable to list all the tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Performs action to list all tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param storage loads and saves list of tasks to file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, UI ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(tasks.toString().equals(\"\")){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage \u003d \"You have 0 tasks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d tasks.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d ui.line();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 26
    }
  },
  {
    "path": "src/main/java/Command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Executable to print oll tasks of specified priority"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class SortCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    int priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor of sort command class"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param priority of the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public SortCommand(int priority){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, UI ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for(Task task : tasks.getTasks()){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if(task.getPriority() \u003d\u003d priority){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                sortedTasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(sortedTasks.isEmpty()){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            taskMessage +\u003d \"\\t Sorry no tasks with priority of \" + priority + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            for(Task task : sortedTasks){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                taskMessage +\u003d  counter + \". \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        taskMessage +\u003d ui.line();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 47
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Command.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Main program skeleton"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Starts duke class from the UI class"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Duke(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        startup();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Gets input from user and handles the action"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param input User input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return  Tells user actions performed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            exit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Command c \u003d InputManager.parse(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            c.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            exit \u003d c.isExit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if(exit){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                return ui.goodBye();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                return c.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } catch (IOException | ParseException | DukeException | DukeCommandException e){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Initialises the duke class and loads tasks from file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param filePath directory of the file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void startup(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Gets UI text for the app"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return UI messages for users"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public UI getUI(){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 79
    }
  },
  {
    "path": "src/main/java/Duke/DukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Handles exception for non task related commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * e.g. commands like delete/done/find"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class DukeCommandException extends Exception{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public DukeCommandException(String action){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        errorMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        errorMessage +\u003d \"OOPS!!! \"+ action + \" requires the index of the task\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(action.equals(\"delete\")){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            errorMessage +\u003d \"Format of delete is:\\n \\tdelete \u003cindex of task\u003e\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else if(action.equals(\"done\")){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            errorMessage +\u003d \"Format of done is:\\n \\tdone \u003cindex of task\u003e\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else if(action.equals(\"sort\")){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "          errorMessage +\u003d \"Format of sort is:\\n \\tsort \u003cpriority of task\u003e\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            errorMessage +\u003d \"Format of find is:\\n \\tfind \u003cword(s) to find\u003e\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        errorMessage +\u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 33
    }
  },
  {
    "path": "src/main/java/Duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Handles and informs missing values and invalid commands"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor for DukeException"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public DukeException(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        errorMessage \u003d \"OOPS!!! DONT KNOW WHAT THAT MEANS\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor to change error message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param action missing information for specific task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public DukeException(String action){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        errorMessage \u003d ui.line() + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        errorMessage +\u003d \"OOPS!!! You entered the wrong format for \" + action + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(action.equals(\"todo\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            errorMessage +\u003d \"Format of todo is:\\n \\ttodo \u003cdescription\u003e \u003cpriority\u003e\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else if(action.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            errorMessage +\u003d \"Format of deadline is:\\n \\tdeadline \u003cdescription\u003e \u003cpriority\u003e /by \u003cDD-MM-YYYY\u003e \u003cHH:MM\u003e\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            errorMessage +\u003d \"Format of event is:\\n \\t event\u003cdescription\u003e \u003cpriority\u003e /at \u003cDD-MM-YYYY\u003e \u003cHH:MM\u003e\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        errorMessage +\u003d ui.line();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Shous error made by user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return returns the error message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 43
    }
  },
  {
    "path": "src/main/java/Duke/InputManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.Deadlines;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.Events;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.ToDos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Parsers commands of user to get the action to be executed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class InputManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public InputManager(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Parse command given by user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param input User input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return Command object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws DukeException Invalid actions/ Missing values"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static Command parse(String input) throws DukeException, DukeCommandException{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String[] words \u003d input.split(\" \",2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String action \u003d words[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        switch(action) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                   throw new DukeCommandException(action);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    int index \u003d Integer.parseInt(words[1].trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    return new DoneCommand(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                   throw new DukeCommandException(action);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    int index \u003d Integer.parseInt(words[1].trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    return new DeleteCommand(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new DukeException(action);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    int lastSpace \u003d words[1].lastIndexOf(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if(lastSpace \u003d\u003d -1){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        throw new DukeException(action);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String description \u003d words[1].substring(0,lastSpace);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String p \u003d words[1].substring(lastSpace).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if(description.isEmpty()|| p.isEmpty()){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        throw new DukeException(action);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    int priority \u003d Integer.parseInt(p);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    return new AddCommand(new ToDos(description,priority));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new DukeException(action);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    assert(words[1].contains(\"/at\")): \"Missing input for event\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String[] details \u003d words[1].split(\" /at \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    int lastSpace \u003d details[0].lastIndexOf(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if(lastSpace \u003d\u003d -1){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        throw new DukeException(action);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String description \u003d details[0].substring(0, lastSpace);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String p \u003d details[0].substring(lastSpace).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String date \u003d details[1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if(description.isEmpty()|| p.isEmpty()){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        throw new DukeException(action);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    int priority \u003d Integer.parseInt(p);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    return new AddCommand(new Events(description, date, priority));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new DukeException(action);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    assert(words[1].contains(\"/by\")): \"Missing input for deadline\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String[] details \u003d words[1].split(\" /by \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    int lastSpace \u003d details[0].lastIndexOf(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if(lastSpace \u003d\u003d -1){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        throw new DukeException(action);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String description \u003d details[0].substring(0, lastSpace);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String p \u003d details[0].substring(lastSpace).trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    String date \u003d details[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    if(description.isEmpty()|| p.isEmpty()){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                        throw new DukeException(action);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    int priority \u003d Integer.parseInt(p);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    return new AddCommand(new Deadlines(description, date, priority));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if(words.length \u003c 2){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new DukeCommandException(action);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    return new FindCommand(words[1]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            case \"sort\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                if(words.length \u003c 2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    throw new DukeCommandException(action);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    int priority \u003d Integer.parseInt(words[1].trim());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    return new SortCommand(priority);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 119
    }
  },
  {
    "path": "src/main/java/Duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.ToDos;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.Deadlines;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.Events;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Reads and writes information from and to file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Storage{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public final static String PATH \u003d \"data.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Contructor for storage object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Storage(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Reads tasks from file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return List of tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws FileNotFoundException Inform file does not exist"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws  FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        File file \u003d new File(PATH);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        while(sc.hasNextLine()){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            String[] text \u003d sc.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            int priority \u003d Integer.parseInt(text[2].trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Task t;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            switch (text[0]){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    t \u003d new ToDos(text[3], priority);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    t \u003d new Deadlines(text[3], text[4], priority);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    t \u003d new Events(text[3], text[4], priority);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    t \u003d new Task(\"\", priority);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if (text[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                t.setDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            } else {}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Writes modifications to the file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param tasks Takes in the list of tasks user had been making changes to"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws IOException Error writing to file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws ParseException Error writing to file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) throws IOException, ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        FileWriter writer \u003d new FileWriter(PATH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for(Task t: tasks){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            writer.write(t.toFile() + System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 90
    }
  },
  {
    "path": "src/main/java/Duke/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Program instructions for the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String greeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String logo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor for the UI class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public UI(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        line \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        greeting \u003d \"\\t Hello I\u0027m HackerMan\\n\\tWhat can I do for you?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Greets user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return the Greeting"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String greet(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return line + \"\\n\" + greeting + \"\\n\" + line;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * A line for dividing content"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String line(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Says goodbye to user to let user know program has ended"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String goodBye(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return line + \"\\nYour modifications have been saved. See you next time\\n\" + line;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Informs user that file was not found"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void  loadError(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        System.out.println(\"No data was found\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 55
    }
  },
  {
    "path": "src/main/java/Task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Deadline class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private SimpleDateFormat sdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor of deadline task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param name of task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param priority of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Deadlines(String name, String time, int priority){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        super(name, priority);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        deadline \u003d \"[D]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        sdf \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Converts the date input by user to date time format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return date and time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String convertDate() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        date \u003d sdf.parse(this.time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return sdf.format(date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Prints details of deadline"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return detail of deadline"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return deadline + \"[/][\" + priority + \"] \" + name + \" (by: \" + time + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return deadline + \"[X][\" + priority + \"] \" + name + \" (by: \" + time + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Formats deadline to be saved to file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return The correct format to be saved to file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toFile() throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return \"D | 1 | \" + priority + \" | \" + name + \" | \" +  convertDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return \"D | 0 | \" + priority + \" | \" + name + \" | \" +  convertDate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 65
    }
  },
  {
    "path": "src/main/java/Task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Event class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private SimpleDateFormat sdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor of event task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param name of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param priority of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Events(String name, String time, int priority){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        super(name, priority);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.time \u003d time.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        event \u003d \"[E]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        sdf \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Converts date and time of event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return  date and time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String convertDate() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        date \u003d sdf.parse(this.time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return sdf.format(date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Details of event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return details of event"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return event + \"[/][\" + priority + \"] \" + name + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return event + \"[X][\" + priority + \"] \" + name + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toFile() throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return \"E | 1 | \" + priority + \" | \" +  name + \" | \" +  convertDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return \"E | 0 | \" + priority + \" | \" +  name + \" | \" +  convertDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 60
    }
  },
  {
    "path": "src/main/java/Task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Base task class for different kinds of tasks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param name of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param priority of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public Task(String name, int priority){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * prints the name of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Sets the priority of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param priority of the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void setPriority(int priority){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * sets the task to completed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void setDone(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Check if task is done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return state of task i.e completed or not"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public boolean isDone(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Formats task into file format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return String with correct format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toFile() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Returns the priority of the task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public int getPriority(){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 71
    }
  },
  {
    "path": "src/main/java/Task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Class with list of tasks and methods to access individual tasks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Creates tasklist object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        tasks \u003d list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Adds task to list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param t task to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void add(Task t){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Prints all the task in the list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return full list of tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String list \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        for(Task task : tasks){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            if(task.isDone()){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                list +\u003d counter + \". \"+ task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                list +\u003d counter + \". \"+ task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    //sets the task inside the list to completed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void setDone(int no){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        tasks.get(no-1).setDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    //returns name of the task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getTask(int no){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return tasks.get(no-1).toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    //returns length of memo list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public int getLength(){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    //returns latest added memo"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String getLatest(){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return tasks.get(tasks.size()-1).toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    //deletes the task from list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void deleteTask(int no){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(tasks.size()\u003e0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            tasks.remove(no - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            System.out.println(\"Task list is already empty\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    //returns entire list of tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTasks(){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void setPriority(int priority){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        tasks.get(tasks.size()-1).setPriority(priority);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 82
    }
  },
  {
    "path": "src/main/java/Task/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Todo class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private String todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Constructor of todo task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param name of task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @param priority of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public ToDos(String name, int priority){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        super(name, priority);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        todo \u003d \"[T]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Details of todo"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return details of todo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return todo + \"[/][\" + priority + \"] \" + name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return todo + \"[X][\" + priority + \"] \" + name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Formats todo to correct format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * @return format to save to file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public String toFile(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return \"T | 1 | \" + priority + \" | \" + name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            return \"T | 0 | \" + priority + \" | \" + name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 43
    }
  },
  {
    "path": "src/main/java/UI/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 62
    }
  },
  {
    "path": "src/main/java/UI/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 12
    }
  },
  {
    "path": "src/main/java/UI/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * A GUI for Duke.Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().greet();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 36
    }
  },
  {
    "path": "src/main/java/UI/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import UI.DialogBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.Duke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Controller for UI.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dankCrimson.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/sfin.jpg\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private void handleUserInput() throws IOException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void greet(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                DialogBox.getDukeDialog(duke.getUI().greet(), dukeImage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 65
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"500.0\" prefHeight\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"UI.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"400.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 19
    }
  },
  {
    "path": "src/test/java/duke/InputManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.DukeCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Duke.InputManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class InputManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void invalid_argument_test(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            InputManager.parse(\"todo sleep\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        } catch (DukeException | DukeCommandException e){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            assertEquals(\"OOPS!!! DESCRIPTION OF A todo CANNOT BE EMPTY\\nFormat of todo is:\\n \\ttodo \u003cdescription\u003e \u003cpriority:1/2/3\u003e\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                    , e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 22
    }
  },
  {
    "path": "src/test/java/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.Events;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void toFileFormat() throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String correctFormatToFile \u003d \"E | 0 | 2 | workshop | 12-12-2020 15:00\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Events event \u003d new Events(\"workshop\", \"12-12-2020 15:00\", 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertEquals(correctFormatToFile, event.toFile());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 24
    }
  },
  {
    "path": "src/test/java/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import Task.ToDos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void file_to_list_format(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        String expectedFormat \u003d \"[T][X][2] skateboard\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        ToDos todo \u003d new ToDos(\"skateboard\", 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        assertEquals(\"[T][X][2] skateboard\", todo.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 15
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "       mainClassName \u003d \"duke.Duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "│     └─seedu/duke/Duke.Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 3,
      "-": 167
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke.Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Duke.Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Next, we create another Java class, `UI.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "The `UI.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class UI.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        Application.launch(Duke.Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Run `UI.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 7,
      "-": 103
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for Duke.Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "In this tutorial, we will be creating a GUI for Duke.Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "![Mockup for Duke.Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Controls are reusable Duke.Duke.UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Now that we know what controls we need to implement our Duke.Duke.UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "But how do we get the exact layout we want in the Duke.Duke.UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "![Duke.Duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Duke.Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "![Duke.Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        stage.setTitle(\"Duke.Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "![Duke.Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 11,
      "-": 147
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "For Duke.Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `UI.Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "In the mockup of the Duke.Duke.UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Let’s create our custom control `UI.DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class UI.DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public UI.DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `UI.Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke.Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class Duke.Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            new UI.DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            new UI.DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    return \"Duke.Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "## Iteration 3 – Adding custom behavior to UI.DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `UI.DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke.Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public static UI.DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    return new UI.DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public static UI.DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    var db \u003d new UI.DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Now, we can go back to the `UI.Main` class and change the event handler to use our new `UI.DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            UI.DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            UI.DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke.Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   * Add padding between each UI.DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 24,
      "-": 219
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   Why does `UI.Main` need to know that `UI.DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   The `UI.Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Let\u0027s return to Duke.Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "**UI.MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"UI.MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "**UI.DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/UI.MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   ![SceneBuilder opening UI.MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `UI.MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   ![Controller for UI.MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "1. Let’s repeat the process for `UI.DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   The main difference here is that UI.DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   ![Settings for UI.DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "As part of the effort to separate the code handling Duke.Duke\u0027s logic and Duke.Duke.UI, let\u0027s _refactor_ the Duke.Duke.UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "We call these Duke.Duke.UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Let\u0027s implement the `UI.MainWindow` controller class that we specified in `UI.MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "**UI.MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * Controller for UI.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class UI.MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Duke.Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public void setDuke(Duke.Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                UI.DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "                UI.DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our Duke.Duke.UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Notice how in `UI.MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Let\u0027s create a new `UI.Main` class as the bridge between the existing logic in `Duke.Duke` and the Duke.Duke.UI in `UI.MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "**UI.Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": " * A GUI for Duke.Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class UI.Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private Duke.Duke duke \u003d new Duke.Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(UI.Main.class.getResource(\"/view/UI.MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            fxmlLoader.\u003cUI.MainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "For our custom `UI.DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "**UI.DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "public class UI.DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    private UI.DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(UI.MainWindow.class.getResource(\"/view/UI.DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static UI.DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        return new UI.DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "    public static UI.DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "        var db \u003d new UI.DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "When we create a new instance of `UI.DialogBox`, we set both the controller and root Node to `UI.DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "From this point onwards we can interact with `UI.DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "The last change that we have to make is to point our `UI.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "In `UI.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "Application.launch(UI.Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "1. Convert `UI.MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "1. Extend `UI.MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 49,
      "-": 245
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "# Text Duke.Duke.UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   java -classpath ..\\bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronLuk"
        },
        "content": "   java -classpath ../bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "AaronLuk": 5,
      "-": 69
    }
  }
]
