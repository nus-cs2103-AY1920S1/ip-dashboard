[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "run{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    mainClassName \u003d \"duke.main.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 22,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "todo,false,read books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "deadline,false,eat,22/08/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "event,true,cook,25/08/2019 1200"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eAddCommand\u003c/code\u003e is the parent class of {@link AddTodoCommand}, {@link AddDeadlineCommand},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link AddEventCommand}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public abstract class AddCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the task to be added by the add command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the line contents of the command passed as a parameter."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected String line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new add command that will be executed in the \u003ccode\u003erun\u003c/code\u003e method of {@link duke.main.Duke}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * with the specified line as a parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line contents of the command passed as a parameter"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddCommand(String line) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will add the specified task into the list of tasks. The task can be a todo, deadline"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * or event item."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param tasks the list of tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        ui.showAddInformation(task.toString(), tasks.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 53
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eAddDeadlineCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"deadline\"\u003c/code\u003e. The todo command add a \\"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * deadline task into the list of tasks in {@link duke.task.TaskList}. The user interface will display the new deadline"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * task that is added."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new add deadline command that will be executed in the \u003ccode\u003erun\u003c/code\u003e method of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * {@link duke.main.Duke} with the specified line as a parameter."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line contents of the command passed as a parameter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the line is blank"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddDeadlineCommand(String line) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String[] arr \u003d super.line.split(\" /by \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            super.task \u003d new Deadline(arr[0], arr[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aioobe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(line.isBlank() ? null : line);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eAddEventCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"event\"\u003c/code\u003e. The todo command add a event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * task into the list of tasks in {@link duke.task.TaskList}. The user interface will display the new event task that"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * is added."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new add event command that will be executed in the \u003ccode\u003erun\u003c/code\u003e method of {@link duke.main.Duke}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * with the specified line as a parameter."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line contents of the command passed as a parameter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the line is blank"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddEventCommand(String line) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String[] arr \u003d super.line.split(\" /at \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            super.task \u003d new Event(arr[0], arr[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aioobe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(line.isBlank() ? null : line);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eAddTodoCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"todo\"\u003c/code\u003e. The todo command add a todo task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * into the list of tasks in {@link duke.task.TaskList}. The user interface will display the new todo task that is added"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * ."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddTodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new add todo command that will be executed in the \u003ccode\u003erun\u003c/code\u003e method of {@link duke.main.Duke}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * with the specified line as a parameter."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line contents of the command passed as a parameter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the line is blank"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddTodoCommand(String line) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (line.isBlank()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            super.task \u003d new Todo(line);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 36
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is an abstraction over the commands entered by the user. All commands that implements the \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * interface will have to override the \u003ccode\u003eexecute\u003c/code\u003e method."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param tasks the list of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  The \u003ccode\u003eDeleteCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"delete\"\u003c/code\u003e. The delete command will delete"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  a specified task entered by the user. The user interface will display the information of the deleted task if"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  successful."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the index of task to be deleted in the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new delete command with the specified index of the task to be deleted in the list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be deleted in the list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the index of the task specified is not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public DeleteCommand(String index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.index \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will delete the specified task entered by the user from the list of tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param tasks the list of tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws duke.exception.InvalidParameterException if the index is out of range"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String task \u003d tasks.delete(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            ui.showDeletedMessage(task, tasks.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IndexOutOfBoundsException aioube) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(\"\" + index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 57
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  The \u003ccode\u003eDoneCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"done\"\u003c/code\u003e. The done command will mark a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  specified task entered by the user as done. The user interface will display the updated information if it is"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  successful."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * The index of the task to be mark as done in the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new done command with the specified index of the task to be marked as done in the list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be mark as done in the list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidParameterException if the index of the task specified is not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public DoneCommand(String index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.index \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will mark the task specified by the user as done and display the updated information"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * on the user interface."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param tasks the list of tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws duke.exception.InvalidParameterException if the index is out of range"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            String task \u003d tasks.done(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            ui.showMarkedAsDone(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IndexOutOfBoundsException aioube) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidParameterException(\"\" + index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 58
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eExitCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"bye\"\u003c/code\u003e. The exit command will show the exit"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * message and save all tasks in the list of tasks in the {@link TaskList} class object to the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.storage.Storage}. The storage is the file path specified by {@link duke.main.Duke} and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.storage.Storage}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will save the list of tasks in {@link TaskList} into the storage. The storage is the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * file path specified by {@link duke.main.Duke} and {@link Storage}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param tasks the list of tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            storage.save(tasks.save());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            ui.showError(\"I/O Error occurred\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            ui.showExitMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 42
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  The \u003ccode\u003eFindCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"find\"\u003c/code\u003e. The find command will look through"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " *  all the tasks in the list of tasks and find results where the tasks\u0027 description matches the keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * The keyword to look out for."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /** Constructs a new find command with the specified keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param keyword the keyword to look out for in the tasks\u0027 description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will look through all the tasks in the list of tasks in {@link TaskList} and show"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * results found in the user interface"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param tasks the list of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        ui.showResultsFound(tasks.find(keyword));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The \u003ccode\u003eListCommand\u003c/code\u003e is created when the user enters \u003ccode\u003e\"list\"\u003c/code\u003e. The list command will show the list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * in a table form for the user when executed on the user interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command. This will display the list of tasks in the user interface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param tasks the list of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param ui the user interface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param storage the storage for the tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        ui.showTable(tasks.list());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 31
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the parent class of all \u003ccode\u003eRuntimeExcpetion\u003c/code\u003e that may occur in the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public abstract class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a runtime exception that occur when the user enters an invalid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the command entered by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid command exception where the parameter is \u003ccode\u003enull\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid parameter exception with a specified command entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param command the command entered by the user which is invalid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidCommandException(String command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the invalid command that is entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the invalid command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getInvalidCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a runtime exception that occur when an invalid date is entered by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class InvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the string representation of the invalid date time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid date time exception with the specified invalid date time entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param dateTime the invalid date time entered by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidDateTimeException(String dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the invalid date time entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the invalid date time entered by the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getInvalidDateTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 30
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidParameterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a runtime exception that occur when the user enters an invalid parameter."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class InvalidParameterException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the parameter for each Command that will be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String parameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid parameter exception where the parameter is \u003ccode\u003enull\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidParameterException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new invalid parameter exception with a specified parameter entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param parameter the parameter of the command to be executed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public InvalidParameterException(String parameter) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the invalid parameter that is entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the invalid parameter"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getInvalidParameter() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  },
  {
    "path": "src/main/java/duke/exception/LineInFileParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a runtime exception that occur when the file is parsed line by line."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class LineInFileParseException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the line number that the parsing error occurred."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private int lineCount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the content of the line where the parsing error occurred."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new line in file parse exception with the specified line number and contents where the error"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * occurred."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param lineCount the line number where the parsing error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the content of the line where the parsing error occurred"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public LineInFileParseException(int lineCount, String line) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.lineCount \u003d lineCount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the content of the line where the parsing error occurred."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the line content"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getLine() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the line number where parsing error occurred."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the line number where parsing error occurred"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int getLineCount() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return lineCount;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 46
    }
  },
  {
    "path": "src/main/java/duke/exception/LineInFileWriteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a runtime exception that occur when there is failed or interrupted operations in the writer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class LineInFileWriteException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the line number that the write error occcured."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static int lineCount \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the content of the line where the write error occured."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new line in file write exception with the specified line number and contents where the error"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * occurred."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the content of the line where the write error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public LineInFileWriteException(String line) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.lineCount++;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the content of the line where the write error occurred."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the line content"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getLine() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the line number where write error occurred."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the line number where erite error occurred"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int getLineCount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return lineCount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 45
    }
  },
  {
    "path": "src/main/java/duke/formatter/DateFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.formatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Formats a date and time format into a string."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a formatted string from the \u003ccode\u003eDate\u003c/code\u003e object in \u003ccode\u003edd/MM/yy HHmm\u003c/code\u003e format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param date the \u003ccode\u003eDate\u003c/code\u003e object to be formatted"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the \u003ccode\u003eDate\u003c/code\u003e object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static String format(Date date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new SimpleDateFormat(\"dd/MM/yyyy HHmm\").format(date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 20
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.CommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The Duke Program is a command line interface for a simple task manager. Users can add a todo item with just its"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * description, a deadline item with description and the date to complete it by, an event item with description and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * the date the event is held at. The Duke Program has its own user interface, with its own storage and a list of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * tasks list to provide easy tracking for the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the storage / database for Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is a list of tasks. Operations can be performed in the TaskList class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /** UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the user interface for Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new Duke Object with the specified file path as its database / storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param filePath This is the file path used to store the tasks. It also acts as the database / storage of the Duke"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *                 Program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This runs the entire Duke Program. Once duke has started running, user can start typing in commands to duke. The"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * execution of individual {@link duke.command.Command} in Duke happens here."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                Command c \u003d CommandParser.parse(fullCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } catch (InvalidCommandException ice) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                ui.showError(\"Invalid command: \" + ice.getInvalidCommand());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } catch (InvalidParameterException ipe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                ui.showError(\"Invalid parameters: \" + ipe.getInvalidParameter());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } catch (InvalidDateTimeException idte) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                ui.showError(\"Invalid date and time: \" + idte.getInvalidDateTime());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the main method of the Duke Program."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param args the arguments to be passed into the Duke program before the program is run."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        new Duke(\"/Users/bj/java/Duke/data/duke.txt\").run();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 78,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a parser used to parse a string representation of a command into a \u003ccode\u003eCommand\u003c/code\u003e class object in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.command.Command}. These \u003ccode\u003eCommand\u003c/code\u003e can be executed in the \u003ccode\u003erun\u003c/code\u003e method of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.main.Duke}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the string representation of a command into a \u003ccode\u003eCommand\u003c/code\u003e class object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param fullCommand the full command to be parse"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidCommandException if a invalid command is entered by the user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String[] arr \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String parameter \u003d Arrays.stream(arr).skip(1).collect(Collectors.joining(\" \")).trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            switch (arr[0]) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new DoneCommand(parameter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new AddTodoCommand(parameter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new AddDeadlineCommand(parameter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new AddEventCommand(parameter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new DeleteCommand(parameter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new FindCommand(parameter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                throw new InvalidCommandException(arr[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ioube) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 58
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a parser used to parse string into a \u003ccode\u003eDate\u003c/code\u003e clss object. This is used to save the date"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * information in {@link duke.task.Deadline} and {@link duke.task.Event}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the string into a date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param dateTime a string representation of the date and time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a \u003ccode\u003eDate\u003c/code\u003e class object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws InvalidDateTimeException if an invalid date and time is entered by the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Date parse(String dateTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(dateTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }  catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new InvalidDateTimeException(dateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 28
    }
  },
  {
    "path": "src/main/java/duke/parser/FileLineParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.LineInFileParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a parser used to parse each line in the file to a \u003ccode\u003eTask\u003c/code\u003e. The \u003ccode\u003eTask\u003c/code\u003e can be added into"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * a list of tasks in \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class FileLineParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the number of lines already parsed by the Parser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    static int lineCount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the string into a {@link Task} that can be added into a list of tasks in {@link duke.task.TaskList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the line to be parsed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a task that can be added into a list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws LineInFileParseException if the line cannot be parsed by the \u003ccode\u003eFileLineParser\u003c/code\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Task parse(String line) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        lineCount++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String[] arr \u003d line.split(\",\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            boolean isDone \u003d arr[1].equals(\"true\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            switch (arr[0]) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new Todo(arr[2], isDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new Deadline(arr[2], DateParser.parse(arr[3]), isDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new Event(arr[2], DateParser.parse(arr[3]), isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                throw new LineInFileParseException(lineCount, line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aiobe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new LineInFileParseException(lineCount, line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (InvalidDateTimeException idte) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new LineInFileParseException(lineCount, line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 49
    }
  },
  {
    "path": "src/main/java/duke/parser/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is a parser used to parse individual tasks into a string representation that will be saved into the file path"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * specified in {@link duke.main.Duke} and {@link duke.storage.Storage}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class TaskParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the task into a string to be saved into the storage by encoding each tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be parsed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static String parse(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return task.encode() + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 20
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.LineInFileWriteException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the storage of the Duke Program. The storage is the \u003ccode\u003efilePath\u003c/code\u003e specified in the constructor of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * {@link duke.main.Duke} object. The \u003ccode\u003eStorage\u003c/code\u003e class loads and save the file into a stream of lines for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * easy parsing into the list of tasks. See {@link duke.task.TaskList} for more information."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is a string representation of the file path for storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new storage object using the specified file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param filePath the path to the file for storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Loads the file and return a stream of lines inside the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a stream of lines inside the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws IOException if an I/O error occurs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Stream\u003cString\u003e load() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return reader.lines();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Saves the stream of lines inside the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param stream the stream of lines to be saved into the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws IOException if an I/O error occurs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void save(Stream\u003cString\u003e stream) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        stream.forEach(line -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                writer.write(line);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } catch (IOException io) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Ui().showLineError(new LineInFileWriteException(line).getLineCount(), line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.formatter.DateFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A deadline item is a task with description and the date the deadline task is due by. The deadline item can be"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * created, marked as done or deleted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the date where the deadline task is due by."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new deadline task with description and the date where the deadline task is due by that has not been"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the deadline task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param by the date the task is due by"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.by \u003d DateParser.parse(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new deadline task with description, the date where the deadline task is due by that has not been"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * done and the option to mark it as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the deadline task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param by the date the task is due by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param isDone the done status of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Deadline(String description, Date by, boolean isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Encodes the deadline task to be stored in the storage."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the encoded deadline task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"deadline,\" + super.isDone + \",\" + super.description + \",\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "               + DateFormatter.format(by);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the deadline task. The string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * representation consist of (\"[D]\") with the string representation of the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the deadline task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by:\" + by + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 61
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.formatter.DateFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A event item is a task with description and the date the event will be held at. The event item can be created,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * marked as done or deleted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the date where the event will be held at."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Date at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new event task with description and the date the event will be held at that has not been done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the event task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param at the date the event will be held at"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.at \u003d DateParser.parse(at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new event task with description,the date the event will be held at that has not been done and the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * option to mark it as done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the event task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param at the date the event will be held at"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param isDone the done status of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Event(String description, Date at, boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Encodes the event task to be stored in the storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the encoded event task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"event,\" + super.isDone + \",\" + super.description + \",\" + DateFormatter.format(at);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the event task. The string representation consist of (\"[E]\") with the string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * representation of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the event task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at:\" + at + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 58
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the task item to be added into the list of tasks. The \u003ccode\u003eTask\u003c/code\u003e abstract class provides an"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * abstraction over {@link Todo}, {@link Deadline}, {@link Event} items."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is used to indicate whether the task is done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new task with description that is not done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description for the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new task with description and the option to mark it as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param isDone the done status of the task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Encodes the task to be stored in the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the encoded task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public abstract String encode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Gets the status icon of the done status of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a status icon of the done status of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Checks if the task\u0027s description contain the specified sequence of \u003ccode\u003echar\u003c/code\u003e values in the keyword."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param keyword the specified sequence of \u003ccode\u003echar\u003c/code\u003e values"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if task\u0027s description contains \u003ccode\u003equery\u003c/code\u003e,\u003ccode\u003efalse\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean contains(String keyword) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return description.contains(keyword);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the task. The string representation consist of the status icon with the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * task description."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 78
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.LineInFileParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.FileLineParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.parser.TaskParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.lang.StringBuffer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the list of task items. This supports add, edit, delete operations. When a add, edit or delete operation is"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * to be performed, the \u003ccode\u003eTaskList\u003c/code\u003e class provides an abstraction to support these operations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the list of task items."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new list of tasks from a stream of line. This stream of lines will be parsed by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * {@link FileLineParser} to each individual tasks that will be added individually to form a list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param lines the stream of lines to be parsed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public TaskList(Stream\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        lines.forEach(line -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                taskList.add(FileLineParser.parse(line));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            } catch (LineInFileParseException lifpe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Ui().showLineError(lifpe.getLineCount(), line);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Appends the task to the end of the list of the tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be appended to the list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Removes the task at the specified index from the list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be removed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the task removed to be printed on a user interface."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String delete(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Task task \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        taskList.remove(index - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return task.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Marks the task at the specified index from the list of tasks as done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param index the index of the task to be done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the done task to be be printed on a user interface."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String done(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Task task \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return task.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the number of tasks in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the list of tasks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the list of tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        for (Task task :  taskList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            buffer.append(\"    \" + i + \".\" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return buffer.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Finds all matching tasks with the given keyword."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param keyword the keyword to look out for in tasks\u0027 description"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the list of tasks that match the keyword"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String find(String keyword) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new TaskList(taskList.stream()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .filter(taskDescrptn -\u003e taskDescrptn.contains(keyword))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .map(task -\u003e task.encode())).list();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /** Returns a stream of string to be saved into the {@link duke.storage.Storage}. Each task is parsed using a task"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * parser. See {@link TaskParser} for more information."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a stream of string to be saved into storage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Stream\u003cString\u003e save() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return taskList.stream().map(x -\u003e TaskParser.parse(x));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 119
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A todo item is a task with description. The todo item can be created, marked as done or deleted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new todo task with description that has not been done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the todo task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new todo task with description and the option to mark it as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param description the description of the todo task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param isDone the done status of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Encodes the todo task to be stored in the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the encoded todo task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"todo,\" + super.isDone + \",\" + super.description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a string representation of the todo task. The string representation consist of (\"[T]\") with the string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * representation of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a string representation of the todo task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 43
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * This is the user interface of the Duke program. The Duke program will print information here. The user interface can"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * display the change information, error messages, exit message, list of task, welcome message to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * This is the Scanner object used to read user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a new user interface to display information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Prints a welcome message for the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                      + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                      + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                      + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                      + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    What can I do for you?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /** Prints a error message for the user when an error has occurred."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param message the error message for the error"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String output \u003d \"    ------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        + \"    🙁 OOPS!! \" + message + \" 🙁\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        + \"    ------------------------------------------------------------\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Prints a loading error message for the user. This will occur when Duke is unable to load the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * file path specified in Duke. See {@link duke.main.Duke} for more information."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"* FAILED TO LOAD DATA\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Prints a error message for the user with the constituent line number and the its content."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param lineCount the line number of the error"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param line the contents of the line itself"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showLineError(int lineCount, String line) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"* Unable to parse line \" + lineCount + \" : \" + line);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Reads the command entered by the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return Returns the command entered by the user"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Prints the current tasks in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param list the list of tasks to be printed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showTable(String list) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.print(list);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Prints the results of tasks found in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param list the list of tasks to be printed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showResultsFound(String list) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.print(list);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Prints a message that informs the user that a task has been added into the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task to be added into the list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param size the number of tasks in the list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showAddInformation(String task, int size) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"     ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"     ➕  \" + task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"     Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"     ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Prints a message that informs the user that the task has been marked as done."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task that is marked done"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showMarkedAsDone(String task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"      \" + task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Prints a message that informs the user that the task has been deleted."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param task the task that is deleted"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param size the number of tasks remaining in the list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showDeletedMessage(String task, int size) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    🗑  \" + task);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Prints a exit message for the user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void showExitMessage() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        System.out.println(\"    ------------------------------------------------------------\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 143
    }
  },
  {
    "path": "src/test/java/duke/parser/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidParameterException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(CommandParser.parse(\"todo eat food\").getClass(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                     new AddTodoCommand(\"eat food\").getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(CommandParser.parse(\"list\").getClass(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                     new ListCommand().getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(CommandParser.parse(\"done 2\").getClass(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                     new DoneCommand(\"2\").getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(CommandParser.parse(\"deadline hw /by 31/12/2000 2359\").getClass(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                     new AddDeadlineCommand(\"hw /by 31/12/2000 2359\").getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(CommandParser.parse(\"event bbq /at 25/12/1965 1734\").getClass(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                     new AddEventCommand(\"event bbq /at 25/12/1965 1734\").getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(CommandParser.parse(\"delete 5\").getClass(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                     new DeleteCommand(\"5\").getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(CommandParser.parse(\"bye\").getClass(), new ExitCommand().getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_failed_with_ExceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidCommandException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                CommandParser.parse(\"hello\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                CommandParser.parse(\"todo \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                CommandParser.parse(\"deadline sdfdsf\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                CommandParser.parse(\"deadline meeting /by \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                CommandParser.parse(\"deadline meeting /by 123456789\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"event sdfdsf\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"event meeting /at \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"event meeting /at 123456789\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"delete task\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"done task\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidCommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"helloWorld\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidCommandException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e CommandParser.parse(\"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            () -\u003e  CommandParser.parse(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 66
    }
  },
  {
    "path": "src/test/java/duke/parser/DateParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class DateParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"12/03/2301 1200\").toString(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"12/03/2301 1200\").toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"12/03/2301 2359\").toString(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"12/03/2301 2359\").toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"01/01/0532 1200\").toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"01/01/0532 1200\").toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"01/01/0000 0000\").toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"01/01/0000 0000\").toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(DateParser.parse(\"12/31/9999 2359\").toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         formatter.parse(\"12/31/9999 2359\").toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_fail_with_ExceptionThrow() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class, () -\u003e DateParser.parse(\"233555\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class, () -\u003e DateParser.parse(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class, () -\u003e DateParser.parse(\"11/02/2931\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeException.class, () -\u003e DateParser.parse(\"11/02/2931 test\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e DateParser.parse(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 42
    }
  },
  {
    "path": "src/test/java/duke/parser/FileLineParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.exception.LineInFileParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class FileLineParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(new Todo(\"eat food\").toString(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileLineParser.parse(\"todo,false,eat food\").toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(new Todo(\"eat food\").toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileLineParser.parse(\"todo,false,eat food,null\").toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(new Todo(\"swim\").toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileLineParser.parse(\"todo,false,swim\").toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(new Todo(\"swim\", true).toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileLineParser.parse(\"todo,true,swim\").toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(new Deadline(\"hw\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      new SimpleDateFormat(\"dd/MM/yyyy HHmm\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      .parse(\"15/03/2019 1200\"),false)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         .toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileLineParser.parse(\"deadline,false,hw,15/03/2019 1200\").toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(new Deadline(\"hw\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      new SimpleDateFormat(\"dd/MM/yyyy HHmm\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      .parse(\"01/01/1632 2356\"),false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         .toString(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileLineParser.parse(\"deadline,false,hw,01/01/1632 2356\").toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(new Deadline(\"assignment\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      new SimpleDateFormat(\"dd/MM/yyyy HHmm\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      .parse(\"01/01/1632 2356\"),true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         .toString(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileLineParser.parse(\"deadline,true,assignment,01/01/1632 2356\").toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(new Event(\"meeting\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                   new SimpleDateFormat(\"dd/MM/yyyy HHmm\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                   .parse(\"23/04/2031 1853\"),true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         .toString(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileLineParser.parse(\"event,true,meeting,23/04/2031 1853\").toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(new Event(\"meeting\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                   new SimpleDateFormat(\"dd/MM/yyyy HHmm\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                   .parse(\"23/04/2031 1853\"),true)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         .toString(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         FileLineParser.parse(\"event,true,meeting,23/04/2031 1853\").toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (Exception pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_with_ExceptionThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(LineInFileParseException.class, () -\u003e FileLineParser.parse(\"deadline,\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(LineInFileParseException.class, () -\u003e FileLineParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                                      .parse(\"event,true,meeting, 1834233\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(LineInFileParseException.class, () -\u003e FileLineParser.parse(\"thisisainvalidargument\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(LineInFileParseException.class, () -\u003e FileLineParser.parse(\"event,sdfsdfgdfsgdf\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(LineInFileParseException.class, () -\u003e FileLineParser.parse(\"deadline,wasdwasdwasd\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(LineInFileParseException.class, () -\u003e FileLineParser.parse(\"\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e FileLineParser.parse(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 71
    }
  },
  {
    "path": "src/test/java/duke/parser/TaskParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class TaskParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskParser.parse(new Todo(\"eat food\")), \"todo,false,eat food\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskParser.parse(new Todo(\"eat food\", true)),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         \"todo,true,eat food\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskParser.parse(new Deadline(\"meeting\", format.parse(\"10/10/2003 1100\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                       false)), \"deadline,false,meeting,10/10/2003 1100\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskParser.parse(new Deadline(\"meeting\", format.parse(\"10/10/2003 1100\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                       true)),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         \"deadline,true,meeting,10/10/2003 1100\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskParser.parse(new Event(\"dinner\", format.parse(\"23/04/2008 1023\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                    true)), \"event,true,dinner,23/04/2008 1023\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(TaskParser.parse(new Event(\"dinner\", format.parse(\"23/04/2008 1023\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                    false)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                         \"event,false,dinner,23/04/2008 1023\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 37
    }
  }
]
