[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    mainClassName \u003d \"duke.Duke\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 19,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 100
    }
  },
  {
    "path": "src/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "T | 1 |  work"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "T | 0 |  read"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 2
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class is the main class of the program. It helps users to help track their Duke.tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * by creating a task list for them when users key in the respective input. The task list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * is then automatically saved into a txt file which allows the users to view and keep track."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Duke extends Application{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprivate Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprivate TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprivate Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprivate ScrollPane scrollPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprivate VBox dialogContainer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprivate TextField userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprivate Button sendButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprivate Scene scene;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Loads the stored txt file of Duke.tasks into the program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param filePath filepath of the txt file stored"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic Duke(String filePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tui \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tstorage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\ttasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tui.showError(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(\"File not found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tApplication.launch(Duke.class, args);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tnew Duke(\"/users/junhup/desktop/duke/src/duke.txt\").run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Main method of the entire program. Runs the program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void run() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tui.showWelcome();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tboolean isExit \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\twhile (!isExit) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tCommand c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tc.execute(tasks, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tisExit \u003d c.isExit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tui.showError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void start(Stage stage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t//Step 1. Setting up required components"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t//The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tscrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tdialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tscrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tuserInput \u003d new TextField();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tsendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tAnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tmainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tscene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tstage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tstage.setResizable(false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tstage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tstage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tmainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tscrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tscrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tscrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tscrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tscrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t// You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tdialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tuserInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tsendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tAnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tAnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tAnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tAnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tAnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tstage.setScene(scene);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tstage.show();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t// more code to be added here later"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhuplim": 132
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//\tpublic static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//\t\tApplication.launch(Duke.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//\t}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 9
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.Parser class deals with making sense of the user Duke.command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * A static method that parse the input Duke.command given by the user and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * deals with the Duke.command respectively."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param fullCommand makes sense of the input given by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return a Command which will then be executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tif (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\treturn new ListCommand(fullCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (fullCommand.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\treturn new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (fullCommand.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\treturn new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (fullCommand.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\treturn new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\treturn new ByeCommand(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\treturn new AddCommand(fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 38
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.Storage class deals with loading Duke.tasks from the file and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * saving Duke.tasks into the file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprotected String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param filePath the path of the file that is used to load and save the task into."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws IOException if the required filePath cannot be found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tthis.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method loads the saved Duke.tasks list from the saved file into the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return the array list of Duke.tasks that keep tracks of the Duke.tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn this.readStored();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method stores the to do task keyed in by the user into the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input the description of the to do task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws EmptyDescriptionException if the description is empty for the to do task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void storeTodo(String input) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tBufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath, true));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tif (!input.substring(4).isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString description \u003d input.substring(4);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tTodo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.write(\"T | 0 | \" + description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.newLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.flush();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tthrow new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method stores the deadline task keyed in by the user into the file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input the description of the deadline task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws EmptyDescriptionException   if the description is empty for the deadline task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws InvalidDescriptionException if the format of the deadline keyed in by the user is wrong."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws ParseException              if the date format for the deadline keyed in by the user is wrong."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void storeDeadline(String input) throws EmptyDescriptionException, InvalidDescriptionException, ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tFileWriter fw \u003d new FileWriter(this.filePath, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tBufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tif (input.contains(\"/by\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tint index \u003d input.lastIndexOf(\"/by\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString description \u003d input.substring(8, index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString by \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tDate byDeadline \u003d convertStringToDate(by);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (description.isBlank()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tthrow new EmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (by.isBlank()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tthrow new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tDeadline deadline \u003d new Deadline(description, byDeadline);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.write(\"D | 0 | \" + description + \" | \" + by);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.newLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.flush();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tthrow new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method stores the event task keyed in by the user into the file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input the description of the event task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws EmptyDescriptionException   if the description is empty for the event task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws InvalidDescriptionException if the format of the event keyed in by the user is wrong."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws ParseException              if the date format for the event keyed in by the user is wrong."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void storeEvent(String input) throws EmptyDescriptionException, InvalidDescriptionException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tif (input.contains(\"/at\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tBufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath, true));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tint index \u003d input.lastIndexOf(\"/at\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString description \u003d input.substring(5, index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString at \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tDate atEvent \u003d convertStringToDate(at);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (description.isBlank()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tthrow new EmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (at.isBlank()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tthrow new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tEvent event \u003d new Event(description, atEvent);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.write(\"E | 0 | \" + description + \" | \" + at);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.newLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.flush();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tthrow new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(e.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method deletes the task as requested by the user input in the file. It rewrites"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * everything from the saved file and writes from the updated task list in the program."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input the Duke.command given by the user input which includes the index of the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *              array list that user wants to delete."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void updateDelete(String input) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tBufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tString[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tint index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tString line \u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tint count \u003d 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tArrayList\u003cString\u003e stored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\twhile ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (count \u003d\u003d index) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tcount++;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tcount++;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tstored.add(line);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tbr.close();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tBufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tfor (String s : stored) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.write(s);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.newLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tbw.flush();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tbw.close();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\te.getMessage();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method completes the task as requested by the user input in the file. It rewrites"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * everything from the saved file and writes from the updated task list in the program."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input the Duke.command given by the user input which includes the index of the"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *              array list that user wants to complete."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void updateComplete(String input) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tBufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tString[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tint index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tString line \u003d null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tint count \u003d 0;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tArrayList\u003cString\u003e stored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\twhile ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (count \u003d\u003d index) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tcount++;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tline \u003d line.replaceFirst(\"0\", \"1\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tstored.add(line);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tcount++;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tstored.add(line);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tbr.close();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tBufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tfor (String s : stored) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.write(s);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tbw.newLine();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tbw.flush();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tbw.close();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\te.getMessage();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method reads the Duke.tasks that has been saved in the file and load the Duke.tasks into the program."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return a array list of Duke.tasks."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e readStored() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tthis.readData(tasks);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (ParseException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(\"Please write your deadline/event date in this format: dd/MM/yyyy HH:mm, example: \" + \"02/08/2019 14:30\\n\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn tasks;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method works together with readStored() method and makes sense of the data stored in the saved file"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * and load the Duke.tasks into the program."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasksList the task list to store the Duke.tasks from the saved file."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws ParseException if the data from the saved file does not follow a certain format."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void readData(ArrayList\u003cTask\u003e tasksList) throws ParseException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tString inputLine \u003d null;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tBufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\twhile ((inputLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tSystem.out.println(inputLine);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString[] input \u003d inputLine.split(Pattern.quote(\" | \"));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString typeOfTasks \u003d input[0];"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (typeOfTasks.equals(\"T\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\taddStoredTodo(input, tasksList);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t} else if (typeOfTasks.equals(\"D\")) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\taddStoredDeadline(input, tasksList);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\taddStoredEvent(input, tasksList);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(e.getMessage());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method adds the saved to do task from the file into the program task list."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input     description of the to do task."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasksList task list in which the to do task will be added into."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void addStoredTodo(String[] input, ArrayList\u003cTask\u003e tasksList) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tTodo todo \u003d new Todo(input[2]);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tif (Integer.parseInt(input[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\ttodo.complete();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttasksList.add(todo);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method adds the saved deadline task from the file into the program task list."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input     description and deadline date of the deadline task."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasksList task list in which the deadline task will be added into."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws ParseException if saved data does not follow the required format."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void addStoredDeadline(String[] input, ArrayList\u003cTask\u003e tasksList) throws ParseException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tDeadline deadline \u003d new Deadline(input[2], convertStringToDate(input[3]));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tif (Integer.parseInt(input[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tdeadline.complete();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttasksList.add(deadline);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method adds the saved event task from the file into the program task list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input     description and event date of the event task."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasksList task list in which the event task will be added into."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws ParseException if saved data does not follow the required format."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void addStoredEvent(String[] input, ArrayList\u003cTask\u003e tasksList) throws ParseException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tEvent event \u003d new Event(input[2], convertStringToDate(input[3]));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tif (Integer.parseInt(input[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tevent.complete();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttasksList.add(event);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Method which converts the user input date into a Date instead of a String value."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input a string input to be converted into the date following a fixed format."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return Date value which has been converted from a string."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws ParseException if user did not key in the date as the requested format."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic Date convertStringToDate(String input) throws ParseException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tDate result \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(input);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn result;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 312
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.TaskList class contains the task list, and has operations to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * add/delete the Duke.tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprotected static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasks an array list of Duke.tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws DukeException which includes any exceptions when operating on the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic TaskList(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tthis.tasks \u003d tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method retrieves the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return the array list of Duke.tasks that keep tracks of the Duke.tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn this.tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Add the to do task into the task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input description of the to do task to be added into the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void addTodo(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tif (!input.substring(4).isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString description \u003d input.substring(4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tTodo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\ttasks.add(todo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tprintOut(todo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tthrow new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Add the deadline task into the task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input description of the deadline task together with the deadline date to be added into the task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void addDeadline(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tif (input.contains(\"/by\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tint index \u003d input.lastIndexOf(\"/by\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString description \u003d input.substring(8, index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString by \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tDate byDeadline \u003d convertStringToDate(by);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (description.isBlank()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tthrow new EmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (by.isBlank()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tthrow new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tDeadline deadline \u003d new Deadline(description, byDeadline);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\ttasks.add(deadline);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tprintOut(deadline);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tthrow new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Add the event task into the task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input description of the event task together with the event date to be added into the task list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void addEvent(String input) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tif (input.contains(\"/at\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tint index \u003d input.lastIndexOf(\"/at\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString description \u003d input.substring(5, index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tString at \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tDate atEvent \u003d convertStringToDate(at);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (description.isBlank()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tthrow new EmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tif (at.isBlank()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t\tthrow new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tEvent event \u003d new Event(description, atEvent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\ttasks.add(event);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tprintOut(event);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tthrow new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Deletes the task as requested by the user input and removes this task from the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * task list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input Duke.command of the user input which includes the index of the task that"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *              user wants to delete."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void deleteTask(String input) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tString[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tint index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tTask removedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(removedTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Completes the task as requested by the user input."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input Duke.command of the user input which includes the index of the task that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *              user wants to complete"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void completeTask(String input) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tString[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tint index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttasks.get(index).complete();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(tasks.get(index));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Find the task according to the keyword given by the user input."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input Duke.command of the user input which includes the keyword that the user wants to find."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void findTask(String input) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tString keyword \u003d input.substring(5);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tArrayList\u003cTask\u003e filtered \u003d copy(this.tasks);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(\"Here are the matching tasks in your list.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tfiltered.stream().filter(p -\u003e p.getDescription().contains(keyword)).forEach(System.out::println);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method copies the content of an array list to another independent array list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasks the source of content in which will be copied to the other array list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return an array list which has the copied content."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e copy(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tArrayList\u003cTask\u003e duplicate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tduplicate.add(tasks.get(i));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn duplicate;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Static method which prints out the addition of task message each time"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * a task is successfully added into the task list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param task that has been successfully added into the task list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic static void printOut(Task task) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(task);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Static method which converts the user input date into a Date instead of a String value."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param input a string input to be converted into the date following a fixed format."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return Date value which has been converted from a string."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws ParseException if user did not key in the date as the requested format."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic static Date convertStringToDate(String input) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tDate result \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(input);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn result;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 199
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.Ui class deals with the interactions with the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method prints the welcome message for the user when they first"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * enter the program. It is always shown to signal the start of the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void showWelcome() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(\"Hello! I\u0027m Duke.Duke \\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method reads the input by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return string input as keyed in by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic String readCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tScanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tString input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn input;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * This method prints the error message accordingly to the different exceptions."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param Exception e and handles the exceptions accordingly."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void showError(Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tif (e instanceof InvalidInputException) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (e instanceof EmptyDescriptionException) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(String.format(\"OOPS!!! The description of a %s cannot be empty.\", e.getMessage()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (e instanceof InvalidDescriptionException) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(String.format(\"OOPS!!! Invalid input! Make sure your %s has a description and required\" + \" data after /at for Event or /by for Deadline.\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (e instanceof ParseException) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(String.format(\"Please write your deadline/event date in this format: dd/MM/yyyy HH:mm,\" + \" example: 02/08/2019 14:30\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 58
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * AddCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles any addition of Duke.tasks into the Duke.TaskList class and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * subsequently updating the txt file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprotected String command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param command Duke.command to add task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic AddCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tthis.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Adds the Duke.tasks requested by the user into Duke.TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Update the txt file by adding the respective task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tif (command.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tSystem.out.println(\"in\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\ttasks.addTodo(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tstorage.storeTodo(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} else if (command.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\ttasks.addDeadline(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tstorage.storeDeadline(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} else if (command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\ttasks.addEvent(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tstorage.storeEvent(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t\tthrow new InvalidInputException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\thandleException(e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * AddCommand does not exit program."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return False as this Duke.command does not end the program."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 60
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * ByeCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles the exit of the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprotected String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param command Duke.command to exit the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic ByeCommand(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tthis.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Prints the goodbye message to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tSystem.out.println(\"BYE! See you again next time!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * ByeCommand exits the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return True as this Duke.command end the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 41
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * An abstract Command class with abstract method execute and isExit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This Command class handles the Duke.command given by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Abstract method that is the main function of the Command class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Respective subclass of Command (classes which inherits from Command) will have this execute"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * function based on their Duke.command, and carry out the respective task as per the Duke.command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws EmptyDescriptionException   if input does not contain description for the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws InvalidInputException       if input does not qualify for any of the functions in the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws InvalidDescriptionException if input does not follow the required format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @throws IOException                 if storage file for tracking the Duke.TaskList is not found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic abstract void execute(TaskList tasks, Storage storage) throws EmptyDescriptionException, InvalidInputException, InvalidDescriptionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Abstract method that is most applicable to specifically the ByeCommand Class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return boolean value which decides whether the app will be exiting."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic abstract boolean isExit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Handles the Duke.exception thrown by respective Command execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Takes care of InvalidInputException, EmptyDescriptionException, InvalidDescriptionException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Parse Exception and other unhandled Exceptions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param e Exception thrown when user input is wrong."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic static void handleException(Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tif (e instanceof InvalidInputException) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (e instanceof EmptyDescriptionException) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(String.format(\"OOPS!!! The description of a %s cannot be empty.\", e.getMessage()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (e instanceof InvalidDescriptionException) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(String.format(\"OOPS!!! Invalid input! Make sure your %s has a description and required\" + \" data after /at for Event or /by for Deadline.\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else if (e instanceof ParseException) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(String.format(\"Please write your deadline/event date in this format: dd/MM/yyyy HH:mm,\" + \" example: 02/08/2019 14:30\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 59
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * DeleteCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles the deletion of Duke.tasks, and subsequent updating"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * the txt file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprotected String command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param command Duke.command to delete task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic DeleteCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tthis.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Deletes the task requested by the user from the Duke.TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Update the txt file by removing the respective task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttasks.deleteTask(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tstorage.updateDelete(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * AddCommand does not exit program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return False as this Duke.command does not end the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 44
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * DoneCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles the completion of Duke.tasks, and subsequent updating"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * the txt file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprotected String command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param command Duke.command to complete task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic DoneCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tthis.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Completes the task requested by the user from the Duke.TaskList by marking them as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Update the txt file by marking the respective task as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttasks.completeTask(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tstorage.updateComplete(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * DoneCommand does not exit program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return False as this Duke.command does not end the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 44
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic String command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic FindCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tthis.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void execute(TaskList tasks, Storage storage) throws EmptyDescriptionException, InvalidInputException, InvalidDescriptionException, IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttasks.findTask(this.command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 27
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * ListCommand class which extends the abstract class Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * This class handles the printing of all Duke.tasks in the Duke.TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tprotected String command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param command Duke.command to show all the Duke.tasks in Duke.TaskList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic ListCommand(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tthis.command \u003d command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Method that overrides the abstract method in Command class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Prints all the task from the Duke.TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param tasks   ArrayList of Tasks that keep tracks of the Tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param storage Handles the reading and writing of the txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tArrayList\u003cTask\u003e tasksList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c tasksList.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t\tSystem.out.println(tasksList.get(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * ListCommand does not exit program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @return False as this Duke.command does not end the program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 47
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * DukeException class handles all the Duke.exception that can be thrown by the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param message message to be tagged to the Duke.exception."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//import main.java.Duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * EmptyDescriptionException class extends DukeException and deals with"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.tasks without any description given by the input in the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class EmptyDescriptionException extends DukeException{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param message message to be tagged to the Duke.exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public EmptyDescriptionException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//import duke.Duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * InvalidDescriptionException class extends DukeException and deals with"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Duke.tasks with the wrong description given by the input in the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class InvalidDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * Class constructor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t * @param message message to be tagged to the Duke.exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic InvalidDescriptionException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tsuper(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "//import duke.Duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * InvalidInputException class extends DukeException and deals with"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * any random inputs that is not within the function of the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public InvalidInputException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param message message to be tagged to the Duke.exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 21
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Deadline class that can be created by the user. Handles all Duke.tasks with deadlines."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected SimpleDateFormat format \u003d new SimpleDateFormat();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param description details of the respective task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param by deadline date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the deadline with the status, the description and the deadline date together."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        format \u003d new SimpleDateFormat(\"EEEE, MMM d, HH:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + format.format(by) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 33
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Event class that can be created by the user. Handles all Duke.tasks with events."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected SimpleDateFormat format \u003d new SimpleDateFormat();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param description details of the respective task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param at event date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the event with the status, the description and the event date together."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        format \u003d new SimpleDateFormat(\"EEEE, MMM d, HH:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + format.format(at) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhuplim": 34
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * Task class includes Todo, Deadline and Event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * It is the task that is tracked by the Duke.TaskList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param description details of the respective Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Returns the status of the task - 1 for completed and 0 for not completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @return the status of the task - whether it is completed or not."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return (isDone ? \"[1]\" : \"[0]\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Method that completes the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the task with the status and the description together."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.getStatusIcon() + this.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 47
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " * To do class that can be created by the user. Handles all Duke.tasks with To do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Class constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * @param description details of the respective task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     * Prints the to do task with the status and the description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 24
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import main.java.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void toStringTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tTask task \u003d new Task(\"homework\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\ttask.complete();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tassertEquals(task.toString(), \"[1]homework\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 12
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import main.java.tasks.Todo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\tpublic void toStringTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tTodo todo \u003d new Todo(\"work\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t\tassertEquals(todo.toString(), \"[T][0]work\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhuplim": 12
    }
  }
]
