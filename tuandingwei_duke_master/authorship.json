[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "run {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 29,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 17,
      "-": 83
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "rootProject.name \u003d \u0027src\u0027"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates a Task object of the type Deadline."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Represents a Deadline task that has specific due date/ due time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    protected Date endDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs a new Deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param description This is the short description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param endDate This specifies when the Deadline Task expires."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *                It should include the due date or due time or both."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *                The format should follow \"by: Day Time\"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *                E.g. by: Sunday 5pm / by: 11/10/2019 3pm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *                Alternatively, the user has"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *                the freedom to specify their own duration of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *                the event such as \"by no idea :-P\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Deadline(String description, Date endDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.typeOfTask \u003d \"D\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Getter function that returns the due date of the deadline"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * in the format of a String."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return The due date of the deadline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String getDueInString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return format.format(endDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Convert Deadline object to String format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return The String interpretation of the Deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String statusIcon \u003d this.getStatusIcon();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return (\"[\" + typeOfTask + \"]\" + \"[\" + statusIcon + \"] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + description + \"(by: \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + format.format(endDate) + \")\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 51
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Entry point of this project Duke. Duke is a Task manager that aims"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * to serve as an efficient way to manage our day to day tasks. It supports multiple types of task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * such as todo reminders, tasks with a deadline and even an event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * The Duke task manager has many iterations, it is"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * continuously evolving and becoming smarter to cater to it users\u0027 needs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * @author TuanDingWei"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "//    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "//    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "//    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "//    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Construct a Duke object, the Task manager bot."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        storage \u003d new Storage(\"/Users/TuanDingWei/Desktop/NUS_Academia\" + \"/CS2103/Individual_project/Duke/local/Tasks.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Contains most of the operations of the Task Manager bot."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    protected void run() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String filePath \u003d \"/Users/TuanDingWei/Desktop/NUS_Academia\" + \"/CS2103/Individual_project/Duke/local/Tasks.txt\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String check \u003d \"dummy\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        int taskCount;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        while (check.equals(\"bye\") \u003d\u003d false) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                check \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                if (check.equals(\"list\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    ui.showListOfTask(tasks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                Parser parser \u003d new Parser(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                String userCommand \u003d parser.getUserCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                String due \u003d parser.getDue();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                String taskDescription \u003d parser.getTaskDescription();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                if (userCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    int target \u003d Integer.valueOf(taskDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    Task taskDone;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    if (tasks.size() \u003e\u003d target \u0026\u0026 target \u003e 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        taskDone \u003d tasks.get(target - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        throw new IndexDoesNotExistException(taskDescription + \" is out of the list.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    taskDone.markAsDone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    storage.updateLocalFile(tasks.get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    ui.doneAnnouncement(taskDone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                } else if (userCommand.equals(\"find\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    tasks.keywordSearch(taskDescription);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                } else if (userCommand.equals(\"delete\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    int target \u003d Integer.valueOf(taskDescription);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    Task taskDelete;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    if (tasks.size() \u003e\u003d target \u0026\u0026 target \u003e 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        taskDelete \u003d tasks.get((target - 1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        tasks.removeTask((target - 1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        throw new IndexDoesNotExistException(taskDescription + \" is out of the list.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    Task.reduceTaskCount();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    storage.updateLocalFile(tasks.get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    taskCount \u003d Task.getTaskCount();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    ui.deleteAnnouncement(taskDelete, taskCount);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                } else if (!check.equals(\"bye\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    System.out.print(createTask(userCommand, due, taskDescription, storage, ui, tasks));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                System.out.println(\"OOPS!!! \" + ex.getMessage() + \"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        ui.sayYourGoodBye();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Converts user input in the form of String to the format of Date."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * The Task Manager has the ability to read dates instead of taking dates as String."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param input The date/ time input in the form of String. It should follow either dd/MM/yyyy HHmm or HHmm format."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return Date format of the input String."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    private static Date convertStringToDate(String input) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            if (input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                SimpleDateFormat formatTimeOnly \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                date \u003d formatTimeOnly.parse(input.trim());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                date \u003d format.parse(input);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Performs the operation of creating a Task (Todo, Deadline, Task)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * It also writes the list of tasks to the local storage."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param userCommand     Indicates the instruction (done, delete, etc) to the bot."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param due             Provides the due date/ time of the task."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param taskDescription Reflects the description of a task."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param storage         The local storage for the Tasks as a Storage object."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param ui              The User Interface object that performs all interactions with the user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param tasks           The list of Task that are temporary stored with the bot."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return Gives a feedback to the user on the operation has performed after a command is given."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @throws EmptyToDoDescriptionException Indicates an empty description that should not be left empty for Todo."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @throws EmptyDescriptionException     Indicates an empty description that should not be left empty."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @throws UnknownCommandException       Indicates the inability of the bot to read the command that is given by the user."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public static String createTask(String userCommand, String due, String taskDescription, Storage storage, Ui ui, TaskList tasks) throws EmptyToDoDescriptionException, EmptyDescriptionException, UnknownCommandException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String typeOfTask \u003d \"\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        if (userCommand.equals(\"todo\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            if (taskDescription.equals(\"dummy\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                throw new EmptyToDoDescriptionException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            t \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            typeOfTask \u003d \"T\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            storage.writeToFile(typeOfTask, \"0\", taskDescription, t);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } else if (userCommand.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            Date dateDue \u003d convertStringToDate(due);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            if (taskDescription.equals(\"dummy\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                throw new EmptyDescriptionException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            t \u003d new Deadline(taskDescription, dateDue);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            typeOfTask \u003d \"D\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            storage.writeToFile(typeOfTask, \"0\", taskDescription, t);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } else if (userCommand.equals(\"event\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            String[] eventStartEnd \u003d due.split(\"-\", 2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            Date start \u003d convertStringToDate(eventStartEnd[0]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            Date end \u003d convertStringToDate(eventStartEnd[1]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            if (taskDescription.equals(\"dummy\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                throw new EmptyDescriptionException(\"The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            t \u003d new Event(taskDescription, start, end);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            typeOfTask \u003d \"E\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            storage.writeToFile(typeOfTask, \"0\", taskDescription, t);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            throw new UnknownCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        int taskCount \u003d Task.getTaskCount();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return ui.newTaskAdded(t, taskCount);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 195,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates exceptions that are for the Duke Task manager."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * It handles user\u0027s input error. The class provides extenstion to other Duke specific exception classes."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs a DukeException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param message This contains the message of the error."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *                The message of the error will be shown to the user when thrown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates exception that will be thrown when Todo description is empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "class EmptyToDoDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs a new exception that takes in a message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * This message should be specific to warn the user that Todo description should not be empty."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param message This is the message that will be displayed users to advise them to add a description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public EmptyToDoDescriptionException(String message) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates exception that will be thrown when the command from the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * is unregistered / unknown to the bot."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs a new exception that takes in a message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * This message should be specific to warn the user that the command is unknown to the bot."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * A registered command should be used instead."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param message This is the message that will be displayed users to advise them to use an appropriate command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public UnknownCommandException(String message) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates exception that will be thrown when the description is empty."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs a new exception that takes in a message."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * This message should be specific to warn the user that description should not be empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param message This is the message that will be displayed users to advise them to add a description."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public EmptyDescriptionException(String message) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates exception that will be thrown when the due date is empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "class EmptyDueDateException extends DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs a new exception that takes in a message."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * This message should be specific to warn the user that a due date should be specified."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param message This is the message that will be displayed users to advise them to add a due date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public EmptyDueDateException(String message) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates exception that will be thrown when the index specified by the user"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * is not within the perimeter of the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "class IndexDoesNotExistException extends DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs a new exception that takes in a message."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * This message should be specific to warn the user that the index used is not within the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param message This is the message that will be displayed users to advise them to use an"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *                index that is within the perimeter of the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public IndexDoesNotExistException(String message) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 95
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates an Task object of the type Event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Represents a Event task that has a specific duration."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    protected Date start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    protected Date end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs an Event object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param description This is the short description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param start This represents the start of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param end This represents the end time of the event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Event(String description, Date start, Date end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.typeOfTask \u003d \"E\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Getter function that returns the due date of the Event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * in the format of a String."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return The due date of the deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String getDueInString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        SimpleDateFormat startFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        SimpleDateFormat endFormat \u003d new SimpleDateFormat(\" - HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return startFormat.format(start) + endFormat.format(end);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Convert Event object to String format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return The String format of the Event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String statusIcon \u003d this.getStatusIcon();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        SimpleDateFormat startFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        SimpleDateFormat endFormat \u003d new SimpleDateFormat(\" - HHmm\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return (\"[\" + typeOfTask + \"]\" + \"[\" + statusIcon + \"] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + description + \"(at: \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + startFormat.format(start) + endFormat.format(end) + \")\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 52
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 11
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates the Parser object that is responsible of interpreting user commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    String userCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    String due;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    String taskDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs the Parser object and performs the interpretation of user commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param input This is the input String of the user command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Parser(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String[] dueSplit \u003d input.split(\"/\", 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String due \u003d \"dummy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        if (dueSplit.length \u003e 1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            due \u003d dueSplit[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String[] doneMarkers \u003d dueSplit[0].split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String userCommand \u003d doneMarkers[0].toLowerCase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String taskDescription \u003d \"dummy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        if (doneMarkers.length \u003e 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            taskDescription \u003d doneMarkers[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.userCommand \u003d userCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.due \u003d due;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return userCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String getDue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return due;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 43
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates the Storage object that is responsible of writing existing Tasks to the local storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs the Storage object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param filePath Provides the filepath to the local text file as the local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        ArrayList\u003cTask\u003e taskStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                String storedLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                String[] analyseHolder \u003d storedLine.split(\", \", 4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                String type \u003d analyseHolder[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                String isDone \u003d analyseHolder[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                String description \u003d analyseHolder[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                Date due \u003d new Date();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                Date start \u003d new Date();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                Date end \u003d new Date();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                if (analyseHolder.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    String[] timeSplit \u003d analyseHolder[3].split(\"-\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    if (timeSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        SimpleDateFormat startFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        SimpleDateFormat endFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        start \u003d startFormat.parse(timeSplit[0].trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        end \u003d endFormat.parse(timeSplit[1].trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        due \u003d convertStringToDate(analyseHolder[3]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                Task task \u003d new Task(\"dummy\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                Task.reduceTaskCount();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    task \u003d new Todo(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    task \u003d new Deadline(description, due);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    task \u003d new Event(description, start, end);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                taskStorage.add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            System.out.println(\"The local file cannot be located. \" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    \"Please ensure that the local text file \" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    \"that stores all existing tasks is in the right folder. \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            System.out.println(\"There is something wrong with the format of the file text. \" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    \"There might be necessary lines between tasks.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "//            System.out.println(\"There seems to be an error in the format of the date.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return taskStorage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Converts user input in the form of String to the format of Date."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * The Task Manager has the ability to read dates instead of taking dates as String."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param input The date/ time input in the form of String. It should follow either dd/MM/yyyy HHmm or HHmm format."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return Date format of the input String."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    private static Date convertStringToDate(String input) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            if (input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                SimpleDateFormat formatTimeOnly \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                date \u003d formatTimeOnly.parse(input.trim());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                date \u003d format.parse(input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void updateLocalFile(ArrayList\u003cTask\u003e taskStorage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            String textToAdd \u003d new String();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            String taskType;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            Boolean isDone;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            String isDoneRepresented \u003d \"0\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            for (Task task : taskStorage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                taskType \u003d task.getTypeOfTask();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                description \u003d task.getDescription();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                isDone \u003d task.isDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    isDoneRepresented \u003d \"1\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    textToAdd \u003d taskType + \", \" + isDoneRepresented + \", \" + description + System.lineSeparator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    textToAdd \u003d taskType + \", \" + isDoneRepresented + \", \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                            + description + \", \" + ((Deadline) task).getDueInString() + System.lineSeparator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    textToAdd \u003d taskType + \", \" + isDoneRepresented + \", \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                            + description + \", \" + ((Event) task).getDueInString() + System.lineSeparator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                fw.write(textToAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Write to a specified text file that is locally saved."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param taskType Contains the type of the task that is going to be written."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param isDone Contains the information of whether the task is done."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param description Contains the description of the task that is going to be written."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void writeToFile(String taskType,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                                    String isDone, String description, Task task) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            String textToAdd \u003d new String();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                textToAdd \u003d taskType + \", \" + isDone + \", \" + description + System.lineSeparator();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            } else if (task instanceof Deadline){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                textToAdd \u003d taskType + \", \" + isDone + \", \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        + description + \", \" + ((Deadline) task).getDueInString() + System.lineSeparator();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                textToAdd \u003d taskType + \", \" + isDone + \", \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                        + description + \", \" + ((Event) task).getDueInString() + System.lineSeparator();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            fw.write(textToAdd);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Clear all data written in the local text file."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            FileWriter fwOb \u003d new FileWriter(filePath, false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            PrintWriter pwOb \u003d new PrintWriter(fwOb, false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            pwOb.flush();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            pwOb.close();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            fwOb.close();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            System.out.println(\"There seems to be a problem clearing this file.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 184
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates the Task object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * The Task object includes its own description"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * as well as if any of the object instantiated is done or uncompleted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Also, it keep tracks of a counter of all Task objects that are instantiated."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * The Task object provides the extension to other children classes such as Todo, Deadline and Event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    String typeOfTask \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    protected static int taskCount \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs a Task object with a specific description of a task that has to be completed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param description This is a brief description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        if (!description.equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            taskCount +\u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Returns the status of the Task with a tick or cross icon if the task is done or incomplete respectively."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return a tick or cross icon"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Marks the Task object as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Returns the number of Task objects that exist. This is a getter method."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return the number of Task objects that have been created."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public static int getTaskCount() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return taskCount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Performs the reduction of the number of Task that has been created by 1. This is method is"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * needed when a Task is destroyed and the Task counter has to be updated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public static void reduceTaskCount() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        taskCount -\u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Get the type of task. This is a getter method."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return The type of task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String getTypeOfTask() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return this.typeOfTask;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Provides the description of the task. This is a getter."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return The description of the task object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Checks if the task is completed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return Boolean that indicates if the task is done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Boolean isDone() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Convert to standard string format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return a message that reflects the type and description of the Task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String statusIcon \u003d this.getStatusIcon();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return (\"[\" + typeOfTask + \"]\" + \"[\" + statusIcon + \"] \" + description);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 96
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates the TaskList object that is responsible of maintaining a temporary list of existing"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * task. The list of task can be subjected to edits."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    ArrayList\u003cTask\u003e taskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs the TaskList object. A list of task can be fed to this constructor to build a list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * of existing tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param listOfTask A list of tasks is going to be maintained by TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e listOfTask) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.taskStorage \u003d listOfTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /** Constructs the TaskList object. By default, this constructor builds an empty list of tasks. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.taskStorage \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Provides the Task at the position specified."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param pos Indicates the position to get."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return The Task that is held at the position specified in the TaksList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Task get(int pos) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return taskStorage.get(pos);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Provides the entire TaskList in the form of an ArrayList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return The list of existing tasks currently held in the TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public ArrayList\u003cTask\u003e get() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return taskStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Provides the number of Tasks that are held in the TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @return The number of existing tasks in the TaskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        return taskStorage.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Adds a Task to the existing list of tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param task The task that will be added to the existing TaskList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        taskStorage.add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Removes task from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param index The index of task that the user wishes to delete."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        taskStorage.remove(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void keywordSearch(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        for (Task task : taskStorage) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            String[] subject \u003d description.split(\" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            for (String word : subject) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                if (word.equals(input)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    result.add(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        ui.announceMatchingTask(result);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 88
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates a Task object of the type Todo."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Represents a Todo task that has NO due date/ time imposed."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * Constructs a Todo object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     * @param description This is the short description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        this.typeOfTask \u003d \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates the User Interface operations. It is responsible of all interaction with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println(\"Hello I am\\n\" + logo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void showListOfTask(TaskList tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            Task evaluatingTask \u003d tasks.get(i - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            System.out.println(i + \".\" + evaluatingTask.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public String newTaskAdded(Task task, int taskCount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        if (taskCount \u003e 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            return (\"Got it. I\u0027ve added this task:\\n\" + \"    \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    + task + \"\\n\" + \"Now you have \" + taskCount"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            return (\"Got it. I\u0027ve added this task:\\n\" + \"    \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    + task + \"\\n\" + \"Now you have \" + taskCount"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    + \" task in the list.\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void sayYourGoodBye() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void doneAnnouncement(Task task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \" + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + \"    \" + task + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void deleteAnnouncement(Task task, int taskCount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\" + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + \"    \" + task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println(taskCounter(taskCount) + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    private String taskCounter(int taskCount) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        if (taskCount \u003e 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            return (\"Now you have \" + taskCount"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    + \" tasks in the list.\" + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            return (\"Now you have \" + taskCount"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                    + \" task in the list.\" + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void announceMatchingTask(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            Task evaluatingTask \u003d taskList.get(i - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            System.out.println(i + \".\" + evaluatingTask.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 77
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates an DeadlineTest object that contains the operation to test the createTask operation"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * in creating a correct Deadline task. It includes storing the Deadline object in a temporary list and the local storage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void deadlineTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String correct \u003d \"Got it. I\u0027ve added this task:\\n\" + \"    \" + \"[D][\" + \"\\u2718\" + \"] Individual Project (by: 03/09/2019 2359)\\n\" + \"Now you have 1 task in the list.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String testFilePath \u003d \"/Users/TuanDingWei/Desktop/NUS_Academia\" + \"/CS2103/Individual_project/Duke/src/test/java/TestTasks.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Duke duke \u003d new Duke(testFilePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        /************************************************"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "         * Test 1: Correct Test                         *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "         ************************************************/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String data \u003d \"deadline Individual Project /by 03/09/2019 2359\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Parser parser \u003d new Parser(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String userCommand \u003d parser.getUserCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String due \u003d parser.getDue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String taskDescription \u003d parser.getTaskDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Storage storage \u003d new Storage(testFilePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        storage.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Task.reduceTaskCount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            assertEquals(correct, duke.createTask(userCommand, due, taskDescription, storage, ui, tasks));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 36
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates an EventTest object that contains the operation to test the createTask operation"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * in creating a correct Event. It includes storing the Event object in a temporary list and the local storage."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void EventTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String correct \u003d \"Got it. I\u0027ve added this task:\\n\" + \"    \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + \"[E][\" + \"\\u2718\" + \"] Party (at: 02/12/2019 2000 - 0300)\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "                + \"Now you have 1 task in the list.\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String testFilePath \u003d \"/Users/TuanDingWei/Desktop/NUS_Academia\" + \"/CS2103/Individual_project/Duke/src/test/java/TestTasks.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Duke duke \u003d new Duke(testFilePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        /************************************************"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "         * Test 1: Correct Test                         *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "         ************************************************/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String data \u003d \"event Party /at 2/12/2019 2000-0300\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Parser parser \u003d new Parser(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String userCommand \u003d parser.getUserCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String due \u003d parser.getDue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String taskDescription \u003d parser.getTaskDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Storage storage \u003d new Storage(testFilePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        storage.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Task.reduceTaskCount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            assertEquals(correct, duke.createTask(userCommand, due, taskDescription, storage, ui, tasks));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 36
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * Encapsulates an TodoTest object that contains the operation to test the createTask operation"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " * in creating a correct Todo task. It includes storing the Todo object in a temporary list and the local storage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    public void TodoTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String correct \u003d \"Got it. I\u0027ve added this task:\\n\" + \"    \" + \"[T][\" + \"\\u2718\" + \"] Read book\\n\" + \"Now you have 1 task in the list.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String testFilePath \u003d \"/Users/TuanDingWei/Desktop/NUS_Academia\" + \"/CS2103/Individual_project/Duke/src/test/java/TestTasks.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Duke duke \u003d new Duke(testFilePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        /************************************************"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "         * Test 1: Correct Test                         *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "         ************************************************/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String data \u003d \"todo Read book\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Parser parser \u003d new Parser(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String userCommand \u003d parser.getUserCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String due \u003d parser.getDue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        String taskDescription \u003d parser.getTaskDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Storage storage \u003d new Storage(testFilePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        storage.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Task.reduceTaskCount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            assertEquals(correct, duke.createTask(userCommand, due, taskDescription, storage, ui, tasks));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 36
    }
  }
]
