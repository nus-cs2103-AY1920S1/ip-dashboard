[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Defer use of Shadow and JUnit until a later stage"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 7,
      "Jeffry Lum": 14
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String byDeadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Deadline(String description, String byDeadline) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.byDeadline \u003d byDeadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.byDeadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Adds the type of the Task and its deadline to the base toString() representation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), this.byDeadline);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 18
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String intro \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Duke.print(intro);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        while (isRunning \u0026\u0026 sc.hasNextLine()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String command \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                // Catch empty commands (ENTER key pressed)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                case \"\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                    throw new DukeNoCommandException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                // Terminate the bot if the \u0027bye\u0027 command is issued"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                    isRunning \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                // Otherwise attempt to parse the command string with the TaskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                    Duke.print(Parser.parse(tasks, command));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                // Catches all custom exceptions thrown for incorrect user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                Duke.print(e.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Explicitly closes the Scanner and input stream"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /** Pretty-prints a given message string to the standard output stream."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Adds indentation and horizontal lines to the message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * @param message a string to embellish then print to \u003ccode\u003eSystem.out\u003c/code\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static void print(String message) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String bar \u003d \"________________________________________________\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String divider \u003d String.format(\"    %s%s\\n\", bar, bar);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        result.append(divider)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "              .append(\"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Retrieves each individual line in the message"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] lines \u003d message.split(\"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        for (String line: lines) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            result.append(\"     \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                  .append(line)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                  .append(\"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        result.append(divider);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        System.out.println(result.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 61,
      "Jeffry Lum": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Stores the command whose parsing led to the exception being thrown"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String errorSource;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.errorSource \u003d \"Unknown error source\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeException(String message, String errorSource) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.errorSource \u003d errorSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[DukeException] %s\\n  \u003e %s\", this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 20
    }
  },
  {
    "path": "src/main/java/DukeIncorrectArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeIncorrectArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String commandFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeIncorrectArgumentsException("
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int numCommandArgs, String commandFormat, int numArgs, String errorSource) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Expected %d argument(s) for command \u0027%s\u0027, but got %d\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                numCommandArgs, errorSource.split(\" \", 2)[0], numArgs),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.commandFormat \u003d commandFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeIncorrectArgumentsException] %s\\n  | %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.commandFormat, this.errorSource); "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 20
    }
  },
  {
    "path": "src/main/java/DukeInvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeInvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeInvalidArgumentException(String argName, String argType, String errorSource) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Argument \u0027%s\u0027 of command \u0027%s\u0027 is not of type %s\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                argName, errorSource.split(\" \", 2)[0], argType),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeInvalidArgumentException] %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 16
    }
  },
  {
    "path": "src/main/java/DukeInvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeInvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeInvalidTaskException(int id, String errorSource) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"No task exists with ID %d\", id),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeInvalidTaskException] %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 15
    }
  },
  {
    "path": "src/main/java/DukeNoCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeNoCommandException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeNoCommandException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(\"No command issued\", \"\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeNoCommandException] %s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage()); "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 12
    }
  },
  {
    "path": "src/main/java/DukeUnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeUnknownCommandException(String errorSource) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Build the error message from the supplied error command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Unknown command type \u0027%s\u0027\", errorSource.split(\" \", 2)[0]),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeUnknownCommandException] %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 16
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String atTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Event(String description, String atTime) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.atTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Adds the type of the Task and its time period to the base toString() representation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), this.atTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 18
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Command templates"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String DONE_TEMPLATE \u003d \"done \u003cid\u003e\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String DELETE_TEMPLATE \u003d \"delete \u003cid\u003e\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String TODO_TEMPLATE \u003d \"todo \u003cdescription\u003e\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String DEADLINE_TEMPLATE \u003d \"deadline \u003cdescription\u003e /by \u003cdate | time\u003e\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String EVENT_TEMPLATE \u003d \"event \u003cdescription\u003e /by \u003cdate | time\u003e\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static String parse(TaskList tasks, String command) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Determine the type of command from the first token"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        switch (command.split(\" \")[0]) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"list\": outputs all tasks in the TaskList in a formatted manner"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return tasks.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"done\" sets the status of the task with a given task ID (its position) to completed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseDone(tasks, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"delete\" removes a given task by its task ID from the TaskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseDelete(tasks, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"todo\": creates a Todo task (no attached date/time)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseTodo(tasks, command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"deadline\": creates a Deadline task (to be completed by a specified date/time)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseDeadline(tasks, command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"event\": creates a Event task (no attached date/time)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseEvent(tasks, command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against all unknown commands"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeUnknownCommandException(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static String parseDone(TaskList tasks, String command) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against too few (e.g. done) or too many (e.g. done 5 example) arguments"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, DONE_TEMPLATE, tokens.length - 1, command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Attempt to parse the id of the task as an integer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            int id \u003d Integer.valueOf(tokens[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // GUARD: against invalid (non-existent) task IDs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (id \u003c 1 || id \u003e tasks.numberOfTasks()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidTaskException(id, command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return tasks.getTask(id - 1).complete();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"id\", \"int\", command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static String parseDelete(TaskList tasks, String command) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against too few (e.g. done) or too many (e.g. done 5 example) arguments"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, DELETE_TEMPLATE, tokens.length - 1, command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Attempt to parse the id of the task as an integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            int id \u003d Integer.valueOf(tokens[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // GUARD: against invalid (non-existent) task IDs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (id \u003c 1 || id \u003e tasks.numberOfTasks()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidTaskException(id, command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return tasks.deleteTask(id - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"id\", \"int\", command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static String parseTodo(TaskList tasks, String command) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty todo description"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027todo\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, TODO_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Otherwise entire argString is the description of the Todo task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String argString \u003d command.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return tasks.addTask(new Todo(argString));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static String parseDeadline(TaskList tasks, String command) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty deadline description"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027deadline\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, DEADLINE_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] args \u003d command.split(\" \", 2)[1].split(\" /by \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against incorrect number of arguments or missing \u0027 /by \u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // args should contain two arguments: description, byDeadline"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (args.length !\u003d 2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(2, DEADLINE_TEMPLATE, args.length, command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return tasks.addTask(new Deadline(args[0], args[1]));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static String parseEvent(TaskList tasks, String command) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty event description"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027event\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, EVENT_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] args \u003d command.split(\" \", 2)[1].split(\" /at \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against incorrect number of arguments or missing \u0027 /at \u0027"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // args should contain two arguments: description, atTime"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (args.length !\u003d 2) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(2, EVENT_TEMPLATE, args.length, command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return tasks.addTask(new Event(args[0], args[1]));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 119
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected boolean isComplete;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Does not return the UTF-16 character for a tick or cross respectively"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Java SDK 11 incorrectly encodes Unicode characters on Windows returning ? for all of them"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.isComplete ? \"V\" : \"X\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String complete() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n  %s\", this.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 29
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Task getTask(int idx) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.tasks.get(idx);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), this.numberOfTasks());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String deleteTask(int idx) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d this.tasks.remove(idx);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), this.numberOfTasks());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public int numberOfTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Retrieve the length of the task list and the number of digits of the maximum task ID"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int length \u003d this.numberOfTasks();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return \"Your task list is empty!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Build format string to print all task IDs with the same width, left-padded with spaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            long numDigits \u003d Math.round(Math.log10(length) + 0.5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String formatTemplate \u003d \"%1$\" + numDigits + \"s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                result.append(String.format(formatTemplate, i + 1))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                      .append(String.format(\". %s\\n\", this.tasks.get(i).toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Trim trailing newline"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            result.setLength(result.length() - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 55
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Adds the type of the Task to the base toString() representation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 11
    }
  }
]
