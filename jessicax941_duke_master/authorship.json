[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "test {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jessicax941": 42,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### 1. Display help"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Display the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### 2. Add a task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Add a task that is either a Todo, Deadline or Event with a given description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "If it is a Deadline or Event task, it is created with the given due date and "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "time or event date and time respectively."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### 3. Mark a task as done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Mark an existing task as done, i.e. completed. The cross mark (x) for the task is changed to a check mark (✓)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### 4. Delete a task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Delete an existing task from the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### 5. Find tasks using keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Find a task or certain tasks using given keyword(s)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### 6. Display the task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Display the full list of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### \u0027help\u0027 - Displays the help page"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Displays the help page."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### \u0027todo\u0027 - Adds a Todo task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Adds a Todo task with a description of the task to the task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Format: `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "`todo borrow book`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "okie! i added this task:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    [T][x] borrow book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "now u haf 1 task in the list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### \u0027deadline\u0027 - Adds a Deadline task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Adds a Deadline task with a description of the task and the due date and time to the tasks list. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Date and time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "has to be in the following format: \"d/m/yyyy HHmm\". Time is in 24-hour format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Format: `deadline \u003cdescription\u003e /by \u003cdate and time\u003e`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "`deadline 2030 lab assignment /by 20/9/2019 2359`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "okie! i added this task: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    [D][x] 2030 lab assignment (by: 20/9/2019 2359)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "now u haf 2 tasks in the list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### \u0027event\u0027 - Adds an Event task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Adds an Event task with a description of the task and the event date and time to the tasks list. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Date and time"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "has to be in the following format: \"d/m/yyyy HHmm\". Time is in 24-hour format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Format: `event \u003cdescription\u003e /at \u003cdate and time\u003e`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "`event 2103 project meeting /at 18/19/2019 1000`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "okie! i added this task:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    [E][x] project meeting (at: 18/19/2019 1000)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "now u haf 3 tasks in the list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### \u0027done\u0027 - Marks a task as done"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Marks an existing task as done, i.e. changes the cross mark (x) to a check mark (✓)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Format: `done \u003ctask number\u003e`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "naisu! i marked this task as done:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    [T][✓] borrow book"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### \u0027delete\u0027 - Deletes a task from the tasks list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Deletes an existing task from the tasks list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Format: `delete \u003ctask number\u003e`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "okie! i delete this task:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    [T][✓] borrow book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "now u haf 2 tasks in the list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### \u0027find\u0027 - Finds a task or certain tasks from the tasks list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Finds a task or certain tasks from the task list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Format: `find \u003ckeyword(s)\u003e`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "here ya go, the matchy-matchy tasks in ur list: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    1. [T][x] borrow book "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    2. [T][x] read book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Another example of usage: (multiple keywords)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "`find borrow book`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "here ya go, the matchy-matchy tasks in ur list: "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    1. [T][x] borrow book"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "### \u0027list\u0027 - Displays the full list of tasks"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Displays the full list of tasks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "here ya go, the tasks in ur list: "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    1. [T][x] borrow book "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    2. [D][x] 2030 lab assignment (by: 20/9/2019 2359) "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    3. [E][x] project meeting (at: 18/19/2019 1000)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 156,
      "-": 14
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a DialogBox with the specified text and image."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param text specified text for the dialog box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param img specified image for the dialog box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Circle clip \u003d new Circle(50, 50, 50);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Gets dialog box for the user with the specified text and image."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param text specified text that was input by user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param img specified image for the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return DialogBox for user with the specified text and image."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Gets dialog box for Duke with the specified text and image."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param text specified text with Duke\u0027s response to the user\u0027s input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param img specified image for Duke."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return Dialogbox for user with the specified text and image."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        db.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 89
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.FileLoadingException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents Duke, a personal chatbot assistant."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Duke() throws FileNotFoundException, FileLoadingException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Gets the appropriate response with the specified input/command given by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param input given by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return String the appropriate response to the user\u0027s input.hello"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assert(input !\u003d null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                storage.updateTasks();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return ui.getByeResponse();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getResponseToUserInput(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getHello() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getHelloMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 47,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.FileLoadingException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.setRoot(mainWindow);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            mainWindow \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            //fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            VBox dialogContainer \u003d (VBox) scene.lookup(\"#dialogContainer\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                duke \u003d new Duke();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } catch (FileNotFoundException | FileLoadingException e ) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                DialogBox fileErrorDialog \u003d DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        e.getMessage(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        new Image(this.getClass().getResourceAsStream(\"/images/shocked_cat_square.jpg\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                dialogContainer.getChildren().addAll(fileErrorDialog);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // set up hello message on start"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String hello \u003d duke.getHello();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            DialogBox helloDialog \u003d DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    hello,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    new Image(this.getClass().getResourceAsStream(\"/images/shocked_cat_square.jpg\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            dialogContainer.getChildren().addAll(helloDialog);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 57
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/sayang_cat_square.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/shocked_cat_square.jpg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!input.equals(\"\")) { // does not allow user to send empty strings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }, 1000); // so that the bye message will be printed before the program terminates"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 68
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class to represent exceptions specific to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/FileLoadingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class FileLoadingException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public FileLoadingException(String errorMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class InvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public InvalidArgumentException(String errorMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class that extends from DukeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This exception is thrown when an invalid command is given to Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public InvalidCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class that extends from DukeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This exception is thrown when a task is missing its description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class MissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public MissingDescriptionException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class that extends from DukeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This exception is thrown when there are missing inputs such as the deadline or event time/day."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class MissingInputException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public MissingInputException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 17
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Parser object that deals with making sense of the user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor for a Parser object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Executes the specified command given by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param command The specified command given by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the response to the specified user\u0027s input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws InvalidCommandException if an invalid or recognisable command is given by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws InvalidArgumentException if an invalid argument is given by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingInputException if there are missing inputs when creating a Deadline or Event task, such as the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *     deadline or event time and day."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingDescriptionException if a description is missing for the task that the user is trying to create"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getResponseToCommand(String command) throws InvalidCommandException, InvalidArgumentException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            MissingInputException, MissingDescriptionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String[] commandWords \u003d command.trim().toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String commandType \u003d commandWords[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d ui.getListResponse(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new MissingInputException(\"huh?? i dunno wat task u want me to mark as done :((\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String taskNumberString \u003d commandWords[1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(taskNumberString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d taskList.getResponseToMarkAsDone(taskNumber);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (output \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // task number given falls out of the range of the task list size"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new InvalidArgumentException(\"r u sure u gimme the correct task number?? i kennut find leh\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new MissingInputException(\"huh?? i dunno wat task u want me to delete :((\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String taskNumberString1 \u003d commandWords[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            int taskNumber1 \u003d Integer.parseInt(taskNumberString1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d taskList.getResponseToDeleteTask(taskNumber1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (output \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // task number given falls out of the range of the task list size"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new InvalidArgumentException(\"r u sure u gimme the correct task number?? i kennut find leh\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new MissingInputException(\"huh?? u neh gimme ur keywords, i dunno wat to find :((\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d taskList.getResponseToFindTask(commandWords[1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (output \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // no matching tasks found"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new InvalidArgumentException(\"eh?? i kennut find any matchy-matchy tasks!!1!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d getResponseToAddTask(command, commandType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d this.ui.getByeResponse();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d this.ui.getHelpResponse();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new InvalidCommandException(\"\\tsowwie i dunno what tat means T~T\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param command The specified command given by the user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskType The type of the task that the user wants to add to the tasks list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response to the user after the task is added."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingDescriptionException if a description is missing for the task that the user is trying to create."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingInputException if there are missing inputs when creating a Deadline or Event task, such as the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *     deadline or event time and day."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private String getResponseToAddTask(String command, String taskType) throws MissingDescriptionException,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            MissingInputException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String fullDesc \u003d command.substring(taskType.length()).trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Task task \u003d new Task();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (fullDesc.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingDescriptionException(\"o noes!! ur description of \" + taskType + \" is empty ( ._.)\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case (\"todo\"):"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            task \u003d new Todo(fullDesc);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case (\"deadline\"):"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            task \u003d createDeadline(fullDesc);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case (\"event\"):"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            task \u003d createEvent(fullDesc);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return taskList.getResponseToAddTask(task);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Deadline task with the specified description and due date and time."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param descAndDueBy the specified string containing the description for the Deadline task and due date and time."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the created Deadline task."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingInputException if either the description or due date and time is missing, or both."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Task createDeadline(String descAndDueBy) throws MissingInputException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!descAndDueBy.contains(\"/by\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingInputException(\"o noes!! i kennut find your deadline cos \u0027/by\u0027 is missinggg ( ._.)\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        descAndDueBy \u003d descAndDueBy.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (descAndDueBy.startsWith(\"/by\") \u0026\u0026 descAndDueBy.endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingInputException(\"harro?! where is ur deadline description and due date and time!!!!1! tsktsk\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (descAndDueBy.startsWith(\"/by\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // deadline description is missing"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingInputException(\"o noess!! i kennut find ur deadline description ( ._.)\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (descAndDueBy.endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // dueBy is missing after \"/by\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingInputException(\"o noes!! i kennut find your due date and time after \u0027/by\u0027 ( ._.)\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String[] descAndDueBySplit \u003d descAndDueBy.split(\"/by\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String desc \u003d descAndDueBySplit[0].trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String dueBy \u003d descAndDueBySplit[1].trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new Deadline(desc, dueBy);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Event task with the specified description and event date and time."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param descAndWhen the specified string containing the description for the Event task and event date and time."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the created Eeadline task."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingInputException if either the description or event date and time is missing, or both."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Task createEvent(String descAndWhen) throws MissingInputException{"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!descAndWhen.contains(\"/at\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingInputException(\"o noes!! i kennut find your event date and time cos \u0027/at\u0027 is missinggg ( ._.)\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        descAndWhen \u003d descAndWhen.trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (descAndWhen.startsWith(\"/at\") \u0026\u0026 descAndWhen.endsWith(\"/at\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingInputException(\"harro?! where is ur event description and event date and time!!!!1! tsktsk\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (descAndWhen.startsWith(\"/at\")) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // event description is missing"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingInputException(\"o noess!! i kennut find ur event description ( ._.)\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (descAndWhen.endsWith(\"/at\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // event date and time is missing after \"/at\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingInputException(\"o noes!! i kennut find your event date and time after \u0027/at\u0027 ( ._.)\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String[] descAndWhenSplit \u003d descAndWhen.split(\"/at\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String desc \u003d descAndWhenSplit[0].trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String when \u003d descAndWhenSplit[1].trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new Event(desc, when);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 210
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.FileLoadingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Storage object that deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * The path to the file that contains the tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static String filePath \u003d \"../main/data/taskslist.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static String directoryPath \u003d \"../main/data\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor that creates a Storage object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Creates a Storage object with the specified file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * @param filePath The path to the file that contains the tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public Storage(String filePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Storage.filePath \u003d filePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Loads the tasks from the file and stores it in an ArrayList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return The list of tasks that was read from the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws FileLoadingException if the file cannot be loaded."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws FileNotFoundException if the file cannot be found in the specified path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileLoadingException, FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        File taskFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        File dataDirectory \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (!taskFile.isFile()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                dataDirectory.mkdirs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                taskFile.createNewFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new FileLoadingException(\"got error when loading file leh!!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            if (!taskFile.getAbsoluteFile().exists()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                dataDirectory.mkdir();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                taskFile.createNewFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new FileLoadingException(\"got error when loading file leh!!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Scanner sc \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String line \u003d sc.nextLine(); // eg. T,false,read book"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String[] taskDetails \u003d line.split(\",\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // to separate the line into its different components"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // namely, the taskType, isDone boolean value, description and the deadline/event time and day"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String taskType \u003d taskDetails[0];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            boolean isDone \u003d Boolean.parseBoolean(taskDetails[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String todoDesc \u003d taskDetails[2];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Todo todo \u003d new Todo(todoDesc, isDone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                list.add(todo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String deadlineDesc \u003d taskDetails[2];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String due \u003d taskDetails[3];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Deadline deadline \u003d new Deadline(deadlineDesc, isDone, due);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                list.add(deadline);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String eventDesc \u003d taskDetails[2];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String when \u003d taskDetails[3];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Event event \u003d new Event(eventDesc, isDone, when);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                list.add(event);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Saves the tasks in the file by overwriting them."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws IOException if an I/O error occurs."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void updateTasks() throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        StringBuilder fileContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fileContent.append(formatTask(task));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fileContent.append(System.lineSeparator());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        fw.write(fileContent.toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Converts specified task to its string representation."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task the specified task to be converted to its string representation."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the string representation of the specified task."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private String formatTask(Task task) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        boolean isDone \u003d task.isDone();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String desc \u003d task.getDesc();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return String.format(\"%s,%b,%s\", \"T\", isDone, desc);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            LocalDateTime due \u003d deadline.getDueBy();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String dueAsString \u003d convertDateTimeToString(due);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return String.format(\"%s,%b,%s,%s\", \"D\", isDone, desc, dueAsString);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            LocalDateTime when \u003d event.getWhen();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String whenAsString \u003d convertDateTimeToString(when);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return String.format(\"%s,%b,%s,%s\", \"E\", isDone, desc, whenAsString);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static String convertDateTimeToString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return dateTime.format(formatter);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static LocalDateTime convertStringToDateTime(String string) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return LocalDateTime.parse(string.trim(), formatter);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 163
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime dueBy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Deadline task with the specified description and due date/time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc describes the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param dueBy the time/day that the task is due by."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Deadline(String desc, String dueBy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.dueBy \u003d (Storage.convertStringToDateTime(dueBy));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Deadline task with the specified description, isDone status and deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc deadline that the task is due by."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param isDone if true, the Deadline task is done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param dueBy the time/day that the task is due by."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Deadline(String desc, boolean isDone, String dueBy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        new Storage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.dueBy \u003d Storage.convertStringToDateTime(dueBy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public LocalDateTime getDueBy() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.dueBy;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setDueBy(String dueBy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        new Storage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.dueBy \u003d Storage.convertStringToDateTime(dueBy);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String dueBy \u003d Storage.convertDateTimeToString(this.dueBy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return String.format(\"[%s][%s] %s (by: %s)\", \"D\", super.getDoneSymbol(), this.desc, dueBy);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 52
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime when;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates an Event task with the associated description and event day and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param when The event day and time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Event(String desc, String when) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.when \u003d Storage.convertStringToDateTime(when);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates an Event task with the specified description, isDone status and event day and time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param isDone if true, the Event task is done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param when The event day and time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Event(String desc, boolean isDone, String when) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.when \u003d Storage.convertStringToDateTime(when);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public LocalDateTime getWhen() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.when;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setWhen(String when) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.when \u003d Storage.convertStringToDateTime(when);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String when \u003d Storage.convertDateTimeToString(this.when);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return String.format(\"[%s][%s] %s (at: %s)\", \"E\", super.getDoneSymbol(), this.desc, when);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Task in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String desc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String doneSymbol;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor that creates a Task object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Task object with the specified description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setDoneSymbol();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Task object with the specified description and isDone status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param isDone if true, the task is done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Task(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setDoneSymbol();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.desc;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setDesc(String desc) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String getDoneSymbol() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.isDone ? \"\\u2713\" : \"x\"; // returns check mark or cross"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected void setDoneSymbol() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.doneSymbol \u003d isDone ? \"\\u2713\" : \"x\"; // returns check mark or cross"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Marks a task as done, and changes the doneSymbol to a check mark."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setDoneSymbol();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 72
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Todo with the associated description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the Todo task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Todo(String desc) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Todo with the associated description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the Todo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param isDone if true, the Todo task is done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Todo(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return String.format(\"[%s][%s] %s\", \"T\", super.getDoneSymbol(), this.desc);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 30
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents and contains the tasks list and operations surrounding the tasks list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor to create the TaskList object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates the TaskList object with the specified taskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskList The specified ArrayList of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList.tasks \u003d taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList.tasks \u003d tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Adds the specified task to the tasks list and prints the necessary output."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task The specified task to be added."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response to the user after the task is added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getResponseToAddTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getAddTaskResponse(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Marks the task with the specified task number as done and prints the necessary output."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskNumber The specified number of the task that is to be marked as done."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response to the user after the task is marked as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getResponseToMarkAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Task taskDone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (taskNumber - 1 \u003e tasks.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            taskDone \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        taskDone \u003d tasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        taskDone.markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getDoneTaskResponse(taskDone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Deletes the task with the specified task number from the tasks list and prints the necessary output."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskNumber The specified number of the task to be deleted from the tasks list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response to the user after the task is deleted from the task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getResponseToDeleteTask(int taskNumber) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (taskNumber - 1 \u003e tasks.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            task \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        task \u003d tasks.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getDeleteTaskResponse(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Find the matching tasks in the task list with the specified keyword."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param keyword The specified keyword that the matching tasks will contain."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response to the user with the matching tasks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getResponseToFindTask(String keyword) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (Task task : TaskList.tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String desc \u003d task.getDesc();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (desc.contains(keyword)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getFindTaskResponse(matchingTasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 102
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents the UI and deals with interactions with the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor that creates the Ui object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getHelloMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return \"harro!! i am duke! :\u003e\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                + \"wat can i do for u??\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                + \"type \u0027help\u0027 if u dk or forgot d commands!!\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                + \"\u0026 don\u0027t forget to type \u0027bye\u0027 to save ur changes okie!!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Reads input given by the user and passes it to a Parser class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param command the input given by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the response to user\u0027s input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getResponseToUserInput(String command) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d parser.getResponseToCommand(command.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (InvalidCommandException | InvalidArgumentException | MissingInputException |"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                MissingDescriptionException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output +\u003d e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assert(output !\u003d null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the response that Duke gives when a task is added to the task list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task the specifed task that is added to the task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the response that Duke gives to inform the user that the specified task is added to the list and the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *     current number of tasks in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getAddTaskResponse(Task task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String output \u003d \"okie! i added this task:\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        output +\u003d \"\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        int size \u003d (new TaskList()).getSize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output +\u003d String.format(\"now u haf %d task in the list\", size);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output +\u003d String.format(\"now u haf %d tasks in the list\", size);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the response that Duke gives when the specified task is marked as done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task the specified task that is marked as done."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the response that Duke gives to inform the user that the specified task is marked as done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getDoneTaskResponse(Task task) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return \"naisu! i marked this task as done:\\n\" + task.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the response that Duke gives when a task is deleted from the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task the specified task that is deleted from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response that Duke gives to let the user know that the corresponding task has been"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *     deleted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getDeleteTaskResponse(Task task) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String output \u003d \"okie! i delete this task:\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        output +\u003d \"\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        int size \u003d (new TaskList()).getSize();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output +\u003d String.format(\"now u haf %d task in the list\", size);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output +\u003d String.format(\"now u haf %d tasks in the list\", size);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the appropriate response that Duke gives when the user wants to find certain tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param matchingTasks the list of matching tasks that are found for the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the response that Duke gives for the user to view the matching tasks."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getFindTaskResponse(ArrayList\u003cTask\u003e matchingTasks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (matchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"here ya go, the matchy-matchy tasks in ur list:\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output.append(String.format(\"%d. %s\\n\", i + 1, matchingTasks.get(i)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the appropriate response that Duke gives when the user wants to view the task list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param tasks the current list of tasks."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response that Duke gives for the user to view the task list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getListResponse(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return \"u haf no tasks in ur list!!1!\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"here ya go, the tasks in ur list:\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the appropriate response when the user enters \"bye\", i.e. wants to exit the program."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response that Duke gives when the user enters \"bye\"."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getByeResponse() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return \"okie baibai~ hope to see u again soon!~ :\u003e\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrives the appropriate response when the user requests for help."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response that Duke gives when the user enters \"help\"."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getHelpResponse() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       String output \u003d \"u asked for halp?? here ya go~\\n\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       output +\u003d \"todo \u003cdescription\u003e - to add a Todo task with the description\\n\\n\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       output +\u003d \"deadline \u003cdescription\u003e \u003cdeadline: eg. 1/9/2019 2359\u003e - to add a Deadline task with the description and deadline\\n\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       output +\u003d \"event \u003cdescription\u003e \u003cevent day \u0026 time: eg. 1/9/2019 2359\u003e - to add an Event task with the description and event day \u0026 \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "               + \"time\\n\\n\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       output +\u003d \"list - to display all the tasks in your list\\n\\n\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       output +\u003d \"done \u003ctask no.\u003e - to mark that task as done\\n\\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       output +\u003d \"delete \u003ctask no.\u003e - to delete that task from the list\\n\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       output +\u003d \"find \u003ckeyword(s)\u003e - to find the matching tasks with the keyword(s)\\n\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       output +\u003d \"bye - to save the changes made to your list and exit the program\\n\\n\" ;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       output +\u003d \"help - to display this help page\\n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "       return output;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 157
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER_RIGHT\" contentDisplay\u003d\"CENTER\" lineSpacing\u003d\"5.0\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"250.0\" style\u003d\"-fx-background-color: #add8e6; -fx-background-radius: 15; -fx-border-color: #ffffff; -fx-border-radius: 15;\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Semilight\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003cInsets bottom\u003d\"0.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 29
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003cfx:root maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #808080;\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"send\" textFill\u003d\"#000000\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Semilight\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #808080;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefWidth\u003d\"388.0\" spacing\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "   \u003ccursor\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "      \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "   \u003c/cursor\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 27
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        //Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 11
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void executeCommand_InvalidCommand_ExceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            parser.executeCommand(\"listtt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (MissingDescriptionException | MissingInputException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 23
    }
  },
  {
    "path": "src/test/java/duke/test/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void testStringConversion1() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assertEquals(\"[D][x] homework (by: 29/12/2019 2359)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                (new Deadline(\"homework\", \"29/12/2019 2359\")).toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void testStringConversion2() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assertEquals(\"[D][x] homework (by: 1/01/2019 0000)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                (new Deadline(\"homework\", \"1/01/2019 0000\")).toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 20
    }
  },
  {
    "path": "src/test/java/duke/test/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assertEquals(\"[T][x] read book\", (new Todo(\"read book\")).toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jessicax941": 16
    }
  }
]
