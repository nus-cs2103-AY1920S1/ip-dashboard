[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "run {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 41,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "## What is Duke?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Duke is a not only your task manager but also your study companion. This desktop application allows you to easily keep track of your tasks; and quiz yourself on important concepts taught in school. Furthermore, it is optimised for users who loves to type!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "An overview of Duke\u0027s main features."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 1: Add a to-do"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Do you have a to-do task which does not have a specific deadline? You can add it to duke to keep track of it!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 2: Add a deadline "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Do you have a task which has to be completed by a certain date and time? Duke can easily handle that too!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 3: Add an event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Do you need to attend or organise an event (task) which has a specified date, start time and end time? Why not add that to Duke as well for easy tracking?"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 4: Mark task as complete"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "When you are done with a task, you can easily mark it as complete."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 5: Find a task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "If you are in a hurry and need to look for tasks which contain a certain expression, Duke can do that for you!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 6: List tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "With this feature, getting an overview of all your tasks is a breeze."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 7: Delete a task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Do you have ever changing priorities and tasks? Don\u0027t fret! You can easily delete your tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 8: Store tasks in a specified file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Do you want to store your tasks in a specific file for easy exporting? Or do you want to have multiple task managers? Then, this feature is just for you!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 9: Add a question with its accompanying answer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Add a new question and answer. Then, quiz yourself or review it later!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 10: Quiz yourself"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Test yourself by asking Duke to select a random question from your question bank! Do note that you must attempt to answer the question. If otherwise, Duke will be unhappy and you won\u0027t be able to access any question-and-answer features until you provide an answer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 11: Check the answer of a specified question"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "With this feature, you can easily get an answer to a question from your question bank easily! Just type your question and Duke will fetch the answer for you."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 12: Show all questions and answers"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Do you need to review all your questions and answers? Duke can help you with that too!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 13: Remove a question and its accompanying answer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Have you just finished your test? Do you no longer need a pair of question and answer? Don\u0027t fret. Removing it is a breeze with Duke."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### Feature 14: Close application without a mouse"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Close Duke with a simple command: no mouse is needed for this action!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "This section explains the various commands you might need. Examples are also included!"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `todo` - adds a to-do "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Adds a to-do task. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "todo \u003ctask to do\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`todo read the elegant universe`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of todo outcome](screenshots/todo.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `deadline` - adds a deadline"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Adds a task which has to be completed by a specified date and time."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "deadline \u003ctask to do\u003e /by \u003cday/Month\u003e \u003ctime\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "where `day` and `month` are specified using numbers, and `time` is the specified time in 24 hours format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "**Note:**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Please represent `time` with four digits, with the first 2 specifying the hours and the latter 2 specifying the minutes of the day (prepend zeros whenever necessary)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`deadline complete week 6 iP /by 19/9 1900`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of deadline outcome](screenshots/deadline.png)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `event` - adds an event"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Adds an event (task) that is happening on a specified date, and has a start and end time."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "event \u003ctask to do or event\u003e /at \u003cday/Month\u003e \u003cstart time\u003e-\u003cend time\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "where `day` and `month` are specified using numbers, and `start time` and `end time` are specified in 24 hours format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "**Note:**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Please represent `start time` and `end time` with four digits, with the first 2 specifying the hours and the latter 2 specifying the minutes of the day (prepend zeros whenever necessary)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`event family dinner /at 20/9 1830-2000`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of event outcome](screenshots/event.png)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `done` - marks a task as done"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Marks your `index`th task in the task manager as done."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "done \u003cindex\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of done outcome](screenshots/done.png)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `find` - finds tasks "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Finds and returns any tasks which contain `expression`. The search process is not case-sensitive."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "find \u003cexpression\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`find ip`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of find outcome](screenshots/find.png)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `list` - shows all tasks"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Shows all tasks in your task manager."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of list outcome](screenshots/list.png)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `delete` - deletes a task"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Deletes your `index`th task."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "delete \u003cindex\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of delete outcome](screenshots/delete.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `store` - changes the file that is used to store your tasks locally"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Uses the `specified file` for storing your tasks locally, i.e. tasks will not be stored in the default file. In addition, all tasks from the default file will no longer be accessible by Duke. However, when the command is run, Duke will load any of your tasks that are found in the `specified file`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "store \u003cspecified file\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`store ../data/entries.txt`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of store outcome](screenshots/store.png)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `new` - adds a question with its accompanying answer"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Adds a new `question` and `answer`. In the future, you may refer to it."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "new \u003cquestion\u003e /ans \u003canswer\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`new where is Singapore? /ans South East Asia`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of new outcome](screenshots/new.png)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `ask` - retrieves a question"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Retrieves a question which you are expected to answer. It is great if you get it right but it is okay to make mistakes! We are all here to learn (:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "ask"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`ask`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of ask outcome](screenshots/ask.png)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `answer` - answer a question"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "To answer a question Duke has retrieved, please use this command. Note that the check is not case-sensitive."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "(Refer to the command before this to find out how to get Duke to ask you a question) "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "answer \u003cyour answer\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`answer South east Asia`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of answer outcome](screenshots/answer.png)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `check` - checks the answer to a specified question"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Checks the answer to your `question`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "check \u003cquestion\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`check where is singapore?`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of check outcome](screenshots/check.png)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `show` - shows all questions and their corresponding answers"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Shows all your questions and answers."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "show"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`show`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of show outcome](screenshots/show.png)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `remove` - removes a specified question and answer"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Removes your `index`th question and answer."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "remove \u003cindex\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`remove 1`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of remove outcome](screenshots/remove.png)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "### `bye` - closes the application"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Closes the application and the application\u0027s window for you."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "bye"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "```"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "![Image of bye outcome](screenshots/bye.png)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "This section explains the command terms used."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "#### task"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "This refers to any to-do, deadline or event items."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "#### local(ly)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "This refers to files that are stored on your PC or Mac. "
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 308,
      "-": 24
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 17,
      "-": 83
    }
  },
  {
    "path": "launch.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "# !/bin/bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "./gradlew run --console\u003dplain"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.LoadException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Response;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns Duke, a task manager and a trivia manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // for tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String taskFile \u003d \"../data/tasks.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private OptionalStorage taskStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private boolean hasTaskStorage \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // for trivia"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String triviaFile \u003d \"../data/trivia.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private OptionalStorage triviaStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs \u003ccode\u003eDuke\u003c/code\u003e, a task manager and a trivia manager."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws LoadException if the specified file for storing user\u0027s tasks cannot be accessed, read or written to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            taskStorage \u003d new OptionalStorage(taskFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            taskStorage.load(taskManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (LoadException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            taskStorage \u003d new OptionalStorage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            this.hasTaskStorage \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            taskStorage \u003d new OptionalStorage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            this.hasTaskStorage \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            triviaStorage \u003d new OptionalStorage(triviaFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            triviaStorage.load(triviaManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (LoadException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            triviaStorage \u003d new OptionalStorage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            triviaStorage \u003d new OptionalStorage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes the command implied by \u003ccode\u003einput\u003c/code\u003e. If the command is valid, the command will be"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * executed and the response message/outcome will be returned. If otherwise, the relevant error message"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * will be returned instead."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param input command which determines the desired action to take"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return if \u003ccode\u003einput\u003c/code\u003e is a valid command, response message will be returned. If otherwise,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *     the error message will be returned"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Response getResponse(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Response response \u003d new Response();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Optional\u003cCommand\u003e command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            CommandType commandType \u003d command.get().getCommandType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String message \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (commandType.equals(CommandType.TASK)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                message \u003d command.get().execute(taskManager, taskStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else if (commandType.equals(CommandType.TRIVIA)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                message \u003d command.get().execute(triviaManager, triviaStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else if (commandType.equals(CommandType.BYE)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                message \u003d command.get().execute(taskManager, taskStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else if (commandType.equals(CommandType.STORE)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                message \u003d command.get().execute(taskManager, taskStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert !(message.equals(\"\")) : \"Message to user should not be empty\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            response \u003d new Response(message, commandType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            response \u003d new Response(Ui.showError(e), CommandType.INVALID);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Greets the user who has just logged on."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a message to greet user"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String sayHi() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.sayHi();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the the inputs can be stored locally."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the the inputs can be stored locally"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean hasTaskStorage() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return hasTaskStorage;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 106,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Input.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * An \u003ccode\u003eabstract\u003c/code\u003e class that represents a user input that can be stored."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public abstract class Input {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets a summary of the input as a string."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string which is a summary of the input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public abstract String getInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 13
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Launcher that launches the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Launches the main application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param args the command line arguments passed to the application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 17
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            scene.getStylesheets().add(\"/stylesheets/dialogbox.css\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().informStorageCapabilities();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().greetUser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 36
    }
  },
  {
    "path": "src/main/java/duke/Manager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Manager that manages valid inputs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public interface Manager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds all previous inputs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param previousInput stream of previous inputs that are represented as strings"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    void addPrevious(Stream\u003cString\u003e previousInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Removes all inputs from \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    void removeAll();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 20
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.TaskCmdType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.TriviaCmdType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This allows commands, as indicated by the input, to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes the intended command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager manager containing all inputs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all inputs on the local hard disk, if any"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeException if command cannot be executed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public abstract String execute(Manager manager, OptionalStorage storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets command type of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return command type of \u003ccode\u003ethis\u003c/code\u003e command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public abstract CommandType getCommandType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets command type of a specified input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userInput input from user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return returns command type of the input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static CommandType getCmdType(String userInput) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedArgs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String userCommand \u003d parsedArgs[0].toUpperCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isTaskCmd \u003d isTaskCmd(userCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isTaskCmd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return CommandType.TASK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isExitCmd \u003d isExitCmd(userCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isExitCmd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return CommandType.BYE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isStoreCmd \u003d isStoreCmd(userCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isStoreCmd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return CommandType.STORE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isTriviaCmd \u003d isTriviaCmd(userCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isTriviaCmd) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return CommandType.TRIVIA;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return CommandType.INVALID;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified command is a task command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userCommand command from user"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the command is a task command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static boolean isTaskCmd(String userCommand) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            TaskCmdType.valueOf(userCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified command is a trivia command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userCommand command from user"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the command is a trivia command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static boolean isTriviaCmd(String userCommand) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            TriviaCmdType.valueOf(userCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified command is an exit command."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userCommand command from user"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the command is an exit command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static boolean isExitCmd(String userCommand) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            CommandType commandType \u003d CommandType.valueOf(userCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return commandType.equals(CommandType.BYE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified command is a store command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userCommand command from user"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the command is a a store command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static boolean isStoreCmd(String userCommand) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            CommandType commandType \u003d CommandType.valueOf(userCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return commandType.equals(CommandType.STORE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 123
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * General types of valid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    TASK, TRIVIA, BYE, INVALID, STORE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 9
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns a command that terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final CommandType commandType \u003d CommandType.BYE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Bids farewell."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager manager which stores all inputs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all inputs on the local hard disk, if any"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(Manager manager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.sayBye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets command type of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return command type of \u003ccode\u003ethis\u003c/code\u003e command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 31
    }
  },
  {
    "path": "src/main/java/duke/command/task/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a new task to be added to a \u003ccode\u003eTaskManager\u003c/code\u003e object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class AddCommand extends TaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a command which allows a task to be added."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert this.task !\u003d null : \"Empty task should not be added\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds \u003ccode\u003ethis\u003c/code\u003e task to \u003ccode\u003etaskManager\u003c/code\u003e and stores \u003ccode\u003ethis\u003c/code\u003e in \u003ccode\u003estorage\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs that command has been executed when completed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskManager task manager which \u003ccode\u003ethis\u003c/code\u003e task should be added to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string indicating that \u003ccode\u003etask\u003c/code\u003e has been added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        taskManager.addTask(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informAdded(taskManager.getLastEditedTask(), taskManager.getSize());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 37
    }
  },
  {
    "path": "src/main/java/duke/command/task/ChangeStorageCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.NoStorageChangeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows the storage file for tasks to be changed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ChangeStorageCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final CommandType commandType \u003d CommandType.STORE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected String path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a command which allows file storing tasks to be changed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path new file location"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public ChangeStorageCommand(String path) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Changes storage file to \u003ccode\u003epath\u003c/code\u003e. Tasks will be stored there and all tasks from that file will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * loaded onto \u003ccode\u003emanager\u003c/code\u003e. Informs whether the change in storage file has been successful."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager task manager which \u003ccode\u003ethis\u003c/code\u003e task should be added to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string indicating whether the execution is successful"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(Manager manager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String resultString \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (path.equals(\".\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return (new NoStorageChangeException(path)).getMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            storage.update(path);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            storage.updateManager(manager);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            resultString \u003d Ui.informChanged(path);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (NoStorageChangeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            resultString \u003d e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert !resultString.equals(\"\") : \"resultString after storage change should not be empty\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return resultString;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets command type of this command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return command type of this command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 62
    }
  },
  {
    "path": "src/main/java/duke/command/task/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.NoSuchInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a task to be deleted from a \u003ccode\u003eTaskManager\u003c/code\u003e object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeleteCommand extends TaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    int taskNum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a command which allows a task to be deleted from \u003ccode\u003etaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum index of \u003ccode\u003etask\u003c/code\u003e to be removed from \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Removes task with \u003ccode\u003etaskNum\u003c/code\u003e from \u003ccode\u003etaskManager\u003c/code\u003e. Informs that command has been executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskManager task manager which the task should be added to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string indicating whether the task has been successfully deleted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) throws NoSuchInputException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        taskManager.deleteTask(taskNum);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.update(taskManager.getTasksAsStream());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informDeleted(taskManager.getLastEditedTask(), taskManager.getSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 35
    }
  },
  {
    "path": "src/main/java/duke/command/task/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows tasks that contain a specified expression to be searched."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class FindCommand extends TaskCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String query;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a command that allows the tasks with the expression \u003ccode\u003equery\u003c/code\u003e to be searched."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param query expression to be searched for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public FindCommand(String query) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Finds tasks that contain the expression \u003ccode\u003equery\u003c/code\u003e. This method is not case-sensitive."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskManager task manager that contains tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return tasks that contain \u003ccode\u003equery\u003c/code\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        List\u003cString\u003e results \u003d taskManager.getTasksAsStream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .map(t -\u003e t.toString())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .filter(t -\u003e containsQuery(t, query))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String resultString \u003d IntStream.range(0, results.size())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", (i + 1), results.get(i)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .reduce(\"\", (prev, curr) -\u003e prev + curr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.showSearchResults(resultString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Checks whether \u003ccode\u003etask\u003c/code\u003e contains \u003ccode\u003equery\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param task task to be checked"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param query string to be queried from \u003ccode\u003etask\u003c/code\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return whether \u003ccode\u003etask\u003c/code\u003e contains \u003ccode\u003equery\u003c/code\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private boolean containsQuery(String task, String query) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String ignoreCaseTask \u003d task.toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String ignoreCaseQuery \u003d query.toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return ignoreCaseTask.contains(ignoreCaseQuery);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 57
    }
  },
  {
    "path": "src/main/java/duke/command/task/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a new task to be added to a \u003ccode\u003eTaskManager\u003c/code\u003e object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ListCommand extends TaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Lists all tasks in \u003ccode\u003etaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskManager task manager which contains all tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return all tasks as formatted string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.showList(taskManager.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 22
    }
  },
  {
    "path": "src/main/java/duke/command/task/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.MultipleChecksException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a task to be marked as completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MarkDoneCommand extends TaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    int taskNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a command which allows the (taskNum)th task to be marked as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum (taskNum)th of task in \u003ccode\u003etaskList\u003c/code\u003e to be marked as completed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public MarkDoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes this command by marking \u003ccode\u003etask\u003c/code\u003e with \u003ccode\u003etaskNum\u003c/code\u003e as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs that command has been executed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskManager task manager which contains \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string indicating whether the task with \u003ccode\u003etaskNum\u003c/code\u003e has been marked"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) throws MultipleChecksException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        taskManager.markTaskDone(taskNum);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.update(taskManager.getTasksAsStream());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informDone(taskManager.getLastEditedTask());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 38
    }
  },
  {
    "path": "src/main/java/duke/command/task/TaskCmdType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Types of valid task commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public enum TaskCmdType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    DEADLINE, DELETE, DONE, EVENT, LIST, TODO, FIND"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 9
    }
  },
  {
    "path": "src/main/java/duke/command/task/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * An \u003ccode\u003eabstract\u003c/code\u003e class that represents all task commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "abstract class TaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final CommandType commandType \u003d CommandType.TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes a task command, and updates \u003ccode\u003emanager\u003c/code\u003e and \u003ccode\u003estorage\u003c/code\u003e, if necessary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager task manager which contains all inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all inputs on the local hard disk, if any"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string which updates user about the result of \u003ccode\u003ethis\u003c/code\u003e execution"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeException if execution is unsuccessful"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(Manager manager, OptionalStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return execute((TaskManager) manager, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes a task command, and updates \u003ccode\u003emanager\u003c/code\u003e and \u003ccode\u003estorage\u003c/code\u003e, if necessary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager task manager which contains all tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string which updates user about the result of \u003ccode\u003ethis\u003c/code\u003e execution"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeException if execution is unsuccessful"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public abstract String execute(TaskManager manager, OptionalStorage storage) throws DukeException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets command type of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return command type of \u003ccode\u003ethis\u003c/code\u003e command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 46
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/AnswerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.NoQuestionAskedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns a command that allows the previous question to be answered."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class AnswerCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a command which allows the previous question to be answered. The checking process is not"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * case-sensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param response response to previous question"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public AnswerCommand(String response) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Checks \u003ccode\u003eresponse\u003c/code\u003e against the actual \u003ccode\u003eanswer\u003c/code\u003e of the previous \u003ccode\u003etrivia\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaManager trivia manager that manages all trivia"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage containing all questions and answers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string which indicates whether \u003ccode\u003eresponse\u003c/code\u003e is correct"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws NoQuestionAskedException if no question was asked previously"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws NoQuestionAskedException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!triviaManager.hasAsked()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new NoQuestionAskedException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isCorrect \u003d triviaManager.checkAnswer(response);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informResult(isCorrect);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 39
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/AskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.NoTriviaException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns a command which allows a randomly selected question to be asked."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class AskCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Asks question from \u003ccode\u003etriviaManager\u003c/code\u003e randomly. A response to the question is required."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaManager trivia manager that manages all trivia"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage containing all questions and answers"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return randomly selected question from \u003ccode\u003etriviaManager\u003c/code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws NoTriviaException if no question and answer was provided previously"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws MissingAnswerException if previously asked question is not answered"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws NoTriviaException,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            MissingAnswerException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (triviaManager.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new NoTriviaException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String question \u003d triviaManager.askRandom();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.showQuestion(question);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 33
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/CheckCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.QuestionNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows checking of the answer for a question, if it is present in \u003ccode\u003etaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class CheckCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a command that checks the answer of \u003ccode\u003equestion\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param question question to be looked up"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CheckCommand(String question) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Checks the answer for \u003ccode\u003equestion\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaManager trivia manager that manages all trivia"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage containing all questions and answers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return the answer to \u003ccode\u003equestion\u003c/code\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws QuestionNotFoundException if \u003ccode\u003equestion\u003c/code\u003e has not been previously added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws MissingAnswerException if previously asked question is not answered"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws QuestionNotFoundException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        MissingAnswerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String answer \u003d triviaManager.findAnswer(question);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Ui.informAnswer(answer);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 43
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/NewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.Trivia;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns a command which allows a new \u003ccode\u003equestion\u003c/code\u003e and \u003ccode\u003eanswer\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * to be added to \u003ccode\u003etriviaManager\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class NewCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a command that allows a new \u003ccode\u003equestion\u003c/code\u003e and \u003ccode\u003eanswer\u003c/code\u003e to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param question question to be added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param answer answer for \u003ccode\u003equestion\u003c/code\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public NewCommand(String question, String answer) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Creates a new \u003ccode\u003equestion\u003c/code\u003e and \u003ccode\u003eanswer\u003c/code\u003e and adds it to \u003ccode\u003etriviaManager\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaManager trivia manager that manages all trivia"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage containing all questions and answers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string indicating that the new question has been added"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws MissingAnswerException if previously asked question is not answered"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws MissingAnswerException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Trivia trivia \u003d new Trivia(question, answer);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        triviaManager.add(trivia);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.add(trivia);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informNew(trivia);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 43
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/RemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.NoSuchInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns a command which allows a previously added \u003ccode\u003equestion\u003c/code\u003e and \u003ccode\u003eanswer\u003c/code\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * to be removed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class RemoveCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private int triviaId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a command that allows (triviaId)th question and answer to be removed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaId (triviaId)th in trivia to be removed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public RemoveCommand(int triviaId) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.triviaId \u003d triviaId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Removes (triviaId)th trivia."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaManager trivia manager that manages all trivia"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage containing all questions and answers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string indicating that (triviaId)th trivia has been successfully removed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws IndexOutOfBoundsException if (triviaId)th trivia doesn\u0027t exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws MissingAnswerException if previously asked question is not answered"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        NoSuchInputException, MissingAnswerException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        triviaManager.remove(triviaId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.update(triviaManager.getTriviasAsStream());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informRemoved(triviaManager.getLastEdited(), triviaManager.getSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 41
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns a command that allows all questions and answers in \u003ccode\u003etriviaManager\u003c/code\u003e to be listed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ShowCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Shows all questions and answers in \u003ccode\u003etriviaManager\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaManager trivia manager that manages all trivia"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage containing all questions and answers"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return all questions and answers that were previously added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws MissingAnswerException if previously asked question is not answered"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws MissingAnswerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.showTrivia(triviaManager.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 24
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/TriviaCmdType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Types of valid trivia command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public enum TriviaCmdType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ASK, CHECK, NEW, ANSWER, SHOW, REMOVE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 8
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/TriviaCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * An \u003ccode\u003eabstract\u003c/code\u003e class that represents all trivia commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "abstract class TriviaCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final CommandType commandType \u003d CommandType.TRIVIA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes a task command, and updates \u003ccode\u003emanager\u003c/code\u003e and \u003ccode\u003estorage\u003c/code\u003e, if necessary."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager task manager which contains all inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all inputs on the local hard disk, if any"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string which updates user about the result of \u003ccode\u003ethis\u003c/code\u003e execution"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeException if execution is unsuccessful"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(Manager manager, OptionalStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return execute((TriviaManager) manager, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes a task command, and updates \u003ccode\u003emanager\u003c/code\u003e and \u003ccode\u003estorage\u003c/code\u003e, if necessary."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaManager task manager which contains all tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string which updates user about the result of \u003ccode\u003ethis\u003c/code\u003e execution"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeException if execution is unsuccessful"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public abstract String execute(TriviaManager triviaManager, OptionalStorage storage) throws DukeException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected void isMissingAnswer(TriviaManager triviaManager) throws MissingAnswerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (triviaManager.hasAsked()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new MissingAnswerException(triviaManager.getAsked());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets command type of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return command type of \u003ccode\u003ethis\u003c/code\u003e command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 53
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that input could not be processed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that the input cannot be parsed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DukeParseException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a DukeParseException with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param msg detailed message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DukeParseException(String msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a DukeParseException without a specified message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DukeParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 28
    }
  },
  {
    "path": "src/main/java/duke/exception/ExtraArgException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that extra argument(s) in input was found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ExtraArgException extends DukeParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs an \u003ccode\u003eExtraArgException\u003c/code\u003e with the specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param msg the detail message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public ExtraArgException(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown when an invalid command is detected."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/LoadException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that the specified file cannot be read or written to successfully."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class LoadException extends IOException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Unable to read/write tasks to hard disk.\\nEntries will not be saved.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/NoSuchInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that an input cannot be found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class NoSuchInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a \u003ccode\u003eNoSuchInputException\u003c/code\u003e with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param msg the detail message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public NoSuchInputException(String msg) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/StoreParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that store input is incorrectly formatted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class StoreParseException extends DukeParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Incorrect format for change storage command. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            + \"Please input \u0027store \u003ctask or trivia\u003e \u003cpath\u003e\u0027.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/task/DeadlineParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that an error was encountered when trying to parse deadline input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeadlineParseException extends DukeParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a \u003ccode\u003eDeadlineParseException\u003c/code\u003e with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param str the detail message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DeadlineParseException(String str) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(str);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String specificErrMsg \u003d super.getMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert specificErrMsg !\u003d \"\" : \"Specific error message for DeadlineParseException should be present\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(specificErrMsg + \". Please input deadline info in the following format:\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                + \"deadline essay /by 20/1 1800\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 25
    }
  },
  {
    "path": "src/main/java/duke/exception/task/DeleteParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that delete input is incorrectly formatted."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeleteParseException extends DukeParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Incorrect format for delete command. Please input \u0027delete \u003ctask number\u003e\u0027.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/task/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that task description is missing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class EmptyDescriptionException extends DukeParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs an \u003ccode\u003eEmptyDescriptionException\u003c/code\u003e for a specific type of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskType type of task which has no description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public EmptyDescriptionException(String taskType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            type \u003d \"an event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (taskType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            type \u003d \"a todo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            type \u003d \"a deadline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"Task type should be an event, todo or deadline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"The description of %s cannot be empty.\", type);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 33
    }
  },
  {
    "path": "src/main/java/duke/exception/task/EventParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that event input is incorrectly formatted."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class EventParseException extends DukeParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs an \u003ccode\u003eEventParseException\u003c/code\u003e with the specified detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param string the detail message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public EventParseException(String string) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String specificErrMsg \u003d super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert specificErrMsg !\u003d \"\" : \"Specific error message for EventParserException should be present\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(super.getMessage() + \". Please input event info in the following format:\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                + \"event dance /at 20/1 1800-1830\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/task/MarkDoneParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that done input is incorrectly formatted."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MarkDoneParseException extends DukeParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Incorrect format for mark done command. Please input \u0027done \u003ctask number\u003e\u0027.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/task/MultipleChecksException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that the task has previously been marked as complete and it cannot be marked again."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MultipleChecksException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a \u003ccode\u003eMultipleChecksException\u003c/code\u003e to indicate that \u003ccode\u003etask\u003c/code\u003e with \u003ccode\u003etaskNum\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * has previously been completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum id of \u003ccode\u003etask\u003c/code\u003e in \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public MultipleChecksException(int taskNum) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"You have completed task %d earlier!\", taskNum);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/task/NoStorageChangeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Thrown to indicate that the specified file cannot be read or written to successfully."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class NoStorageChangeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a \u003ccode\u003eNoStorageChangeException\u003c/code\u003e to indicate that the specified file cannot be read or"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * written to."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path path where the tasks are supposed to be stored locally"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public NoStorageChangeException(String path) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Unable to change storage file to that stored at %s\", path);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/EmptyQuestionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class EmptyQuestionException extends DukeParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Unable to get an answer for an empty question.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/MissingAnswerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MissingAnswerException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public MissingAnswerException(String question) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Please answer the previous question in the following format:\\nanswer \u003cyour answer\u003e\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            + \"\\n\\nPrevious question: %s\", question);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/NoQuestionAskedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class NoQuestionAskedException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"No question was asked previously. Get a random question by typing \u0027ask\u0027.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/NoTriviaException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class NoTriviaException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"There is no questions in your trivia bank!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/QuestionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class QuestionNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Unable to find question\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/RemoveParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class RemoveParseException extends DukeParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Incorrect format for remove command. Please input \u0027remove \u003ctask number\u003e\u0027.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/TriviaParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TriviaParseException extends DukeParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public TriviaParseException(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s.\\nPlease input trivia in the following format:\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            + \"new Where is Singapore? /ans South East Asia\", super.getMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 15
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.ChangeStorageCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.TaskCmdType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.TriviaCmdType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.ExtraArgException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.StoreParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Parser to parse input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int NUM_ARGS_STORE \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // prevents user from directly creating a parser object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Parser() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a given input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userInput input provided by the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a command that can be executed, if \u003ccode\u003euserInput\u003c/code\u003e is valid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws InvalidCommandException if the command used is not recognised"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeParseException if the command is correct but the input cannot be parsed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Optional\u003cCommand\u003e parse(String userInput) throws InvalidCommandException, DukeParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        CommandType cmdType \u003d Command.getCmdType(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (cmdType.equals(CommandType.TASK)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseTaskCommand(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (cmdType.equals(CommandType.TRIVIA)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseTriviaCommand(userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (cmdType.equals(CommandType.BYE)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseByeCommand(userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (cmdType.equals(CommandType.STORE)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseStoreCommand(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (cmdType.equals(CommandType.INVALID)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"Failed to catch all possible user command types\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses task command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userInput input from user"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return task command, if parsing is successful"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeParseException if input is unsuccessfully parsed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Optional\u003cCommand\u003e parseTaskCommand(String userInput) throws DukeParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String userCmdString \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        TaskCmdType userCommand \u003d TaskCmdType.valueOf(userCmdString.toUpperCase());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String details \u003d StringFormatter.excludeRegex(userCmdString, userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return TaskParser.parse(userCommand, details);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses trivia command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userInput input from user"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return trivia command, if parsing is successful"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeParseException if input is unsuccessfully parsed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Optional\u003cCommand\u003e parseTriviaCommand(String userInput) throws DukeParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String userCmdString \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        TriviaCmdType userCommand \u003d TriviaCmdType.valueOf(userCmdString.toUpperCase());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String details \u003d StringFormatter.excludeRegex(userCmdString, userInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return TriviaParser.parse(userCommand, details);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses exit command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userInput input from user"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return exit command, if parsing is successful"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws ExtraArgException if too many arguments are found"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Optional\u003cCommand\u003e parseByeCommand(String userInput) throws ExtraArgException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] userCmdString \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasExtraArg \u003d userCmdString.length \u003e 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (hasExtraArg) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new ExtraArgException(\"Bye command has extra argument. To exit, just type \u0027bye\u0027.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Optional.of(new ExitCommand());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses store command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param userInput input from user"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return store command, if parsing is successful"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws StoreParseException if input is unsuccessfully parsed"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Optional\u003cCommand\u003e parseStoreCommand(String userInput) throws StoreParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedArgs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (parsedArgs.length !\u003d NUM_ARGS_STORE) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new StoreParseException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String details \u003d StringFormatter.excludeRegex(parsedArgs[0], userInput);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Optional.of(new ChangeStorageCommand(details));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 116
    }
  },
  {
    "path": "src/main/java/duke/parser/StringFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * String formatter that removes a specified string and returns the string that begins after the specified string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "class StringFormatter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private StringFormatter() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Removes a specified string and returns the string that begins after the specified string."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param regex specified string to be excluded"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param originalStr original string from which the specified string is to be removed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return the string that begins after the specified string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static String excludeRegex(String regex, String originalStr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        int regexLen \u003d regex.length();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        int regexStartIndex \u003d originalStr.indexOf(regex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String editedStr \u003d originalStr.substring(regexLen + regexStartIndex).trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return editedStr;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 24
    }
  },
  {
    "path": "src/main/java/duke/parser/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.MarkDoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.TaskCmdType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.ExtraArgException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.DeadlineParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.DeleteParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.EmptyDescriptionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.EventParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.MarkDoneParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.DateFormatter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Task parser parses input for task commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "class TaskParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int NUM_ARG_DEADLINE \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int NUM_ARG_EVENT \u003d 2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final String SEPARATOR_DEADLINE \u003d \" /by \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final String SEPARATOR_EVENT \u003d \" /at \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final String SEPARATOR_TIME \u003d \"-\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private TaskParser() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses the input for a task command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskCmdType type of task command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return command that allows the specified \u003ccode\u003etaskCmdType\u003c/code\u003e to be executed, if parsing is successful"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeParseException if details of command cannot be parsed successfully"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static Optional\u003cCommand\u003e parse(TaskCmdType taskCmdType, String details) throws DukeParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Optional\u003cCommand\u003e command;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        switch (taskCmdType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseDelete(details));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseDone(details));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseList(details));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseFind(details));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Command addCommand \u003d new AddCommand(parseDeadline(details));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            command \u003d Optional.of(addCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Command addCommand1 \u003d new AddCommand(parseEvent(details));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            command \u003d Optional.of(addCommand1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Command addCommand2 \u003d new AddCommand(parseTodo(details));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            command \u003d Optional.of(addCommand2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"All task commands should be valid type\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a delete command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of delete command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return delete command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DeleteParseException if parsing of details is unsuccessful"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseDelete(String details) throws DeleteParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            int taskId \u003d Integer.parseInt(details) - 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new DeleteCommand(taskId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeleteParseException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a mark done command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of mark done command"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return mark done command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws MarkDoneParseException if parsing of details is unsuccessful"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseDone(String details) throws MarkDoneParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            int taskId \u003d Integer.parseInt(details) - 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new MarkDoneCommand(taskId);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new MarkDoneParseException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a list command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of list command, which should be an empty string"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return list command"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws ExtraArgException if details contain extra arguments"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseList(String details) throws ExtraArgException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!details.equals(\"\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new ExtraArgException(\"List command has extra argument. To list tasks, just type \u0027list\u0027.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a find command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of find command"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return find command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseFind(String details) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new FindCommand(details);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a deadline command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of deadline command"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return delete command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeParseException if details cannot be parsed successfully"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Task parseDeadline(String details) throws DukeParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        // required format: \u003ctaskDetails\u003e /by \u003cday/Month HH:mm\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasSeparator \u003d details.contains(SEPARATOR_DEADLINE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!hasSeparator) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String errMsg \u003d String.format(\"Missing \u0027%s\u0027 between deadline info and date/time\", SEPARATOR_DEADLINE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeadlineParseException(errMsg);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedDetails \u003d details.split(SEPARATOR_DEADLINE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (parsedDetails.length !\u003d NUM_ARG_DEADLINE) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeadlineParseException(\"Missing deadline info or date/time info, or extra fields\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String info \u003d parsedDetails[0];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String dateTimeStr \u003d parsedDetails[1];"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar dateTimeInfo \u003d DateFormatter.parseDate(dateTimeStr);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new Deadline(info, dateTimeStr, dateTimeInfo);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeadlineParseException(\"Incorrect date/time format for deadline\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses an event command."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of event command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return event command"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeParseException if details cannot be parsed successfully"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Task parseEvent(String details) throws DukeParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        // required format: \u003ctaskDetails\u003e /at \u003cday/Month HH:mm-HH:mm\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasSeparator \u003d details.contains(SEPARATOR_EVENT);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!hasSeparator) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String errMsg \u003d String.format(\"Missing \u0027%s\u0027 between event info and date/time\", SEPARATOR_EVENT);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(errMsg);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedDetails \u003d details.split(SEPARATOR_EVENT);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (parsedDetails.length !\u003d NUM_ARG_EVENT) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Missing event info or date/time info, or extra fields\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String info \u003d parsedDetails[0];"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String dateTimeStr \u003d parsedDetails[1];"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] dateTimeArr \u003d dateTimeStr.split(\" \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasStartEndTime \u003d dateTimeArr.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!hasStartEndTime) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Missing date or time\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String date \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] times \u003d dateTimeArr[1].split(SEPARATOR_TIME);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar startTime \u003d DateFormatter.parseDate(date + \" \" + times[0]);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar endTime \u003d DateFormatter.parseDate(date + \" \" + times[1]);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new Event(info, dateTimeStr, startTime, endTime);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Incorrect date/time format for deadline\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a todo command."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of todo command"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return todo command"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws EmptyDescriptionException if details is empty"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Todo parseTodo(String details) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Todo(details);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 235
    }
  },
  {
    "path": "src/main/java/duke/parser/TriviaParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.AnswerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.AskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.CheckCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.NewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.RemoveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.ShowCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.TriviaCmdType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.ExtraArgException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.EmptyQuestionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.RemoveParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.TriviaParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Trivia parser parses input for trivia command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "class TriviaParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final String SEPARATOR_QNS_AND_ANS \u003d \" /ans \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses the input for a trivia command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaCmdType type of trivia command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return command that allows the specified \u003ccode\u003etriviaCmdType\u003c/code\u003e to be executed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws DukeParseException if details of command cannot be parsed successfully"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static Optional\u003cCommand\u003e parse(TriviaCmdType triviaCmdType, String details) throws DukeParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        switch (triviaCmdType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case ASK:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseAsk(details));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case ANSWER:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseAnswer(details));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case NEW:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseNew(details));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case CHECK:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseCheck(details));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case SHOW:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseShow(details));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case REMOVE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseRemove(details));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"All trivia commands should be valid type\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses an ask command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of ask command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return ask command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws ExtraArgException if extra arguments are found in details"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseAsk(String details) throws ExtraArgException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!details.equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new ExtraArgException(\"Ask command has extra argument. \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                + \"To get a random question, just type \u0027ask\u0027\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new AskCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses an answer command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of answer command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return answer command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseAnswer(String details) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new AnswerCommand(details);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a new command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of new command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return new command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws TriviaParseException if parsing of details is unsuccessful"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseNew(String details) throws TriviaParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasSeparator \u003d details.contains(SEPARATOR_QNS_AND_ANS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!hasSeparator) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String errorMsg \u003d String.format(\"Missing %s between question and answer\", SEPARATOR_QNS_AND_ANS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new TriviaParseException(errorMsg);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String question \u003d details.split(SEPARATOR_QNS_AND_ANS)[0];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String answer \u003d details.split(SEPARATOR_QNS_AND_ANS)[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (question.equals(\"\") || answer.equals(\"\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new TriviaParseException(\"Both question and answer cannot be empty\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new NewCommand(question, answer);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a check command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of check command"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return check command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws EmptyQuestionException if there is no question in \u003ccode\u003etriviaManager\u003c/code\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseCheck(String details) throws EmptyQuestionException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EmptyQuestionException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new CheckCommand(details);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a show command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of show command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return show command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws ExtraArgException if extra arguments are found in details"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseShow(String details) throws ExtraArgException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!details.equals(\"\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new ExtraArgException(\"Show command has extra argument. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    + \"To get a random question, just type \u0027show\u0027\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new ShowCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses a remove command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details details of remove command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return remove command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws RemoveParseException if format of details is incorrect"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseRemove(String details) throws RemoveParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            int triviaId \u003d Integer.parseInt(details);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new RemoveCommand(triviaId);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new RemoveParseException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 148
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.DateFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class represents tasks that need to be done before a specific date/time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Calendar dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a task with a deadline field."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName name of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details latest completion date and time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param dateTime formatted version of \u003ccode\u003edetails\u003c/code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Deadline(String taskName, String details, Calendar dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, taskName, details);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTask\u003c/code\u003e representing a \u003ccode\u003eDeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * when given a string representation of it."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param timeInfo latest completion date and time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e representing the given input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Task stringToTask(String name, String timeInfo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Deadline(name, timeInfo, DateFormatter.parseCorrectedDate(timeInfo));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a formatted string version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string version of \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", isDone ? SYMBOL_COMPLETE : SYMBOL_INCOMPLETE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                taskName, DateFormatter.dateBeautifier().format(dateTime.getTime()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Checks whether \u003ccode\u003eObject o\u003c/code\u003e has the same \u003ccode\u003etaskName\u003c/code\u003e and \u003ccode\u003edetails\u003c/code\u003e as"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param o \u003ccode\u003eObject\u003c/code\u003e to be compared with \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return boolean indicating whether the two objects are \u0027equal\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (o instanceof Deadline) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return this.taskName \u003d\u003d ((Deadline) o).taskName"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    \u0026\u0026 this.details \u003d\u003d ((Deadline) o).details;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 75
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.DateFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class represents tasks that start at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Calendar startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Calendar endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an event with a task name, start time and end time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName task of name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details date, start time and end time of event in the format d/M hhmm-hhmm (24h format)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param startTime formatted start time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param endTime formatted end time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Event(String taskName, String details, Calendar startTime, Calendar endTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, taskName, details);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTask\u003c/code\u003e representing an \u003ccode\u003eEvent\u003c/code\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * when given a string representation of it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e representing the given input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static Task stringToTask(String name, String timeInfo) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] dateTimeArr \u003d timeInfo.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String date \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] times \u003d dateTimeArr[1].split(\"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String time1 \u003d times[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String time2 \u003d times[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String timeDate1 \u003d date + \" \" + time1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String timeDate2 \u003d date + \" \" + time2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Event(name, timeInfo, DateFormatter.parseCorrectedDate(timeDate1),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            DateFormatter.parseCorrectedDate(timeDate2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a formatted string version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string version of \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s-%s)\", isDone ? SYMBOL_COMPLETE : SYMBOL_INCOMPLETE, taskName,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DateFormatter.dateBeautifier().format(startTime.getTime()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DateFormatter.dateBeautifier().format(endTime.getTime()).split(\" \")[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 70
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Input;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * An \u003ccode\u003eabstract\u003c/code\u003e class representing a task which has name and status (whether it is done) fields."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public abstract class Task extends Input {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected static final String SYMBOL_COMPLETE \u003d \"\\u2714\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected static final String SYMBOL_INCOMPLETE \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected boolean isDone \u003d false; // by default it\u0027s false"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a task with \u003ccode\u003etaskName\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName name of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public abstract String getInfo();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Converts a string represented task to an instance of a \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskInfo summarised string representation of task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return an instance of \u003ccode\u003eTask\u003c/code\u003e with fields found in \u003ccode\u003etaskInfo\u003c/code\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Task strToTask(String taskInfo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedInfo \u003d taskInfo.split(\" \\\\| \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String type \u003d parsedInfo[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean done \u003d Integer.parseInt(parsedInfo[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d parsedInfo[2];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task \u003d Todo.stringToTask(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            time \u003d parsedInfo[3];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task \u003d Deadline.stringToTask(name, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            time \u003d parsedInfo[3];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task \u003d Event.stringToTask(name, time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Marks \u003ccode\u003ethis\u003c/code\u003e as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert isDone : \"Task\u0027s isDone should be true\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a boolean indicating whether \u003ccode\u003ethis\u003c/code\u003e is done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003ethis\u003c/code\u003e is done; otherwise, it returns \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 81
    }
  },
  {
    "path": "src/main/java/duke/task/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.NoSuchInputException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.MultipleChecksException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns a task manager which allows us to read, add, delete and update the status of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TaskManager implements Manager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Optional\u003cTask\u003e lastEditedTask \u003d Optional.empty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a \u003ccode\u003eTaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds tasks that are retrieved from a \u003ccode\u003eStream\u003c/code\u003e of strings representing a"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * summarised version of \u003ccode\u003etask\u003c/code\u003es."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * \u003cp\u003eThe \u003ccode\u003eStream\u003c/code\u003e can be retrieved from a \u003ccode\u003eStorage\u003c/code\u003e object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param previousTasks \u003ccode\u003eStream\u003c/code\u003e of summarised string representation of \u003ccode\u003etask\u003c/code\u003es"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void addPrevious(Stream\u003cString\u003e previousTasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        tasks.addAll(toTaskList(previousTasks));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds \u003ccode\u003enewTask\u003c/code\u003e to \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param newTask task to be added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        lastEditedTask \u003d Optional.of(newTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Deletes task with \u003ccode\u003etaskNum\u003c/code\u003e in \u003ccode\u003ethis\u003c/code\u003e task manager."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum index of task to be deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void deleteTask(int taskNum) throws NoSuchInputException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            lastEditedTask \u003d Optional.of(tasks.get(taskNum));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            tasks.remove(taskNum);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new NoSuchInputException(\"No such task found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Marks task with \u003ccode\u003etaskNum\u003c/code\u003e as done."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum index of task to be marked as completed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws MultipleChecksException if the task with index \u003ccode\u003etaskNum\u003c/code\u003e has been marked as done previously"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void markTaskDone(int taskNum) throws MultipleChecksException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Task completedTask \u003d tasks.get(taskNum);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (completedTask.isDone()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                throw new MultipleChecksException(taskNum + 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                completedTask.setDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                lastEditedTask \u003d Optional.of(completedTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new IndexOutOfBoundsException(\"No such task\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets the last task which has been added, deleted or marked as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return last task which has been added, deleted or marked as done"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Task getLastEditedTask() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return lastEditedTask.orElseThrow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns the number of tasks in this instance of \u003ccode\u003eTaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return number of tasks in this instance of \u003ccode\u003eTaskManager\u003c/code\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a \u003ccode\u003eStream\u003c/code\u003e which represents every task in this instance of \u003ccode\u003eTaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eStream\u003c/code\u003e which represents every task in this instance of \u003ccode\u003eTaskManager\u003c/code\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Stream\u003cTask\u003e getTasksAsStream() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return tasks.stream();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private List\u003cTask\u003e toTaskList(Stream\u003cString\u003e allTasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return allTasks.map(taskInfo -\u003e toTask(taskInfo))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Converts a string which represents a task to a \u003ccode\u003eTask\u003c/code\u003e instance."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskInfo string which summarises a task"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return task which is represented by the specified string"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Task toTask(String taskInfo) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Task.strToTask(taskInfo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String listedTask \u003d IntStream.range(0, tasks.size())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", (i + 1), tasks.get(i)))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .reduce(\"\", (prev, curr) -\u003e prev + curr);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return listedTask;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 137
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class represents tasks without any date/time attached to it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a todo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName name or details of task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"T | %d | %s\", isDone ? 1 : 0, taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTask\u003c/code\u003e representing a \u003ccode\u003eTodo\u003c/code\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * when given a string representation of it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e representing the given input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Task stringToTask(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Todo(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a formatted string version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string version of \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"[T][%s] %s\", isDone ? SYMBOL_COMPLETE : SYMBOL_INCOMPLETE, taskName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Checks whether \u003ccode\u003eObject o\u003c/code\u003e has the same \u003ccode\u003etaskName\u003c/code\u003e as \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param o \u003ccode\u003eObject\u003c/code\u003e to be compared with \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return boolean indicating whether the two objects are \u0027equal\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (o instanceof Todo) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return this.taskName \u003d\u003d (((Todo) o).taskName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 60
    }
  },
  {
    "path": "src/main/java/duke/trivia/Trivia.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Input;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * An \u003ccode\u003eabstract\u003c/code\u003e class representing a trivia with a \u003ccode\u003equestion\u003c/code\u003e and an \u003ccode\u003eanswer\u003c/code\u003e."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Trivia extends Input {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a trivia that has a question and an answer."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param question question that is associated with the answer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param answer answer that is associated with the question"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Trivia(String question, String answer) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.question \u003d question.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.answer \u003d answer.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets question of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003ethis\u003c/code\u003e question"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String getQuestion() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets answer of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003ethis\u003c/code\u003e answer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String getAnswer() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets summarised version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string which summarises \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s | %s\", question, answer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the response is equal to \u003ccode\u003ethis\u003c/code\u003e answer. The comparison is not"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * case sensitive."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param response response to \u003ccode\u003ethis\u003c/code\u003e question"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the response is equal to \u003ccode\u003ethis\u003c/code\u003e question when capitalisation is ignored"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    boolean isAnswerCorrect(String response) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return response.equalsIgnoreCase(answer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Converts a string which summarises a trivia to a trivia."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaStr string summarising the trivia"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return trivia that is represented by the specified string"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static Trivia strToTrivia(String triviaStr) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] qnsAndAns \u003d triviaStr.split(\"\\\\|\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String qns \u003d qnsAndAns[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String ans \u003d qnsAndAns[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Trivia(qns, ans);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Q: %s\\nA: %s\", question, answer);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 78
    }
  },
  {
    "path": "src/main/java/duke/trivia/TriviaManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.NoSuchInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Manager for all questions and answers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TriviaManager implements Manager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private HashMap\u003cString, String\u003e quickQnsAndAns \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private List\u003cTrivia\u003e trivias \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Optional\u003cTrivia\u003e asked \u003d Optional.empty();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Optional\u003cTrivia\u003e lastEdited \u003d Optional.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds all previous trivias, as found in the stream of provided strings."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storedTrivias stream of strings that represent trivias"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void addPrevious(Stream\u003cString\u003e storedTrivias) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storedTrivias.forEach(t -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Trivia trivia \u003d Trivia.strToTrivia(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            trivias.add(trivia);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String question \u003d trivia.getQuestion().toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String answer \u003d trivia.getAnswer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            quickQnsAndAns.put(question, answer);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Removes all trivias."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        quickQnsAndAns.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        trivias.clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds a new trivia to \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param trivia trivia to be added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void add(Trivia trivia) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String question \u003d trivia.getQuestion();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String answer \u003d trivia.getAnswer();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        quickQnsAndAns.put(question.toLowerCase(), answer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        trivias.add(trivia);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        lastEdited \u003d Optional.of(trivia);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Asks a question that is randomly selected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return question that is randomly selected"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String askRandom() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        int questionNum \u003d rand.nextInt(trivias.size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Trivia trivia \u003d trivias.get(questionNum);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        asked \u003d Optional.of(trivia);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivia.getQuestion();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified response is equal to the correct answer. The check is case"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * insensitive."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param response the specified response"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified response is equal to the correct answer"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean checkAnswer(String response) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!asked.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"There should be a previously asked question\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Trivia trivia \u003d asked.get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        asked \u003d Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivia.isAnswerCorrect(response);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Finds the answer for the specified question."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param question question whose answer is to be returned"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return answer to the specified question"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String findAnswer(String question) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String qnsIgnoreCase \u003d question.toLowerCase();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return quickQnsAndAns.get(qnsIgnoreCase);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Removes the (triviaId)th trivia from \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviaId the (triviaId)th trivia to be removed"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws NoSuchInputException if the (triviaId)th does not exist"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void remove(int triviaId) throws NoSuchInputException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        int actualId \u003d triviaId - 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (actualId \u003e\u003d trivias.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new NoSuchInputException(\"No such question/answer.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String question \u003d trivias.get(actualId).getQuestion();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        quickQnsAndAns.remove(question);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Trivia deletedTrivia \u003d trivias.get(actualId);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        trivias.remove(actualId);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        lastEdited \u003d Optional.of(deletedTrivia);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets the number of trivias."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return number of trivias"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivias.size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if there is no trivia in \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if there is no trivia in \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivias.isEmpty();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets the last edited trivia."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return the last edited trivia"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Trivia getLastEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (lastEdited.isEmpty()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"There should be a previously edited trivia\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return lastEdited.get();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if there is a pending question that has not been answered."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if there is a pending question that has not been answered"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean hasAsked() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return asked.isPresent();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets the pending question which has not been answered."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return the pending question which has not been answered."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getAsked() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!asked.isPresent()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"There should be a previously asked question\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return asked.get().getQuestion();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns all trivias as a stream."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return all trivias as a stream"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Stream\u003cTrivia\u003e getTriviasAsStream() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivias.stream();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String allTrivias \u003d IntStream.range(0, trivias.size())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            .mapToObj(i -\u003e String.format(\"Trivia %d\\n%s\", (i + 1), trivias.get(i)))"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            .reduce(\"\", (prev, curr) -\u003e prev + curr + \"\\n\\n\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            .trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return allTrivias;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 189
    }
  },
  {
    "path": "src/main/java/duke/util/DateFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Date formatter which parses date and allows date to be formatted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int CURRENT_YEAR \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"d/M HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // prevents user from directly creating a DateFormatter object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private DateFormatter() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses date that is represented by a string and returns a \u003ccode\u003eCalendar\u003c/code\u003e object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param str date that is to be parsed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a \u003ccode\u003eCalendar\u003c/code\u003e object that represents the input date formally"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws ParseException if the provided string cannot be parsed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Calendar parseDate(String str) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Date date \u003d dateFormatter.parse(str);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        c.setTime(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        c.set(Calendar.YEAR, CURRENT_YEAR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses date that is represented by a string and returns a \u003ccode\u003eCalendar\u003c/code\u003e object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * It is known that the input string can be parsed successfully."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param str date that is to be parsed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a \u003ccode\u003eCalendar\u003c/code\u003e object that represents the input date formally."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Calendar parseCorrectedDate(String str) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Date date \u003d dateFormatter.parse(str);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            c.setTime(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            c.set(Calendar.YEAR, CURRENT_YEAR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"Date format was mistakenly accepted as correct\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return c;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a \u003ccode\u003eSimpleDateFormat\u003c/code\u003e that can be used to format date in the dd/MM/yy h:mm am/pm format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a \u003ccode\u003eSimpleDateFormat\u003c/code\u003e that can be used to format date in the dd/MM/yy h:mm am/pm format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static SimpleDateFormat dateBeautifier() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new SimpleDateFormat(\"dd/MM/yy h:mma\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 60
    }
  },
  {
    "path": "src/main/java/duke/util/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Duke\u0027s response."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructor for \u003ccode\u003eResponse\u003c/code\u003e that has a message, which will be shown to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * It also indicates the command type of the previous command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param message message to be shown to user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param commandType command type of the previous command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Response(String message, CommandType commandType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructor for an empty message which also indicates that the command is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Response() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        new Response(\"\", CommandType.INVALID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets the command type of the previous command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return command type of the previous command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return duke\u0027s response to user\u0027s input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the previous command is an exit command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the previous command is an exit command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType.equals(CommandType.BYE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 53
    }
  },
  {
    "path": "src/main/java/duke/util/storage/OptionalStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Input;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.LoadException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.NoStorageChangeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Optional storage which may contain an actual storage. This allows inputs to be stored locally."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class OptionalStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Optional\u003cStorage\u003e storage \u003d Optional.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs an optional storage that allows inputs to be stored at a specified path."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path the specified path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws LoadException if the file cannot be read/written to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public OptionalStorage(String path) throws LoadException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage \u003d Optional.of(new Storage(path));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs an optional storage that does not allow inputs to be stored locally."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public OptionalStorage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds an input to the local file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param input input to be added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void add(Input input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e s.add(input));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Loads all inputs of \u003ccode\u003ethis\u003c/code\u003e onto a specified manager."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager the specified manager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void load(Manager manager) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e manager.addPrevious(s.load()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Updates the manager with the inputs found at the specified path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager manager to be updated"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void updateManager(Manager manager) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        manager.removeAll();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        load(manager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Updates storage with the specified inputs."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param inputs stream of specified inputs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void update(Stream\u003c? extends Input\u003e inputs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e s.update(inputs));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Changes the local storage to the specified path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path the specified path"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws NoStorageChangeException if the change is unsuccessful"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void update(String path) throws NoStorageChangeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            storage \u003d Optional.of(new Storage(path));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (LoadException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new NoStorageChangeException(path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 82
    }
  },
  {
    "path": "src/main/java/duke/util/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.LoadException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Storage which contains an actual storage. This allows inputs to be stored locally."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Constructs a storage that allows inputs to be stored at a specified path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path the specified path"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws LoadException if the file cannot be read/written to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    Storage(String path) throws LoadException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (path.equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                throw new LoadException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else if (!Files.exists(Paths.get(path))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                createFile(path);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (!Files.isReadable(Paths.get(path)) || !Files.isWritable(Paths.get(path))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                throw new LoadException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new LoadException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Creates a new file at \u003ccode\u003epath\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path path where new file will be located relative to main app\u0027s working directory"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private void createFile(String path) throws LoadException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String[] parsedPath \u003d path.split(\"/\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // determine dirs path"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String dirPath \u003d IntStream.range(0, parsedPath.length - 1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    .mapToObj(i -\u003e parsedPath[i])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    .reduce(\"\", (prev, curr) -\u003e prev + curr + \"/\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Files.createDirectories(Paths.get(dirPath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Files.createFile(Paths.get(path));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new LoadException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a \u003ccode\u003eStream\u003c/code\u003e of strings. Each string represents a summarised version of an input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return strings of summarised version of all inputs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    Stream\u003cString\u003e load() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Files.lines(Paths.get(path));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Stream.of(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds input to file found at \u003ccode\u003ethis\u003c/code\u003e path."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param input input to be added to file"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    void add(Input input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            BufferedWriter w \u003d new BufferedWriter(new FileWriter(path, true));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            w.write(input.getInfo() + System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            w.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"File should be writeable\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Rewrites the entire file to save updates made to \u003ccode\u003eManager\u003c/code\u003e."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param inputs summarised string representation of all inputs found in \u003ccode\u003emanager\u003c/code\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    void update(Stream\u003c? extends Input\u003e inputs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            BufferedWriter w \u003d new BufferedWriter(new FileWriter(path));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            inputs.forEach(input -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    w.write(input.getInfo() + System.lineSeparator());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    System.err.println(\"Unable to update storage: \" + e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            w.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"File should be readable and writeable\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 109
    }
  },
  {
    "path": "src/main/java/duke/util/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * A custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets a user dialog."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param text user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param img profile image of user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return dialog box with user\u0027s input and profile image"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets a duke dialog."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param text duke\u0027s response"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param img image of duke"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return dialog box with duke\u0027s response and duke\u0027s image"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.rgb(230, 230, 230), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 80
    }
  },
  {
    "path": "src/main/java/duke/util/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.LoadException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Response;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Sets duke."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param d duke to be used"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Response response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DialogBox.getDukeDialog(response.getMessage(), dukeImage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (response.isExit()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            disableInput();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Greets user when s/he first logs in."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void greetUser() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DialogBox.getDukeDialog(duke.sayHi(), dukeImage)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Inform user that previous tasks cannot be loaded and new tasks will not be saved locally."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void informStorageCapabilities() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!duke.hasTaskStorage()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String errMsg \u003d (new LoadException()).toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DialogBox.getDukeDialog(errMsg, dukeImage)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            );"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Prevents user from entering further input."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void disableInput() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        sendButton.setDisable(true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 102
    }
  },
  {
    "path": "src/main/java/duke/util/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.Trivia;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * UI that formats duke\u0027s responses."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // default statements"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String hi \u003d \"Hello! I\u0027m Duke. What can I do for you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String bye \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // default statements for task commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String listIntro \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String searchResultsIntro \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // default statements for trivia commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String foundAnswer \u003d \"Here is the answer to your question:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String newInformation \u003d \"My brains just grew in size! I have added:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String askQuestion \u003d \"Here is a question for you:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String triviasListIntro \u003d \"Here is your question bank:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String sadFace \u003d \"\\u2639\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String smileyFace \u003d \"\\u263A\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Says hi to user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return greeting"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String sayHi() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return hi;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Says bye to user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @returns farewell"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String sayBye() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return bye;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Shows user a list of all tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showList(String tasksAsString) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return listIntro + \"\\n\" + tasksAsString;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that task is completed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param completedTask task which has been successfully marked as done"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string indicating that specified task has been marked as completed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informDone(Task completedTask) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\\n\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                completedTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that the task has been deleted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param deletedTask task which has been successfully deleted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param tasksNum number of tasks remaining in the list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string indicating that the specified task has been deleted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informDeleted(Task deletedTask, int tasksNum) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Noted. I\u0027ve removed this task:\\n%s\\n\\nNow you have %d tasks in the list.\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                deletedTask, tasksNum);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that the task has been added."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param addedTask task which has been successfully added"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param tasksNum number of tasks in the list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string informing that the specified task has been successfully added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informAdded(Task addedTask, int tasksNum) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\n\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                        + \"Now you have %d tasks in the list.\\n\", addedTask, tasksNum);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that the storage has been added."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path path to file where inputs will be stored"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string informing that the storage has been changed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informChanged(String path) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Done! Tasks from %s have been loaded and all new entries will be stored at %s\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            path, path);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that an error has occurred."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param e \u003ccode\u003eException\u003c/code\u003e encountered"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return error message"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showError(Exception e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return sadFace + \" OOPS!!! \" + e.getMessage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Shows user the search results."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param tasksAsString search results"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted search results"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showSearchResults(String tasksAsString) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return searchResultsIntro + \"\\n\" + tasksAsString;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that the answer has been found."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param answer answer to question"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted answer"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informAnswer(String answer) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s\\n%s\", foundAnswer, answer);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that the new trivia has been added."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param trivia new trivia that has been added"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return string informing"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informNew(Trivia trivia) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s\\n%s\", newInformation, trivia);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Shows the user the randomly selected question."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param question the randomly selected question"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted question"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showQuestion(String question) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s\\n%s\", askQuestion, question);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Shows the user all questions and answers available in trivia manager."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviasAsList list of all questions and answers"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted list of all question and answers"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showTrivia(String triviasAsList) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s\\n\\n%s\", triviasListIntro, triviasAsList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs the user that the specified trivia has been removed from trivia manager."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param deletedTrivia the specified trivia to be removed"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param triviasNum the number of questions and answers left after deletion"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string which indicates that the specified trivia has been deleted"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informRemoved(Trivia deletedTrivia, int triviasNum) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Noted. I\u0027ve removed:\\n%s\\n\\nNow you have %d questions in your trivia bank.\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                deletedTrivia, triviasNum);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user whether the previous question is correctly answered."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param isCorrect whether the previous question is correctly answered"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string which indicates whether the previous question is correctly answered"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informResult(boolean isCorrect) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return String.format(\"Hooray! You got it right %s\", smileyFace);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return String.format(\"Oops! %s Try again the next time round.\", sadFace);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 188
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"conversation-box\" text\u003d\"Label\" textOverrun\u003d\"LEADING_ELLIPSIS\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"2.0\" right\u003d\"2.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    fx:controller\u003d\"duke.util.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" styleClass\u003d\"conversation-box\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 21
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int YEAR \u003d 2019;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"d/M HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_incompleteTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar dateTime1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dateTime1.set(YEAR, 9, 28, 23, 59);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"D | 0 | return book | 28/9 2359\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                (new Deadline(\"return book\", \"28/9 2359\", dateTime1)).getInfo());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_completedTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dateTime.set(YEAR, 9, 28, 23, 59);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"28/9 2359\", dateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        deadline.setDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"D | 1 | return book | 28/9 2359\", deadline.getInfo());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void stringToTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d \"read book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String timeInfo \u003d \"29/9 1259\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dateTime.set(YEAR, 9, 29, 12, 59);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(new Deadline(name, timeInfo, dateTime), Deadline.stringToTask(name, timeInfo));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_incompleteTask() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Date date \u003d dateFormatter.parse(\"28/9\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.setTime(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.set(Calendar.YEAR, 2019);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assertEquals(\"[D][\\u2718] return book (by: 28/09/19 11:59PM)\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    (new Deadline(\"return book\", \"28/9 2359\", dateTime)).toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // ignore"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_completedTask() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Date date \u003d dateFormatter.parse(\"28/9\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.setTime(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.set(Calendar.YEAR, 2019);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"return book\", \"28/9 2359\", dateTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            deadline.setDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assertEquals(\"[D][\\u2714] return book (by: 28/09/19 11:59PM)\", deadline.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // ignore"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 74
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_incompleteTask() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"T | 0 | read book\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                (new Todo(\"read book\")).getInfo());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_completedTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        todo.setDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"T | 1 | read book\", todo.getInfo());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void stringToTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d \"read book\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(new Todo(name), Todo.stringToTask(name));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_incompleteTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"[T][\\u2718] read book\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                (new Todo(\"read book\")).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_completedTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        todo.setDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"[T][\\u2714] read book\", todo.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 39
    }
  }
]
