[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    mainClassName \u003d \u0027Main\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "compileJava {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "run {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    archiveVersion \u003d \"0.1\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "john0227": 36
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Runs the {@link Duke} application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param args Arguments passed through the terminal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "            (new Duke()).run();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (DukeIOException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "            System.err.println(\"An IOException was caught: \" + e.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 19
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * \u003ch1\u003eDuke\u003c/h1\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Stores user-defined tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": " * @author  Kyungho Min"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " * @since   2019-09-01"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Handles user inputs and outputs. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Stores the tasks inputted by the user. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Saves the tasks in the TaskList to use at the next boot up. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes the necessary modules to run the Duke application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When an error occurs during the input-output process or"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * during the parsing of the save file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Duke() throws DukeIOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Runs the Duke application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Greet the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.ui.greet();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Handle user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "                String command \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "                String description \u003d this.ui.readDescription();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Command c \u003d Parser.parseToCommand(command, description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "                c.execute(this.taskList, this.ui, this.storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.ui.printToUser(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "john0227": 62
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.date.DukeDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeDateFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents the \"deadline\" command supported by Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_ADD_TASK} */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_ADD_TASK \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_NUMBER_OF_TASKS} */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_NUMBER_OF_TASKS \u003d \"Now you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_MISSING_TASK_DESCRIPTION} */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_MISSING_TASK_DESCRIPTION \u003d \"☹ OOPS!!! The description of a task \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"cannot be empty.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_MISSING_DESCRIPTION_AND_DATE} */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_MISSING_DESCRIPTION_AND_DATE \u003d \"☹ OOPS!!! Description and dates of a task \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"cannot be empty.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_MISSING_DEADLINE_DATE} */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_MISSING_DEADLINE_DATE \u003d \"☹ OOPS!!! Deadline dates must be \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"specified after \\\"/by.\\\"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** \"{@value DELIMITER_DEADLINE_DATE}\" : To be used when splitting {@link #description}. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DELIMITER_DEADLINE_DATE \u003d \"/by\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Should contain the description and due date of a \u003ccode\u003eDeadlineTask\u003c/code\u003e. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddDeadlineCommand(String description) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds a {@link DeadlineTask} to the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to manage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param ui UI to show result to user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param storage Storage to save any changes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalArgumentException When the description or date of task is missing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeDateFormatException When the date is formatted incorrectly."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When there is an error during an input-output process."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throws DukeIllegalArgumentException, DukeDateFormatException, DukeIOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] arg \u003d this.description.split(DELIMITER_DEADLINE_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean hasDescription;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "            description \u003d arg[0].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "            hasDescription \u003d !description.isEmpty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "            hasDescription \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean hasDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "            date \u003d arg[1].trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "            hasDate \u003d !date.isEmpty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "            hasDate \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Check for errors"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!hasDescription \u0026\u0026 !hasDate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalArgumentException(ERROR_MISSING_DESCRIPTION_AND_DATE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else if (!hasDescription) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalArgumentException(ERROR_MISSING_TASK_DESCRIPTION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else if (!hasDate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalArgumentException(ERROR_MISSING_DEADLINE_DATE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Have Duke parse the string into date and time"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DukeDate dukeDate \u003d Parser.parseToDate(date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Add task to the TaskList"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Task task \u003d new DeadlineTask(arg[0], dukeDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Save new task to the storage file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Display the result to the user"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ui.printToUser(DUKE_ADD_TASK,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \"  \" + task.getStatus(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "                String.format(DUKE_NUMBER_OF_TASKS, taskList.getSize()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns false."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 115
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.date.DukeDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeDateFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents the \"event\" command supported by Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_ADD_TASK} */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_ADD_TASK \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_NUMBER_OF_TASKS} */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_NUMBER_OF_TASKS \u003d \"Now you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_MISSING_TASK_DESCRIPTION} */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_MISSING_TASK_DESCRIPTION \u003d \"☹ OOPS!!! The description of a task \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"cannot be empty.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_MISSING_DESCRIPTION_AND_DATE} */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_MISSING_DESCRIPTION_AND_DATE \u003d \"☹ OOPS!!! Description and dates of a task \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"cannot be empty.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_MISSING_EVENT_DATE} */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_MISSING_EVENT_DATE \u003d \"☹ OOPS!!! Deadline dates must be specified after \\\"/at.\\\"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** \"{@value DELIMITER_EVENT_DATE}\" : To be used when splitting {@link #description}. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DELIMITER_EVENT_DATE \u003d \"/at\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Should contain the description and event date of this \u003ccode\u003eEventTask\u003c/code\u003e. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddEventCommand(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds a {@link EventTask} to the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to manage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param ui UI to show result to user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param storage Storage to save any changes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalArgumentException When the description or date of task is missing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeDateFormatException When the date is formatted incorrectly."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When there is an error during an input-output process."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throws DukeIllegalArgumentException, DukeDateFormatException, DukeIOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] arg \u003d this.description.split(DELIMITER_EVENT_DATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean hasDescription;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "            description \u003d arg[0].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "            hasDescription \u003d !description.isEmpty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "            hasDescription \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean hasDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "            date \u003d arg[1].trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "            hasDate \u003d !date.isEmpty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "            hasDate \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Check for errors"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!hasDescription \u0026\u0026 !hasDate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalArgumentException(ERROR_MISSING_DESCRIPTION_AND_DATE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else if (!hasDescription) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalArgumentException(ERROR_MISSING_TASK_DESCRIPTION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else if (!hasDate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalArgumentException(ERROR_MISSING_EVENT_DATE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Have Duke parse the string into date and time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DukeDate dukeDate \u003d Parser.parseToDate(date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Add task to the TaskList"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Task task \u003d new EventTask(arg[0], dukeDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Save new task to the storage file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Display the result to the user"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ui.printToUser(DUKE_ADD_TASK,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "                       \"  \" + task.getStatus(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "                       String.format(DUKE_NUMBER_OF_TASKS, taskList.getSize()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns false."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 114
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents the \"todo\" command supported by Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_ADD_TASK} */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_ADD_TASK \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_NUMBER_OF_TASKS} */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_NUMBER_OF_TASKS \u003d \"Now you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_MISSING_TASK_DESCRIPTION} */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_MISSING_TASK_DESCRIPTION \u003d \"☹ OOPS!!! The description of a task \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"cannot be empty.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Should contain the description of a \u003ccode\u003eTodoTask\u003c/code\u003e. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddTodoCommand(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds a {@link TodoTask} to the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to manage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param ui UI to show result to user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param storage Storage to save any changes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalArgumentException When the description of task is missing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When there is an error during an input-output process."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throws DukeIllegalArgumentException, DukeIOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this.description.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalArgumentException(ERROR_MISSING_TASK_DESCRIPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Task task \u003d new TodoTask(this.description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ui.printToUser(DUKE_ADD_TASK,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "                       \"  \" + task.getStatus(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "                       String.format(DUKE_NUMBER_OF_TASKS, taskList.getSize()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns false."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 68
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Abstract class to represent the commands supported by Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Executes a certain function."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to manage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param ui UI to show result to user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param storage Storage to save any changes if necessary."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeException When applicable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Shows whether executing this Command should quit the Duke or not."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return True if Duke should quit, false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIllegalIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents the \"delete\" command supported by Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_DELETE_TASK} */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_DELETE_TASK \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_DELETE_ALL_TASKS} */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_DELETE_ALL_TASKS \u003d \"Noted. I\u0027ve removed all tasks.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_NUMBER_OF_TASKS} */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_NUMBER_OF_TASKS \u003d \"Now you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_ILLEGAL_INDEX} */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_ILLEGAL_INDEX \u003d \"☹ OOPS!!! The index must be a number \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"separated by one whitespace.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Should contain the index of the Task to delete or the word \"all.\" */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String detail;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteCommand(String detail)  {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Deletes a \u003ccode\u003eTask\u003c/code\u003e from the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to manage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param ui UI to show result to user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param storage Storage to save any changes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalIndexException When the index inputted is out of bounds."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When there is an error during an input-output process."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeIllegalIndexException, DukeIOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "            int index \u003d Integer.parseInt(this.detail);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "            ui.printToUser(DUKE_DELETE_TASK,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "                           \"  \" + taskList.deleteTaskAt(index).getStatus(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "                           String.format(DUKE_NUMBER_OF_TASKS, taskList.getSize()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (this.detail.equals(\"all\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "                taskList.deleteAllTasks();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ui.printToUser(DUKE_DELETE_ALL_TASKS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "                throw new DukeIllegalIndexException(ERROR_ILLEGAL_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns false."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 70
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIllegalIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents the \"done\" command supported by Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_MARK_AS_DONE} */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_MARK_AS_DONE \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_DONE_ALL_TASKS} */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_DONE_ALL_TASKS \u003d \"Nice! All of your tasks are marked as done.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_ILLEGAL_INDEX} */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_ILLEGAL_INDEX \u003d \"☹ OOPS!!! The index must be a number \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"separated by one whitespace.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Should contain the index of the Task to mark as done or the word \"all.\" */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String detail;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DoneCommand(String detail) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Marks a \u003ccode\u003eTask\u003c/code\u003e in the \u003ccode\u003eTaskList\u003c/code\u003e as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to manage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param ui UI to show result to user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param storage Storage to save any changes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalIndexException When the index inputted is out of bounds."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When there is an error during an input-output process."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeIllegalIndexException, DukeIOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            int index \u003d Integer.parseInt(this.detail);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "            taskList.markAsDoneTaskAt(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "            ui.printToUser(DUKE_MARK_AS_DONE, \"  \" + taskList.getTaskAt(index).getStatus());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (this.detail.equals(\"all\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "                taskList.markAsDoneAllTasks();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "                String[] lines \u003d taskList.listAll();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "                lines[0] \u003d DUKE_DONE_ALL_TASKS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ui.printToUser(lines);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "                throw new DukeIllegalIndexException(ERROR_ILLEGAL_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns false."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 69
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents the \"exit\" command supported by Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Quits Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to manage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param ui UI to show result to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param storage Storage to save any changes if necessary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns true."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return True."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 34
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents the \"find\" command supported by Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_FOUND_TASKS} */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_FOUND_TASKS \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_NO_FOUND_TASKS} */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_NO_FOUND_TASKS \u003d \"There were no matching tasks for the keyword: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_MISSING_KEYWORD} */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_MISSING_KEYWORD \u003d \"☹ OOPS!!! Please include a phrase to search for.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Sequence of characters to match against the descriptions of \u003ccode\u003eTask\u003c/code\u003es. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Finds a \u003ccode\u003eTask\u003c/code\u003e in the \u003ccode\u003eTaskList\u003c/code\u003e with a description that contains {@link #keyword}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to manage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param ui UI to show result to user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param storage Storage to save any changes if necessary."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalArgumentException When the keyword is missing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalArgumentException(ERROR_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cTask\u003e foundTasks \u003d taskList.findAllTasksContaining(this.keyword);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ui.printToUser(listTasks(foundTasks));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * List all \u003ccode\u003eTask\u003c/code\u003es in the given taskList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Implemented to aid in displaying all tasks found containing the {@link #keyword}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of \u003ccode\u003eTask\u003c/code\u003es to display to user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return A String array of lines to display to user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String[] listTasks(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new String[] { DUKE_NO_FOUND_TASKS, String.format(\"  \\\"%s\\\"\", this.keyword) };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        tasks.add(DUKE_FOUND_TASKS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "            tasks.add(String.format(\"  %d.%s\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    i + 1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    taskList.get(i).getStatus()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return tasks.toArray(new String[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns false."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 81
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.module.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents the \"list\" command supported by Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Lists all \u003ccode\u003eTask\u003c/code\u003es in the \u003ccode\u003eTaskList\u003c/code\u003e as Strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to manage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param ui UI to show result to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param storage Storage to save any changes if necessary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ui.printToUser(taskList.listAll());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 34
    }
  },
  {
    "path": "src/main/java/duke/date/DukeDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A date class to be used in the Duke application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This class represents the time and date of the tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * \u003ccode\u003eDukeDate\u003c/code\u003e can be formatted into a String by {@link DukeDate#format()} or {@link DukeDate#toString()}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DukeDate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_ILLEGAL_YEAR} */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_ILLEGAL_YEAR \u003d \"☹ OOPS!!! Year should be a number greater than 0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_ILLEGAL_MONTH} */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_ILLEGAL_MONTH \u003d \"☹ OOPS!!! Month should be a number between 1 and 12.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_ILLEGAL_DAY} */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_ILLEGAL_DAY \u003d \"☹ OOPS!!! Date must be greater than 0 (and less than 31).\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_DAY_MONTH_MISMATCH} */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_DAY_MONTH_MISMATCH \u003d \"☹ OOPS!!! Given date does not exist in given month.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_ILLEGAL_TIME} */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_ILLEGAL_TIME \u003d \"☹ OOPS!!! Hour must be between 0 and 23,\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"      and minute must be between 0 and 59.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private int hour;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private int minute;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Determines whether hour field is before noon or after noon. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String amPmMarker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Represents the twelve months."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public enum Month {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        JANUARY(1),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        FEBRUARY(2),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        MARCH(3),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        APRIL(4),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        MAY(5),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        JUNE(6),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        JULY(7),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        AUGUST(8),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        SEPTEMBER(9),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        OCTOBER(10),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        NOVEMBER(11),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DECEMBER(12);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private int monthInt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Month(int monthInt) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.monthInt \u003d monthInt;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public int getMonthInt() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.monthInt;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Returns the name of this month with only the first letter capitalized."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "         *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * @return Name of this month with the first letter capitalized."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String month \u003d super.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return month.charAt(0) + month.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs a DukeDate instance to be used in a test class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Not for use."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected DukeDate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.year \u003d 2020;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.month \u003d Month.JANUARY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.day \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.hour \u003d 12;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.minute \u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs a DukeDate object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param year Year of this DukeDate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param month Month of this DukeDate as an integer."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param day Day of this DukeDate."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param hour Hour of this DukeDate to be inputted as 24 hour format."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param minute Minute of this DukeDate."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeDateFormatException When the given date or time is illegal."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeDate(int year, int month, int day, int hour, int minute)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throws DukeDateFormatException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (year \u003c 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeDateFormatException(ERROR_ILLEGAL_YEAR);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.month \u003d this.getMonth(month);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!dayIsValid(month, day)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeDateFormatException(ERROR_DAY_MONTH_MISMATCH);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.setTime(hour, minute);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs a DukeDate object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param year Year of this DukeDate."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param month Month of this DukeDate as the Month enum."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param day Day of this DukeDate."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param hour Hour of this DukeDate to be inputted as 24 hour format."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param minute Minute of this DukeDate."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeDateFormatException When the given date or time is illegal."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeDate(int year, Month month, int day, int hour, int minute)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throws DukeDateFormatException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (year \u003c 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeDateFormatException(ERROR_ILLEGAL_YEAR);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!dayIsValid(month.getMonthInt(), day)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeDateFormatException(ERROR_DAY_MONTH_MISMATCH);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.setTime(hour, minute);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Switches given integer (1 - 12) to the corresponding {@link Month}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param monthInt Integer to be converted."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return \u003ccode\u003eMonth\u003c/code\u003e corresponding to monthInt field."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeDateFormatException If monthInt \u003c\u003d 0 or monthInt \u003e\u003d 13."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Month getMonth(int monthInt) throws DukeDateFormatException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "        switch (monthInt) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.JANUARY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.FEBRUARY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.MARCH;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.APRIL;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.MAY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.JUNE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.JULY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.AUGUST;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.SEPTEMBER;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.OCTOBER;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 11:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.NOVEMBER;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 12:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Month.DECEMBER;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeDateFormatException(ERROR_ILLEGAL_MONTH);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if the given month and day is valid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param month Month to be checked."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param day Day to be checked."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return True if given month and day is valid, false otherwise."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeDateFormatException When the given fields is invalid."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private boolean dayIsValid(int month, int day) throws DukeDateFormatException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (day \u003c 1) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeDateFormatException(ERROR_ILLEGAL_DAY);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return day \u003c\u003d 29;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 12:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return day \u003c\u003d 31;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case 11:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return day \u003c\u003d 30;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "john0227"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeDateFormatException(ERROR_ILLEGAL_MONTH);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Formats time into AM/PM format."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param hour Hour of this DukeDate inputted as 24 hour format."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param minute Minute of this DukeDate."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeDateFormatException When given time is invalid."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void setTime(int hour, int minute) throws DukeDateFormatException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (hour \u003e 23 || hour \u003c 0 || minute \u003e 59 || minute \u003c 0) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeDateFormatException(ERROR_ILLEGAL_TIME);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (hour \u003e\u003d 12) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.amPmMarker \u003d \"PM\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.hour \u003d hour - (hour / 13) * 12;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.amPmMarker \u003d \"AM\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.hour \u003d hour;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.minute \u003d minute;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Formats this DukeDate into a String."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * The format is \"dd Month, YYYY, hh:mm a\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003eMonth - the month written as a literal."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ea - the AM/PM marker"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return This DukeDate formatted into a String."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"00\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return String.format(\"%d %s, %d, %d:%s %s\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "john0227"
        },
        "content": "                             this.day,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "john0227"
        },
        "content": "                             this.month,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "john0227"
        },
        "content": "                             this.year,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "john0227"
        },
        "content": "                             this.hour,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "john0227"
        },
        "content": "                             df.format(this.minute),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "john0227"
        },
        "content": "                             this.amPmMarker);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns same result as {@link DukeDate#format()}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return {@link DukeDate#format()}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.format();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 256
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A {@link DukeException}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Thrown when the date in the save file is formatted incorrectly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DukeDateFormatException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeDateFormatException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": " * An Exception class specific to the Duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A {@link DukeException}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This is the java {@link java.io.IOException} wrapped into a DukeException."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Additionally, this exception is thrown when the save file is formatted incorrectly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DukeIOException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeIOException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A {@link DukeException}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Thrown when an illegal statement is inputted by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DukeIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeIllegalArgumentException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A {@link DukeException}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Thrown when the user inputs an illegal command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DukeIllegalCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeIllegalCommandException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIllegalIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A {@link DukeException}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Thrown when the index in the {@link duke.module.TaskList} is out of bounds."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DukeIllegalIndexException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeIllegalIndexException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 13
    }
  },
  {
    "path": "src/main/java/duke/module/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.date.DukeDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeDateFormatException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIllegalCommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses various Strings into meaningful information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_DATE_FORMAT} */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_DATE_FORMAT \u003d \"☹ OOPS!!! Date must be in MM/DD/YYYY HHMM format.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_SAVE_FILE_FORMAT} */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_SAVE_FILE_FORMAT \u003d \"☹ OOPS!!! Saved file contains illegal formatting.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value ERROR_ILLEGAL_COMMAND} */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ERROR_ILLEGAL_COMMAND \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * This stores all the commands that Duke can understand and carry out."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private enum CommandType {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        FIND,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        BYE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given date in String to a {@link DukeDate} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cb\u003ePrerequisite: \u003c/b\u003eString must be in MM/DD/YYYY HHMM form in 24-hour format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param date String to be parsed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return {@link DukeDate} with information formatted in the date String."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeDateFormatException When the date and time given is illegal or in the wrong format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static DukeDate parseToDate(String date) throws DukeDateFormatException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Date format : MM/DD/YYYY HHMM"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] dateAndTime \u003d date.split(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] dateFormat \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new DukeDate(Integer.parseInt(dateFormat[2]),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                Integer.parseInt(dateFormat[0]),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                Integer.parseInt(dateFormat[1]),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                Integer.parseInt(dateAndTime[1].substring(0, 2)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                Integer.parseInt(dateAndTime[1].substring(2)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeDateFormatException(ERROR_DATE_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses each line in the save file into the corresponding {@link Task} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param line A line in the save file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return {@link Task} corresponding to the line."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When the lines in the save file is formatted incorrectly."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    static Task parseToTask(String line) throws DukeIOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String[] taskComponents \u003d line.split(\"-\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "            switch (taskComponents[0]) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new TodoTask(taskComponents[2],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        taskComponents[1].equals(\"1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new DeadlineTask(taskComponents[2],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        taskComponents[1].equals(\"1\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        parseToDukeDate(taskComponents[3]));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new EventTask(taskComponents[2],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        taskComponents[1].equals(\"1\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        parseToDukeDate(taskComponents[3]));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "                throw new DukeIOException(ERROR_SAVE_FILE_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIOException(ERROR_SAVE_FILE_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the date into a {@link DukeDate}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param date Result of {@link DeadlineTask#getDateAsString()} or {@link EventTask#getDateAsString()}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return {@link DukeDate} corresponding to the date String."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When the date in the save file is formatted incorrectly."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static DukeDate parseToDukeDate(String date) throws DukeIOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // dd MM, yyyy, hh:mm a"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String[] parsed \u003d date.split(\" |, |:\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "            int hour \u003d parsed[5].equals(\"AM\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    ? Integer.parseInt(parsed[3])"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    : Integer.parseInt(parsed[3]) + 12;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new DukeDate(Integer.parseInt(parsed[2]),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    DukeDate.Month.valueOf(parsed[1].toUpperCase()),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    Integer.parseInt(parsed[0]),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    hour,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    Integer.parseInt(parsed[4]));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException | DukeDateFormatException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIOException(ERROR_SAVE_FILE_FORMAT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the inputted command into a {@link Command} object."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param command User inputted string to be parsed into a {@link Command} object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param description The rest of the user input;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The {@link Command} object corresponding to the user input."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalCommandException When the string inputted is not a valid {@link CommandType}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static Command parseToCommand(String command, String description) throws DukeIllegalCommandException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "            switch (CommandType.valueOf(command.toUpperCase())) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new DoneCommand(description);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new FindCommand(description);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new AddTodoCommand(description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new AddEventCommand(description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new AddDeadlineCommand(description);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new DeleteCommand(description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "                throw new DukeIllegalCommandException(ERROR_ILLEGAL_COMMAND);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalCommandException(ERROR_ILLEGAL_COMMAND);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 163
    }
  },
  {
    "path": "src/main/java/duke/module/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Stores all the user tasks and the status of them. Loads the tasks when Duke is rebooted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Stores the pathway of the saved file. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String cwd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Stores the name of the saved file. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Stores and saves all the tasks inputted by the user. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private File savedFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes a save file to keep track of user tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Creates a new file if it does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Finds the file if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When an error occurs during the input-output process."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Storage() throws DukeIOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.cwd \u003d System.getProperty(\"user.dir\") + File.separator + \"save-file\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.fileName \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.savedFile \u003d new File(this.cwd + File.separator + this.fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.savedFile.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIOException(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.cwd + this.fileName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Saves the tasks in the given TaskList to the save file initialized."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList {@link TaskList} storing the user tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When an error occurs while writing to the saved file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void saveTasks(TaskList taskList) throws DukeIOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder lines \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Each task\u0027s information delimited by \" | \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Iterator\u003cTask\u003e it \u003d taskList.iterator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "            Task task \u003d it.next();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "            /* Append type of task,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "             * whether the task is finished or not (1 if finished, 0 if not),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "             * and the description"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "             */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "            lines.append(task.getType())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "                 .append(\" | \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                 .append(task.isDone() ? \"1 | \" : \"0 | \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "                 .append(task.getDescription());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Append the date/time (if applicable)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "                lines.append(\" | \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "                     .append(((DeadlineTask) task).getDueDate());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "            } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "                lines.append(\" | \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "                     .append(((EventTask) task).getTime());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "            lines.append(\"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(this.savedFile));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "            bw.write(lines.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIOException(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses each line in the save file to a {@link Task} and returns it as a List of Tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return a list of Tasks in correspondence to each line of the save file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIOException When an error occurs while reading the save file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeIOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "            List\u003cTask\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(this.savedFile));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "                lines.add(Parser.parseToTask(line.replace(\" | \", \"-\")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return lines;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIOException(e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 117
    }
  },
  {
    "path": "src/main/java/duke/module/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.exception.DukeIllegalIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Keeps track of the all the user tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * When Duke application reboots, TaskList is loaded with previous tasks through {@link Storage}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_LIST_TASKS} */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_LIST_TASKS \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_NO_TASKS} */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_NO_TASKS \u003d \"You currently have no tasks in your list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** List storing all the user tasks. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs an empty ArrayList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Default constructor for TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Loads the TaskList with the given list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param taskList List of tasks to initialize TaskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Generates an en exception message depending on the given index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param index Index of the TaskList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return An exception message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String generateIndexExceptionMessage(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (index \u003c 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "            message \u003d \"☹ OOPS!!! Index has to be greater than zero.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "            message \u003d String.format(\"☹ OOPS!!! Currently there are only %d tasks.\", this.taskList.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Marks the {@link Task} at given index as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cb\u003ePrerequisite: \u003c/b\u003eindex starts from 1."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param index Index of the Task to mark as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalIndexException When the given index is out of bounds."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void markAsDoneTaskAt(int index) throws DukeIllegalIndexException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalIndexException(this.generateIndexExceptionMessage(index));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Marks all tasks as done."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void markAsDoneAllTasks() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.taskList.get(i - 1).markAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds given task to the back of the TaskList."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param task {@link Task} to be added."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the {@link Task} at given index."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cb\u003ePrerequisite: \u003c/b\u003eindex starts from 1."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param index Index of the Task to return."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The Task at the index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalIndexException When the given index is out of bounds."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Task getTaskAt(int index) throws DukeIllegalIndexException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalIndexException(this.generateIndexExceptionMessage(index));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Deletes the task at the given index."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param index Index of the Task to delete."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Task to be deleted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws DukeIllegalIndexException When the given index is out of bounds."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Task deleteTaskAt(int index) throws DukeIllegalIndexException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new DukeIllegalIndexException(this.generateIndexExceptionMessage(index));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Deletes all the tasks in this TaskList."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void deleteAllTasks() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.taskList.clear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the list of all the {@link Task} objects whose description contains the given keyword."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param keyword Character sequence to match with the descriptions of Task objects."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Task objects containing the keyword."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public List\u003cTask\u003e findAllTasksContaining(String keyword) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the {@link Iterator} of this TaskList."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The Iterator of this TaskList."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.taskList.iterator();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns an array of Strings with each {@link Task} expressed in Strings."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return An array of Strings corresponding to {@link Task#toString()}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String[] listAll() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this.taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new String[] { DUKE_NO_TASKS };"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "        lines.add(DUKE_LIST_TASKS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "            lines.add(String.format(\"  %d.%s\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    i + 1,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    this.taskList.get(i).getStatus()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return lines.toArray(new String[0]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 179
    }
  },
  {
    "path": "src/main/java/duke/module/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Handles user input and output. \u003ccode\u003eUi\u003c/code\u003e reads commands from the user and outputs the results."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_LOGO} */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      + \"    |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      + \"    | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      + \"    | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      + \"    |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_HELLO} */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_HELLO \u003d \"Hello! I\u0027m Duke!\\n    What can I do for you?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_BYE} */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_BYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_LINE}*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_LINE \u003d \"    _________________________________________________________________\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** {@value DUKE_TAB4} */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String DUKE_TAB4 \u003d \"    \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Handles keyboard inputs from the user. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes the Scanner object to handle UI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Prints given message with line separators surrounding the message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param message String(s) to print out."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void printToUser(String... message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.out.println(DUKE_LINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (String line : message) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "            System.out.println(DUKE_TAB4 + line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.out.println(DUKE_LINE + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.printToUser(DUKE_LOGO, DUKE_HELLO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.printToUser(DUKE_BYE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Reads the command portion of the input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The command as a String."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return sc.next();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Reads the rest of the input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The remaining line as String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String readDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String description \u003d sc.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return description.substring(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 79
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.date.DukeDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents a deadline task inputted by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Stores the date by which the user has to finish this Task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private DukeDate dueDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs a DeadlineTask object with the given description and {@link DukeDate}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * isDone field is set to false by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param description The description of this DeadlineTask."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param dueDate The due date of this DeadlineTask."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeadlineTask(String description, DukeDate dueDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs a DeadlineTask object with the given description, status, and {@link DukeDate}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param description The description of this DeadlineTask."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param isDone The status of this DeadlineTask."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param dueDate The due date of this DeadlineTask."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeadlineTask(String description, boolean isDone, DukeDate dueDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeDate getDueDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.dueDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the dueDate field formatted as a String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * The format is \"dd Month, YYYY, hh:mm a\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The dueDate field formatted as a String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @see DukeDate#format()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getDateAsString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.dueDate.format();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the type of this DeadlineTask as a single capital letter."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The letter D."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the type, status, description, and due date of this DeadlineTask."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The type, status, description, and due date formatted as a String."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.getStatus(), this.dueDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 72
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.date.DukeDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents an event task inputted by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Stores the date of the event. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private DukeDate time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs an EventTask object with the given description and {@link DukeDate}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * isDone field is set to false by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param description The description of this EventTask."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param time The time of this EventTask."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EventTask(String description, DukeDate time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs an EventTask object with the given description, status, and {@link DukeDate}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param description The description of this EventTask."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param isDone The status of this EventTask."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param time The time of this EventTask."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EventTask(String description, boolean isDone, DukeDate time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeDate getTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the date field formatted as a String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * The format is \"dd Month, YYYY, hh:mm a\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The date field formatted as a String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @see DukeDate#format()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getDateAsString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.time.format();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the type of this DeadlineTask as a single capital letter."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The letter E."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the type, status, description, and date of this EventTask."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The type, status, description, and date formatted as a String."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.getStatus(), this.time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 72
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": " * An abstract class of a task to be inputted by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** The description of the user task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /** Shows whether this Task is completed by the user or not. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs a Task object with the given description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * isDone field is set to false by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param description The description of this Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs a Task object with the given description and status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param description The description of this Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param isDone The status of this Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the type of this Task as a single capital letter."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return They type of this Task in a single capital letter."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @see TodoTask#getType()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @see DeadlineTask#getType()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @see EventTask#getType()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the status (as a tick or X mark) and the description of this Task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Status and the description of this Task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String icon \u003d (isDone ? \"\\u2713\" : \"\\u2718\"); //tick or X symbol"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return String.format(\"[%s] %s\", icon, this.description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Set isDone field to true."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the description of this Task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The description field."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 80
    }
  },
  {
    "path": "src/main/java/duke/task/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Represents a task that the user must do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs a TodoTask with the given description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * isDone field is set to false by default."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param description The description of this TodoTask."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructs a TodoTask with the given description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param description The description of this TodoTask."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param isDone The status of this TodoTask."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TodoTask(String description, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the type of this DeadlineTask as a single capital letter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The letter T."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the type, status, and description of this TodoTask."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return The type, status, and description formatted as a String."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return \"[T]\" + super.getStatus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 48
    }
  },
  {
    "path": "src/test/java/duke/date/DukeDateStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DukeDateStub extends DukeDate {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private int hour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private int minute;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DukeDateStub(int year, int month, int day, int hour, int minute) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.minute \u003d minute;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return String.format(\"%d/%d/%d, %d:%s\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.day,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.month,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.year,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.hour,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "                df.format(this.minute));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 32
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import duke.date.DukeDateStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "class DeadlineTaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void getDueDate_sampleDate_equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DukeDateStub dds \u003d new DukeDateStub(2019, 9, 1, 17, 22);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeadlineTask dt \u003d new DeadlineTask(\"essay 1\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                           false,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                            dds);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(dds, dt.getDueDate());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void getDateAsString_sampleDate_equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DukeDateStub dds \u003d new DukeDateStub(2019, 9, 1, 17, 22);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeadlineTask dt \u003d new DeadlineTask(\"essay 1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "                dds);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(dds.format(), dt.getDateAsString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void getStatus() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DukeDateStub dds \u003d new DukeDateStub(2019, 9, 1, 17, 22);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeadlineTask dt \u003d new DeadlineTask(\"essay 1\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "                dds);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expected \u003d String.format(\"[D][\\u2718] essay 1 (by: %s)\", dds.format());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expected, dt.getStatus());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 41
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "    What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "      [T][?] read book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "      [T][?] return book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "      [D][?] book report (by: Aug 4th)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "      [E][?] inter-college game (at: Sep 2-4th 6pm)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "      [T][?] call friend"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "      [T][?] read book"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    1.[T][?] read book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    2.[T][?] return book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    3.[D][?] book report (by: Aug 4th)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    4.[E][?] inter-college game (at: Sep 2-4th 6pm)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    5.[T][?] call friend"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "      [D][?] book report (by: Aug 4th)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "      [E][?] inter-college game (at: Sep 2-4th 6pm)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    1.[T][?] read book"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    2.[T][?] return book"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "    3.[D][?] book report (by: Aug 4th)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    4.[T][?] call friend"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! Please include the index of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! Please include the index of the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! The description of a task cannot be empty."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! The description of a task cannot be empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! Description and dates of a task cannot be empty."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! The description of a task cannot be empty."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! The description of a task cannot be empty."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! Deadline dates must be specified after \"/by.\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! Description and dates of a task cannot be empty."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! The description of a task cannot be empty."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! Deadline dates must be specified after \"/at.\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! Currently there are only 4 tasks."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ? OOPS!!! Currently there are only 4 tasks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "john0227": 127
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": "todo return book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "deadline book report /by Aug 4th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "event inter-college game /at Sep 2-4th 6pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "todo call friend"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "delete"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "hello"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "todo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "todo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "deadline /by Aug 4th"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "deadline   /by Aug 4th"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "deadline book report /by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "event /at Sep 2-4th"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "event game /at"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "done 9"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "john0227": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java -encoding UTF-8"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "john0227": 21
    }
  }
]
