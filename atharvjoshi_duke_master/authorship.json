[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "group \u0027duke.src.main.java\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 7,
      "-": 18
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "T-N-this"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 2
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Driver method for Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The main method that drives Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * \u003cp\u003e Creates a new instance of Duke and runs it. \u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param args command(s) from the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // create an instance of ui.Duke with the file containing the task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 21
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command for adding todo, deadline, and event tasks to list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The task created in response to this command. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises an add command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public AddCommand(String imperative, Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the add command task by adding task to list, sending a message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * to be printed on the user interface, and asking storage to update the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * task list on the hard drive."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of ui.Duke"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of ui.Duke"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (this.task !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            tasks.add(this.task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ui.showAddTaskMessage(this.task, tasks.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            storage.update(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 51
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a user command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u003cp\u003e Abstract class whose execute method is to be implemented by"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * child classes. \u003c/p\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The term used to identify command type. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String imperative;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Boolean depicting whether the command is used to exit Duke. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    boolean isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Abstract execute method to be implemented by child classes. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *  Instantiate a command with an imperative."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify the command type."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    Command(String imperative) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.imperative \u003d imperative;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns whether command is used to exit ui.Duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if exit command, false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 44
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.lang.Integer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command for deleting task from the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The serial number (1-indexed) of the task to be deleted*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String taskNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises a command for deleting the specified task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param content string representing the index of the task to be deleted"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public DeleteCommand(String imperative, String content) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.taskNumber \u003d content;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the delete command by deleting the specified task from the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * list, sending a suitable message to the user interface, and asking"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * the storage handler to update the task list on the hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of ui.Duke"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of ui.Duke"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            // if the user is trying this command on an empty task list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ui.showEmptyListError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(taskNumber) - 1; // 1 indexed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // retrieve task to be removed, remove it, and inform the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                Task taskToRemove \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // message"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showDeleteTaskMessage(taskToRemove, tasks.size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // update storage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                storage.update(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IndexOutOfBoundsException exceptionOne) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showIndexOutOfBoundsError();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (NumberFormatException exceptionTwo) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showInvalidIndexError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 67
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.lang.Integer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public DoneCommand(String imperative, String content) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.taskNumber \u003d content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            // if the user is trying this command on an empty task list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ui.showEmptyListError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(taskNumber) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // retrieve task from list, mark as done, and inform the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                Task taskToMarkDone \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                if (!taskToMarkDone.getIsDone()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    taskToMarkDone.setTaskAsDone(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    // print message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    ui.showTaskDoneMessage(taskToMarkDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    // update storage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    storage.update(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    System.out.println(\"This task has already been done!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IndexOutOfBoundsException exceptionOne) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showIndexOutOfBoundsError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (NumberFormatException exceptionTwo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showInvalidIndexError();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 49
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command for exiting ui.Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises a command for exiting ui.Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public ExitCommand(String imperative) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the command by setting its exit status to true."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of ui.Duke"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of ui.Duke"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 34
    }
  },
  {
    "path": "src/main/java/commands/PrintCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command to print all tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class PrintCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises a command to print the whole list on the user interface."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public PrintCommand(String imperative) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the print command method by asking the user interface handler"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * to print all the tasks in the lists to the terminal."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of ui.Duke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of ui.Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        ui.printTasks(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 36
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.PrintCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a handler that tries to make sense of user commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @author atharvjoshi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @version CS2103 AY19/20 Sem 1 iP Week 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Enumeration of all command types supported by ui.Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private enum Imperative {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        BYE, DEADLINE, DELETE, DONE, EVENT, LIST, TODO"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Parses user input into a command executed by ui.Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param fullCommand the string entered by the user as a command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return a ui.Duke-executable command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IllegalArgumentException if command not supported by duke"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IndexOutOfBoundsException if incomplete commands"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if incorrect date/time format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static Command parse(String fullCommand)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws IllegalArgumentException, IndexOutOfBoundsException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // try to create the command based on the imperative and run it"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // if the imperative entered is unrecognised, inform the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // extract the imperative specified by the user to identify which"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // command is to be executed by ui.Duke"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String[] splitCommand \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String imperative \u003d splitCommand[0].toUpperCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        switch (Imperative.valueOf(imperative)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new ExitCommand(imperative);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new DeleteCommand(imperative, splitCommand[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new DoneCommand(imperative, splitCommand[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new PrintCommand(imperative);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new AddCommand(imperative, new Todo(splitCommand[1],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    false));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new AddCommand(imperative, new Deadline("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitCommand[1], \"\\\\/\")[0],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitCommand[1], \"\\\\/\")[1],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    false));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new AddCommand(imperative, new Event("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitCommand[1], \"\\\\/\")[0],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitCommand[1], \"\\\\/\")[1],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    false));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns the string containing date/time information for deadline and"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * event type tasks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param command string containing task attribute information"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param regex the delimiter used to split the command string"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string containing date/time information"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static String[] splitTaskAttributes(String command, String regex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // try to obtain the description and date/time information of"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // the deadline / event. Inform user if the input is in an"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // incorrect format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String[] splitTaskAttributes \u003d command.split(regex, 2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String taskDescription \u003d splitTaskAttributes[0];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String taskDateTime \u003d splitTaskAttributes[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new String[] {taskDescription, taskDateTime};"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Reads text file containing saved tasks, converts them into tasks.Task objects,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * and adds to the task list in order to load the last saved task list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param line string containing one line from the text file"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param emptyList empty list to add the parsed tasks to"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if incorrect date/time format"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static void parseTextToTask(String line, TaskList emptyList) throws"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String[] splitLine \u003d line.split(\"-\", 3);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        boolean isTaskDone \u003d splitLine[1].equals(\"Y\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        switch(splitLine[0]) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            emptyList.add(new Deadline("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitLine[2], \"-\")[0],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitLine[2], \"-\")[1], isTaskDone));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            emptyList.add(new Event("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitLine[2], \"-\")[0],"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitLine[2], \"-\")[1], isTaskDone));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            emptyList.add(new Todo(splitLine[2], isTaskDone));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            System.out.println(\"list remains empty.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 126
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a handler that deals with storage - loading tasks from"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * file and saving to file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @author atharvjoshi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** File object containing the saved task list */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** v */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates a storage handler with a given filepath."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param filePath the path to the file object containing the task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Loads tasks into the task list from the saved file, every time ui.Duke is"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * re-initialised."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param emptyList the list the tasks are to be loaded into"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws FileNotFoundException if file specified by filepath is not found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if wrong date/time format encountered"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void loadToList(TaskList emptyList) throws FileNotFoundException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // read file using Scanner class"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Scanner s \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            Parser.parseTextToTask(s.nextLine(), emptyList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Updates task list whenever an add, done, or delete command is executed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param modifiedList the list instance after command is executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException if file not found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void update(TaskList modifiedList) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!modifiedList.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            int listSize \u003d modifiedList.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                Task currentTask \u003d modifiedList.get(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                this.writeToFile(currentTask.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            if (!modifiedList.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // loop through each task in list and append to string builder."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                int listSize \u003d modifiedList.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    Task currentTask \u003d modifiedList.get(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    sb.append(currentTask.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    sb.append(\"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                this.writeToFile(sb.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            System.out.println(\"Sorry. I can\u0027t save this change :-(\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Writes given text to the specified file on the hard disk."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param textToAdd the text to be added"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException if file not found"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        fw.write(\"\\n\"); // add newline"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 99
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a deadline-type task handled by ui.Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * A deadline differs from other tasks because it has a due date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The date by which task is due */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String dueDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Date / Time converted to Date format */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Date byWhen;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates a deadline with a description and due date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param description string representing the description of the deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param dueDate string representing date by which deadline is due"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param isDone flag indicating whether task has been done or not"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the date/time is entered in the wrong format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Deadline(String description, String dueDate, boolean isDone)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.byWhen \u003d this.toDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Return a string representation of this deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing this deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"D-\" + super.toString() + \"-\" + dueDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Converts string representation of date/time into an actual date/time"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the parsed date and time information"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the date/time is entered in the wrong format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Date toDate() throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(this.dueDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 56
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a event-type task handled by ui.Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * A event differs from other tasks because it has a date on which it is to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * occur."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** String representing date or time at which event is slated to occur */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Date / Time converted to the Date format */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Date when;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates an event with a description and date/time information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param description string representing description of event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param dateTime string representing when the event will occur."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param isDone flag indicating whether task has been done or not"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the date/time is entered in the wrong format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Event(String description, String dateTime, boolean isDone)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.when \u003d this.toDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Return a string representation of this event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing this event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"E-\" + super.toString() + \"-\" + dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Converts string representation of date/time into an actual date/time"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the parsed date and time information"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the date/time is entered in the wrong format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Date toDate() throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(this.dateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 57
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a task handled by ui.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * A task has a description and a status, for each of which getter methods have"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * been provided. The task status can also be updated when a task is done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The description of the task */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The status of the task - done or not done */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates a task with a description and a status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param description string representing the description of this task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param isDone flag indicating whether task has been done or not"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Retrieves the icon indicating task status."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return \"Y\" if task is done or \"N\" if task is not done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String getTaskStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return (this.isDone ? \"Y\" : \"N\"); // return Y or N"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // return (this.isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Get current status of this task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if current task is done, false if current task is not done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Changes the status of the task to \u0027done\u0027."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param hasBeenDone boolean to indicate that the task has been completed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean setTaskAsDone(boolean hasBeenDone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isDone \u003d hasBeenDone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Return a string representation of this task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing this task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.getTaskStatusIcon() + \"-\" + this.description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 68
    }
  },
  {
    "path": "src/main/java/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a todo-type task handled by ui.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * A todo differs from other tasks because it has no due date, it simply has"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * a task description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Create a todo with a description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param description string representing description of this todo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param isDone flag indicating whether task has been done or not"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Return a string representation of this todo."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing this todo."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"T-\" + super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 32
    }
  },
  {
    "path": "src/main/java/ui/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates attributes and behaviour of ui.Duke, a personal assistant chatbot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * ui.Duke manages a user\u0027s list of tasks. It can store, add to, remove from, or"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * modify the contents of the list. User input must come either in the form of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * commands \u0027list\u0027, \u0027bye\u0027 \u0027done \u003ctask index\u003e\u0027, \u0027delete \u003ctask index\u003e\u0027 or storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * requests beginning with the type of task to be stored. ui.Duke supports three"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * types of tasks - todos, deadlines, and events. Deadlines and events need to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * be supplied with additional date or time information, which is parsed by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * ui.Duke using Java\u0027s SimpleDateFormat library. The input format for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * todos is \u0027todo \u003ctask description\u003e\u0027 and that for deadlines and events is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u0027\u003ctask type\u003e \u003ctask description\u003e / \u003cday/month/year hh:mm\u003e\u0027. Deviating from this"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * input format results in ui.Duke supplying error messages to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @contributors j-lum, damithc"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Handler for loading from and writing to hard disk"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The list of tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Handler for dealing with user interactions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** flag to indicate if ui.Duke is listening to commands from the user */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private boolean isListening;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises ui.Duke with a user-interface, storage, and task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * handler"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param filePath the hard disk file containing the saved list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isListening \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            storage.loadToList(tasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } catch (IOException | ParseException exception) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ui.showStartupError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Runs ui.Duke by asking the parser.Parser to parse the user command and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * then executing the command, whilst handling exceptions."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        ui.welcomeUser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        while (this.isListening) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                this.isListening \u003d !command.getIsExit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IllegalArgumentException exceptionOne) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showInvalidCommandError();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IndexOutOfBoundsException exceptionTwo) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showInvalidFormattingError();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IOException exceptionThree) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showStartupError();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (ParseException exceptionFour) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                ui.showInvalidDateTimeFormattingError();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        ui.farewellUser();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 91,
      "-": 2
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  Encapsulates a user interface handler that deals with interactions with"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *   @author atharvjoshi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *   @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** welcome message */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String welcomeMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** logo for ui.Duke */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String logo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** exit message */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String exitMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *  Instantiates the user interface handler."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.welcomeMessage \u003d \"Hello! I\u0027m Duke!!!\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.exitMessage \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Welcomes the user with specified welcome message and logo."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void welcomeUser() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.print(welcomeMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Wishes the user goodbye upon exiting ui.Duke."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void farewellUser() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.print(exitMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints startup error."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void showStartupError() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"Unable to load tasks from hard disk\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return a line entered by the user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    String readCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints line separator between commands and outputs for better"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * readability."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void showLine() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"################################################\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error when user tries to work on an empty list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void showEmptyListError() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"No tasks in your list!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints message when task is successfully added to list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task that was added"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param size the size of the list after adding task"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void showAddTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"  \" + task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.format(\"Now you have %d tasks in the list.\\n\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                size);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints message when task is successfully deleted from the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task that was deleted"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param size the size of the list after deleting task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void showDeleteTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"   \" + task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.format(\"Now you have %d tasks in the list\\n\", size);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user specifies 0 index or an index bigger"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * than the size of the task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void showIndexOutOfBoundsError() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"You\u0027ve specified a 0 index or index \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"that is bigger than the size of your list!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user specifies an invalid non-integer index."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void showInvalidIndexError() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"Please input an integer which is the \" +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \"index of the task you wish to mark as done.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user enters invalid command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void showInvalidCommandError() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"You entered a command I do not understand :-(\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"Let\u0027s speak the same language! Type \u0027help\u0027 to \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"see the list of commands I understand :-)\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user enters incorrect date/time format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void showInvalidDateTimeFormattingError() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"Looks like you entered the incorrect Date/Time \" +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \"format. Please follow \u003cdd\u003e/\u003cmm\u003e/\u003cyyyy\u003e \u003chhmm\u003e\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user enters incorrect task attributes format."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void showInvalidFormattingError() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"Wrong format! Please try again.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints message when user marks a given task as done."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task marked as done"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void showTaskDoneMessage(Task task) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        System.out.println(\"   \" + task);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints all tasks in the list to the terminal."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void printTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // inform user if the list is empty"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            System.out.println(\"No tasks in your list!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            // loop through each task in list and print it"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            int listSize \u003d tasks.size();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // specified format e.g. \"1. task 1\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                System.out.format(\"%d. %s\\n\", i + 1, currentTask);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 192
    }
  },
  {
    "path": "src/main/java/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Contains the task list and operations on the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @author atharvjoshi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @version CS2103 AY19/20 Sem 1 iP Week 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Internal task list kept as an array list of task objects */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates new task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Checks if list is empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if list is empty, false otherwise"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.tasks.isEmpty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns size of the list as an integer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return int representing size of the list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Adds given task to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean add(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.tasks.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns task from the list at specified index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param index the index of the task to be returned"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the specified task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IndexOutOfBoundsException if index specified \u003e list size"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Task get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Removes task at specified index from the task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param index the index of the task to be removed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IndexOutOfBoundsException if index specified \u003e list size"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.tasks.remove(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 71
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void doneEventTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //Event dummyEvent \u003d new Event(\"dummy\", \"02/10/2019 2000\", false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //dummyEvent.setTaskAsDone(true);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //assertEquals(true, dummyEvent.isDone());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void parseDateTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //assertEquals(true, new Event(\"dummy\", \"02/10/2019 2000\", false));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 17
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void nullTaskListTest(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //TaskList dummyList \u003d new TaskList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //assertEquals(null, dummyList.get(1));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void removeTask() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //TaskList dummyList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //dummyList.add(new Todo(\"dummy\", false));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //assertequals(true, dummyList.remove(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 17
    }
  },
  {
    "path": "src/test/java/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void todoToStringTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Todo testTask \u003d new Todo(\"eat banana\", false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String testTaskDescription \u003d testTask.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertEquals(\"T-N-eat banana\", testTaskDescription);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void todoIsDoneTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Todo toBeDone \u003d new Todo(\"run in circles\", false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        boolean isTestTaskDone \u003d toBeDone.setTaskAsDone(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertTrue(isTestTaskDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        isTestTaskDone \u003d toBeDone.setTaskAsDone(false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(isTestTaskDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 24
    }
  },
  {
    "path": "src/test/java/util/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void isEmptyTest(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        TaskList emptyList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        int listSize \u003d emptyList.size();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertEquals(0, listSize);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertTrue(emptyList.isEmpty());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void addTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        boolean isAdded \u003d testList.add(new Todo(\"dummy\", false));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertTrue(isAdded);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 24
    }
  }
]
