[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "run {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "application {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 60
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Todo|N|hello|#"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1
    }
  },
  {
    "path": "data/savedTasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "E|0|Test String|26/11/1996|1234|1234"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# User Guide - Grumpy Cat Task Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "![alt text](https://github.com/wilfredbtan/duke/blob/master/docs/Header.png?raw\u003dtrue \"Grump Cat Task Manager!\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This is a grumpy cat bot that will use it\u0027s negativity to make you feel more positive about yourself."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "You can tell it to *(begrudgingly)* do things such as save your `todos`, or `sort` your tasks and even tell you"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`jokes`. Have fun and stay positive! 😄"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [todo](#todo---add-a-new-todo-to-the-list) - Add a new Todo to the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [deadline](#deadline---add-a-new-deadline-to-the-task-list) - Add a new Deadline to the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [event](#event---add-a-new-event-to-the-task-list) - Add a new Event to the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [list](#list---list-out-all-current-tasks) - List out all current tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [done](#done---mark-a-task-as-done) - Mark a task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [delete](#delete---delete-an-existing-task) - Delete an existing task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [clear](#clear---clear-the-task-list-of-all-tasks) - Clear the task list of all tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [sort](#sort---sort-tasks-by-the-category-provided) - Sort tasks by the category provided."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [find](#find---find-a-task-using-a-keyword) - Find a task using a keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [joke](#joke---ask-grumpy-cat-to-tell-you-a-joke) - Ask grumpy cat to tell you a joke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * [bye](#bye---exit-the-program) - Exit the program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The Grumpy Cat knows how to add 3 kinds of tasks:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Type | Parameters | Description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "-----| -----------| -----------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`todo` | description | Adds a `todo` task with a `description`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`deadline` | description \\[dd-mm-yyyy] [HHmm] | Adds a  `deadline` task with a `description`, `date` and `time`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`event` | description \\[dd-mm-yyyy] [HHmm]-[HHmm] | Adds a  `deadline` task with a `description`, `startDate` ,`startTime` and `endTime`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### todo - Add a new Todo to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`todo feed grumpy cat`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "I\u0027ve added this task: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[T][✘] feed grumpy cat"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Now you have 1 task in this list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### deadline - Add a new Deadline to the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`deadline pat grumpy cat /12/12/2019 1234`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "I\u0027ve added this task: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[D][✘] pat grumpy cat (by: 12:34 2019-12-12)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Now you have 1 task in this list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### event - Add a new Event to the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`event pat grumpy cat /12/12/2019 1234-2345`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "I\u0027ve added this task: "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[E][✘] walk grumpy cat (at: 12:34-23:45 2019-12-12)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Now you have 1 task in this list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### list - List out all current tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1. [T][✘] feed grumpy cat"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "2. [D][✘] pat grumpy cat (by: 12:34 2019-12-12)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "3. [E][✘] walk grumpy cat (at: 12:34-23:45 2019-12-12)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### done - Mark a task as done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Finally doing something useful I see:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[D][✓] pat grumpy cat (by: 12:34 2019-12-12)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### delete - Delete an existing task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`delete 1` "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "I\u0027ve removed this task, now kindly remove yourself from my sight:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[T][✘] feed grumpy cat"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "You have 2 tasks in this list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### clear - Clear the task list of all tasks."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`clear`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Yours tasks have been cleared."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### sort - Sort tasks by the category provided."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`sort startDate`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Sort it yourseld... Ok fine here it is:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1. [D][✘] feed me (by: 12:34 2000-01-01)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "2. [D][✘] feed me later (by: 12:34 2019-12-12)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### find - Find a task using a keyword."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`find later`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "``` "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Now where\u0027s my fish."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1. [D][✘] feed me later (by: 12:34 2019-12-12)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### joke - Ask grumpy cat to tell you a joke."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`tell me a joke`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`you`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "### bye - Exit the program."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "- Grumpy Cat task manager closes"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 149,
      "-": 19
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1
    }
  },
  {
    "path": "src/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "       [T][✗] borrow book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     1.[T][✗] borrow book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "       [D][✗] return book (by: Sunday)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     Now you have 1 tasks in the list."
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 23
    }
  },
  {
    "path": "src/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deadline return book /by Sunday"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.StorageInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * duke.Main class used to drive the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @author Wilfred Bradley Tan, A0185405E."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Object used to execute commands. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Storage object to facilitate loading and saving of tasks. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private StorageInterface storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** List of tasks added by the user. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Logger logger \u003d Logger.getLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Initializes the system by requesting for user input. Executes the next command after parsed by the Parser and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      fed to the command object. Error messages will be shown if invalid commands are given."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"---------- Initialising Duke, your best friend! ----------\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.warning(Message.LOADING_ERROR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the response from the duke after taking in user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param userInput Input of the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return CommandResult of the user input after execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult getResponse(String userInput) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return command.execute(taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new CommandResult(Message.showError(e.getMessage()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 55,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.UiManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UiManager ui \u003d new UiManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ui.start(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16
    }
  },
  {
    "path": "src/main/java/duke/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * ClearCommand class used to clear the entire list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.CLEAR_SUCCESS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 18
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Abstract Command class can be extended to create sub commands which are executable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Drives the system by processing the given commands and doing the corresponding actions."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList which carries out tasks which edit the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when invalid or incomplete commands are given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public abstract CommandResult execute(TaskList taskList) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 17
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * CommandResult class which stores the results of each command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String userFeedback;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a CommandResult."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param userFeedback Feedback that will be given to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isExit Boolean that states whether the result is an exit command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult(String userFeedback, boolean isExit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.userFeedback \u003d userFeedback;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Convenience initializer if result is not an exit command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param userFeedback Feedback provided to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult(String userFeedback) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.userFeedback \u003d userFeedback;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the user feedback from the result."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return User feedback."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getUserFeedback() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.userFeedback;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Boolean to show whether result is an exit command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return True if result is an exit command, false otherwise."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * DeadlineCommand class which creates a new deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Description portion of the input. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a deadline command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param desc description of the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param date date of the deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param time time of the deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DeadlineCommand(String desc, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task deadline \u003d new Deadline(desc, date, time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.add(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.showAddSuccess(deadline, taskList));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * DeleteCommand class used to delete tasks from storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Index of item to delete. **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private int deleteIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a DeleteCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param deleteIndex Index of the item to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DeleteCommand(int deleteIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.deleteIndex \u003d deleteIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task deletedTask \u003d taskList.get(deleteIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.delete(deleteIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.showDeleteSuccess(deletedTask, taskList));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * DoneCommand class which marks tasks as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Index of tasks to mark as done. **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private int doneIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initializes a DoneCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param doneIndex Index of task to be marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DoneCommand(int doneIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.doneIndex \u003d doneIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task doneTask \u003d taskList.get(doneIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.setDone(doneTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.showDoneSuccess(doneTask));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 30
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * EventCommand class which creates a new Event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Description portion of the input. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Date when the event starts. **/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Time when the event start. **/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Time when the event ends. **/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises an EventCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param desc Description of the Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param startDate Date when the Event starts."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param startTime Time when the Event starts."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param endTime Time when the Event ends."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EventCommand(String desc, LocalDate startDate, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task event \u003d new Event(desc, startDate, startTime, endTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.add(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.showAddSuccess(event, taskList));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * ExitCommand class which exits the Duke system."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.EXIT, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * FindCommand class which finds tasks according to a specified keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Keyword used to find task. **/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initializes a FindCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param keyword Keyword of the task the user wants to find."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        TaskList filteredList \u003d taskList.find(keyword);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.showFindSuccess(filteredList));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 28
    }
  },
  {
    "path": "src/main/java/duke/command/JokeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * JokeCommand class which tells the user that he is a joke when executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class JokeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(\"you\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 15
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * ListCommand class which lists out all the tasks in the system."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new CommandResult(Message.EMPTY_LIST);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new CommandResult(Message.showList(taskList));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 20
    }
  },
  {
    "path": "src/main/java/duke/command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * SortCommand class which sorts the tasks according to a category."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Category to be sorted by. **/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initializes a SortCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param category Category to be sorted by."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public SortCommand(String category) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        TaskList sortedList \u003d taskList.sort(category);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.showSortSuccess(sortedList));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 29
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * TodoCommand class used to create a new Todo task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Description of the task. **/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initializes a new TodoCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param desc Description of the Todo task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TodoCommand(String desc) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task todo \u003d new Todo(desc);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        taskList.add(todo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(Message.showAddSuccess(todo, taskList));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 31
    }
  },
  {
    "path": "src/main/java/duke/command/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Command package which contains classes that can be used to execute commands received by the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.command;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * DukeException class which can be thrown when exceptions related to Duke are raised. Will eventually be caught by"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Duke Object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a DukeException object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param errorMessage Custom error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param err Throwable which is raised by the exception caught."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DukeException(String errorMessage, Throwable err) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(errorMessage, err);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Exception package which contains custom exceptions for Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.exception;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.JokeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Parser class used to process Strings into data that the Command object can execute."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses user input into a Command object containing its required components such as description, date and time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      according to the command given."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param userInput Input provided by the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when there is an invalid format provided. For example,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      missing date / time or incorrect date / time format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (userInput.contains(\"joke\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new JokeCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Scanner sc \u003d new Scanner(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String commandString \u003d sc.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (commandString) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String desc \u003d sc.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String trimmedDesc \u003d desc.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new TodoCommand(trimmedDesc);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Incomplete command. Please include a description!\", e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String[] descriptionAndDate \u003d sc.nextLine().split(\"/\", 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String[] dateTimeArr \u003d descriptionAndDate[1].split(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String desc \u003d descriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                logger.info(\"description: \" +  desc);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(dateTimeArr[0], dateFormatter());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                logger.info(dateTimeArr[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String[] timeRange \u003d dateTimeArr[1].split(\"-\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                LocalTime time \u003d LocalTime.parse(timeRange[0], timeFormatter());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                if (commandString.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    return new DeadlineCommand(desc, date, time);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    LocalTime endTime \u003d LocalTime.parse(timeRange[1], timeFormatter());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    return new EventCommand(desc, date, time, endTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | NoSuchElementException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Incomplete command, include a date and time you fool.\", e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                int deleteIndex \u003d sc.nextInt();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new DeleteCommand(deleteIndex - 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Enter the command in this format: delete [index]\", e);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                int doneIndex \u003d sc.nextInt();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new DoneCommand(doneIndex - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Enter the command in this format: done [index]\", e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String keyword \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new FindCommand(keyword);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Incomplete command. Input at least 1 keyword you fool!\", e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String category \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new SortCommand(category);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new DukeException(\"Incomplete command. Choose a category to sort by!\", e);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(Message.GENERAL_INVALID_INPUT, null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses Strings into Task objects."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskData String in the format type|isDone|desc|startDate(optional)|startTime(optional)|endTime(optional)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Task object."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException Exception is thrown when an invalid task is loaded."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Task parseStringToTask(String taskData) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String desc;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        LocalDate newStartDate;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        LocalTime newStartTime;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        LocalTime newEndTime;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String[] dataArr \u003d taskData.split(\"[|]\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        type \u003d dataArr[0];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        isDone \u003d (dataArr[1].equals(\"1\")) ? true : false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        desc \u003d dataArr[2];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newTask \u003d new Todo(desc);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newStartDate \u003d LocalDate.parse((dataArr[3]), dateFormatter());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newStartTime \u003d LocalTime.parse((dataArr[4]), timeFormatter());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newTask \u003d new Deadline(desc, newStartDate, newStartTime);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newStartDate \u003d LocalDate.parse((dataArr[3]), dateFormatter());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newStartTime \u003d LocalTime.parse((dataArr[4]), timeFormatter());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newEndTime \u003d LocalTime.parse((dataArr[5]), timeFormatter());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            newTask \u003d new Event(desc, newStartDate, newStartTime, newEndTime);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(\"invalid task loaded\", 0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        newTask.setDone(isDone);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * DateTimeFormatter which can be used to validate the formats of date strings."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return DateTimeFormatter to validate date formats."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static DateTimeFormatter dateFormatter() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][dd/MM/yy][dd-MM-yyyy]\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"[dd-MM-yy]\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * DateTimeFormatter which can be used to validate the formats of time strings."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return DateTimeFormatter to validate time formats."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static DateTimeFormatter timeFormatter() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"[HHmm][HH:mm][H]\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 188
    }
  },
  {
    "path": "src/main/java/duke/parser/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Parser package which contains classes which can process user input into objects that can be used by Command objects."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.parser;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Storage class which handles the loading and saving of Task data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Storage implements StorageInterface {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Filepath to load from and save to. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String DEFAULT_PATH \u003d \"data\" + File.separator + \"savedTasks.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Storage object with the default file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.file \u003d new File(DEFAULT_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Storage object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param filePath File path to load to and save from."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Loads a file and parses the data into Tasks which are stored in a TaskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Tasklist that contains the loaded tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws IOException Exception is thrown when an invalid file path is provided."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            InputStreamReader isr \u003d new InputStreamReader(fis, \"UTF-8\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(isr);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                Task newTask \u003d Parser.parseStringToTask(line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.severe(\"Failed to parse String to task\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Saves the data of the TaskList in a text file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList that is to be saved."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void save(TaskList taskList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String formattedData \u003d formatData(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                writer.append(formattedData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                writer.append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.severe(\"invalid filePath\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Formats the data of a Task in the format of type|isDone|desc|startDate(optional)|startTime(optional)|endTime"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * (optional)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param currTask Task that will be formatted."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String of the formatted Task data."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String formatData(Task currTask) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String data \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        data +\u003d currTask.getType() + \"|\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        data +\u003d currTask.getDone() ? \"1|\" : \"0|\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        data +\u003d currTask.getDescription();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (currTask instanceof Deadline) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            data +\u003d \"|\" + ((Deadline) currTask).getStartDate().format(dateFormatter)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"|\" + ((Deadline) currTask).getStartTime().format(timeFormatter);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (currTask instanceof Event) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            data +\u003d \"|\" + ((Event) currTask).getStartDate().format(dateFormatter)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"|\" + ((Event) currTask).getStartTime().format(timeFormatter)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"|\" + ((Event) currTask).getEndTime().format(timeFormatter);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 127
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public interface StorageInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void save(TaskList taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 14
    }
  },
  {
    "path": "src/main/java/duke/storage/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Storage package which contains classes that handle the loading and saving of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.storage;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Deadline class indicated with type \"D\" which contains a date and time on top of other Task components."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Date of the Deadline. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Time of the Deadline. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Deadline object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param description Description of the Deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param startDate Date of the Deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param startTime Time of the Deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Deadline(String description, LocalDate startDate, LocalTime startTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the date of the Deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Date of the Deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the time of the Deadline."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Time of the Deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * String of the type followed by status icon, description, date and time of Deadline."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String in the given format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + startTime + \" \" + startDate + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 54
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Event class indicated with type \"E\" which contains a start date, start time and end time on top of the other"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * components that Task has."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Date when the event starts. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Time when the event starts. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Time when the event ends. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises and Event object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param description Description of the Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param startDate Date when the Event starts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param startTime Time when the Event starts."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param endTime Time when the Event ends."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Event(String description, LocalDate startDate, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the date when the Event starts."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Start date of Event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the time when the Event starts."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Start time of the Event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the time when the Event ends."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return End time of the Event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * String of the type followed by status icon, description, start date, start time and end time of the Event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String in the given format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + startTime"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"-\" + endTime + \" \" + startDate + \")\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 68
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Task abstract class which can be extended to create sub tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Type of Task. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Description of Task. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Boolean indicated whether Task is done or not. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Task object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param description Description of the Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the status icon of the task. Shows a tick if done and an \"x\" if Task is not done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Status icon of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Task as done or not depending on the argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isDone boolean to determine whether Task is marked as done or not."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the type of the Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Type of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the description of the Task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Description of the Task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the status of the Task (i.e. whether done or not)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Status of the Task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets default value for date when a task starts. Set to an arbitrarily far date in the future for task sub classes"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      that do not have this field."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return the default value for start date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalDate.parse(\"01-01-3000\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd-MM-yyyy\", Locale.ENGLISH));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets default value for time when a task starts. Set to 2359 for task sub classes that do not have this field."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return the default value for start time."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalTime.parse(\"2359\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                DateTimeFormatter.ofPattern(\"HHmm\", Locale.ENGLISH));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets default value for time when a task ends. Set to 2359 for task sub classes that do not have this field."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return the default value for end time."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalTime.parse(\"2359\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                DateTimeFormatter.ofPattern(\"HHmm\", Locale.ENGLISH));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * String of the status icon followed by description."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String in the given format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 105
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Todo class indicated with type \"T\" which contains a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a Todo class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param description Description of the Todo class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * String of the type followed by status icon and description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String in the given format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"[\" + this.type + \"]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 25
    }
  },
  {
    "path": "src/main/java/duke/task/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Task package which contains the various types of tasks that the user can create."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.task;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.StorageInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * TaskList class which handles the commands related to the task list such as add and remove."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** List of tasks. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private StorageInterface storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises the TaskList object with an empty task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sorts the task list according to the specified category."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param category Category that tasks will be sorted by."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return The original list after being sorted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when invalid category is provided."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TaskList sort(String category) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sortedTasks \u003d tasks.stream().sorted(Comparator.comparing(Task::getDescription))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"type\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sortedTasks \u003d tasks.stream().sorted(Comparator.comparing(Task::getType))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sortedTasks \u003d tasks.stream().sorted(Comparator.comparing(Task::getDone).reversed())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"startDate\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sortedTasks \u003d tasks.stream().sorted(Comparator.comparing(Task::getStartDate))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"startTime\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sortedTasks \u003d tasks.stream().sorted(Comparator.comparing(Task::getStartTime))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"endTime\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sortedTasks \u003d tasks.stream().sorted(Comparator.comparing(Task::getEndTime))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"Sort using either description, type, done, startDate \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"startTime or endTime. Or sort yourself out first.\", null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        tasks \u003d sortedTasks;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        storage.save(this);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Finds a task from the taskList."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param keyword Keyword that user is searching for in task\u0027s description. For example, \"test string\" contains"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *                the \"test\" keyword."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return TaskList that contains the tasks that were found."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e filteredList \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                tasks.stream().filter(t -\u003e t.getDescription().contains(keyword))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new TaskList(filteredList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param task Task that is to be added to the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when an invalid task is added. For example, an incomplete command or"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      tasks with null description."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add(Task task) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            requireNonNull(task.getDescription());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            int sizeOfTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            int expectedSize \u003d sizeOfTasks + 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            assert tasks.size() \u003d\u003d expectedSize : \"Task was not added\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            storage.save(this);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"That\u0027s an incomplete command. Failed to add task.\", null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Removes the task from the task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param index Index of the task to be removed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when an invalid index is provided i.e. IndexOutOfBoundsException"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void delete(int index) throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            int sizeOfTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            int expectedSize \u003d sizeOfTasks - 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            assert tasks.size() \u003d\u003d expectedSize : \"Task was not deleted\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            storage.save(this);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"That index is out of range! Task not deleted.\", e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Removes all the tasks from the original task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        storage.save(this);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the task as done in the Storage."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param task Task which will be set as done."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is thrown when an invalid index is provided i.e. IndexOutOfBoundsException"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setDone(Task task) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            storage.save(this);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"That index is out of range! Task not marked as done.\", e);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the TaskList."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the size of the task list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Integer indicating the size of the task list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the task from the index stated."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param index Index of the task to be retrieved."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Task which is retrieved."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Task get(int index) throws DukeException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return tasks.get(index);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DukeException(\"That index is out of range! Task not marked as done.\", e);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 187
    }
  },
  {
    "path": "src/main/java/duke/tasklist/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Tasklist package which contains classes that handle actions pertaining to modifying or querying the tasklist."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.tasklist;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * DialogBox class used to create the input from user and output from Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Label to display text. **/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** View to display the profile picture. **/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Container to display the conversation. **/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initializes a DialogBox."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param text text that the dialog box contains."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param img profile picture attached to the dialog box."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the user dialog box and formats it accordingly."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param text text that the user has written."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param img profile picture of the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return DialogBox containing the user text and profile picture."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        var userDB \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        BackgroundFill bgFill \u003d new BackgroundFill(Color.web(\"#fa983a\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new CornerRadii(20.0, 0.0, 0.0, 20.0, false),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new Insets(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userDB.setBackground(new Background(bgFill));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        VBox.setMargin(userDB, new Insets(5, 0, 5, 10));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return userDB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the duke dialog box and formats it accordingly."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param text response of duke."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param img profile picture of duke."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return DialogBox containing duke\u0027s response and profile picture."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        var dukeDB \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        BackgroundFill bgFill \u003d new BackgroundFill(Color.web(\"#7f8c8d\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new CornerRadii(0.0, 20.0, 20.0, 0.0, false),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new Insets(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        dukeDB.setBackground(new Background(bgFill));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        VBox.setMargin(dukeDB, new Insets(5, 10, 5, 0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        HBox.setHgrow(dukeDB, Priority.ALWAYS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        dukeDB.flip();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return dukeDB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 103
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FXML \u003d \"/view/MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** ScrollPane of the main window. **/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Vertical Box to contain the conversation. **/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Textfield to receive user input. **/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Button to send user input to the system. **/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Instance of duke used to drive the system. **/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Primary stage of all views. **/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Profile picture of the user. **/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userCat.png\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Profile picture of Duke. **/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukeCat.png\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Logger logger \u003d Logger.getLogger(MainWindow.class.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises the main window."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param primaryStage Primary stage to contain descendent views."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public MainWindow(Stage primaryStage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        fxmlLoader.setLocation(getFxmlFileUrl(FXML));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        fxmlLoader.setRoot(primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        duke \u003d new Duke();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    DialogBox.getDukeDialog(Message.WELCOME, dukeImage)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Displays the primary stage."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                DialogBox.getDukeDialog(response.getUserFeedback(), dukeImage)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (response.isExit()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Handles actions to do upon exit."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"---------Bye! See you again----------\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Gets the URL of the FXML file used."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param fxmlFileName name of FXML file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return URL of the FXML file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        URL fxmlFileUrl \u003d Main.class.getResource(fxmlFileName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 129
    }
  },
  {
    "path": "src/main/java/duke/ui/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Message Class which handles all the messages which can be output to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String WELCOME \u003d \"Feed me, human. \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Then I might consider doing the following:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"        tell me a joke\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"        todo [desc]\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"        sort [category]\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String EXIT \u003d \"Bye. Hope to never see you again!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String EMPTY_LIST \u003d \"No tasks on this list (except feeding me)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String LOADING_ERROR \u003d \"No existing data. Duke initialised with an empty TaskList\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String GENERAL_INVALID_INPUT \u003d \"Instead of wasting time typing gibberish, why don\u0027t you make \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"yourself useful and feed me.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String CLEAR_SUCCESS \u003d \"Your tasks have been cleared.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows the list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList that is to be shown."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Throws an exception if it is an invalid list or there exists and invalid task in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String showList(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String list \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            list +\u003d (i + 1) + \". \" + taskList.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a formatted error message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param errorMessage Error message that will be printed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String showError(String errorMessage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a success message when the sort is successfully sorted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList Tasklist that is being sorted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return String of the success message and sorted tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Throws an exception if it is an invalid list or there exists and invalid task in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String showSortSuccess(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"Sort it yourself... Ok fine here it is: \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + showList(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a message of the list of tasks found."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList Filtered Tasklist that will be displayed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return List of tasks found."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Throws an exception if it is an invalid list or there exists and invalid task in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String showFindSuccess(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"Now where\u0027s my fish.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + showList(taskList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a message when a task has been successfully added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param addedTask Task that is to be added."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList that the Task is to be added to."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String showAddSuccess(Task addedTask, TaskList taskList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + addedTask + \"\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"Now you have \" + taskList.getSize() + \" tasks in this list.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a message when a task has been successfully deleted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param deletedTask Task that is to be deleted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param taskList TaskList that the Task is to be deleted from."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String showDeleteSuccess(Task deletedTask, TaskList taskList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"I\u0027ve removed this task, now kindly remove yourself from my sight:\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + deletedTask + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"You have \" + taskList.getSize() + \" tasks in this list.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows a message when a task is successfully marked as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param doneTask Task that is to be marked as done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String showDoneSuccess(Task doneTask) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \"Finally doing something useful I see:\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + doneTask;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 101
    }
  },
  {
    "path": "src/main/java/duke/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Ui class which generates feedback to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class UiManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Mainwindow for views to be presented on. **/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Starts the application and shows the primary stage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param primaryStage Primary stage where the views will be shown."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            primaryStage.setTitle(\"How about, no.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 27
    }
  },
  {
    "path": "src/main/java/duke/ui/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Ui package which contains classes that provide feedback to users."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package duke.ui;"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c!--\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e--\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cfx:root id\u003d\"dialog-box\" alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel id\u003d\"dialog-text\" fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cImageView id\u003d\"profile-picture\" fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cAnchorPane id\u003d\"anchor-pane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        prefHeight\u003d\"700.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                               prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u003cButton id\u003d\"send-button\" fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u003cScrollPane id\u003d\"scroll-pane\" fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"657.0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            \u003cVBox id\u003d\"dialog-container\" fx:id\u003d\"dialogContainer\" prefHeight\u003d\"652.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u003cURL value\u003d\"@main.css\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 37
    }
  },
  {
    "path": "src/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 34
    }
  },
  {
    "path": "src/test/java/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.StorageInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StorageStub implements StorageInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void save(TaskList taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 17
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Storage Test class to test the functionality of the Storage class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Absolute file path used to test loading and saving functionality. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FILEPATH \u003d \"data\" + File.separator + \"testSave.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests the success of formatting a Todo into the format used for saving / loading."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void formatData_todo_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task todoStub \u003d new Todo(\" testString\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"T|0| testString\", new Storage(FILEPATH).formatData(todoStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests the success of formatting a Deadline into the format used for saving / loading."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void formatData_deadline_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task deadlineStub \u003d new Deadline(\" testString \", dateStub(), timeStub());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"D|0| testString |26/11/1996|1234\", new Storage(FILEPATH).formatData(deadlineStub));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests the success of formatting a Event into the format used for saving / loading."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void formatData_event_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task eventStub \u003d new Event(\" testString \", dateStub(), timeStub(), timeStub());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"E|0| testString |26/11/1996|1234|1234\", new Storage(FILEPATH).formatData(eventStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Generates a LocalDate constant which can be used for testing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return LocalDate stub used for testing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static LocalDate dateStub() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalDate.parse(\"26/11/1996\", formatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Generates a LocalTime constant which can be used for testing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return LocalTime stub used for testing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static LocalTime timeStub() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalTime.parse(\"1234\", formatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 69
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * TaskListTest class used to test the functionality of TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates an ArrayList with the provided task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param task Task that the ArrayList will be created with."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return ArrayList of the task provided."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cTask\u003e createList(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        newList.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests the success of adding Todo / Deadline / Event tasks to a TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws DukeException Exception is raised when an invalid task is added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add_tasks_success() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task todoStub \u003d new Todo(\"Test String\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e testTodoList \u003d createList(todoStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        TaskList todoTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        todoTaskList.add(todoStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(testTodoList, todoTaskList.getTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task deadlineStub \u003d new Deadline(\"Test String\", dateStub(), timeStub());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e testDeadlineList \u003d createList(deadlineStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        TaskList deadlineTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        deadlineTaskList.add(deadlineStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(testDeadlineList, deadlineTaskList.getTasks());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task eventStub \u003d new Event(\"Test String\", dateStub(), timeStub(), timeStub());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cTask\u003e testEventList \u003d createList(eventStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        TaskList eventTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        eventTaskList.add(eventStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(testEventList, eventTaskList.getTasks());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Generates a LocalDate constant which can be used for testing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return LocalDate stub used for testing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static LocalDate dateStub() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalDate.parse(\"26/11/1996\", formatter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Generates a LocalTime constant which can be used for testing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return LocalTime stub used for testing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static LocalTime timeStub() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return LocalTime.parse(\"1234\", formatter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 75
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//public class UiTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    public void setUpStreams() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    @AfterEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    public void restoreStreams() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//        System.setOut(originalOut);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//        System.setErr(originalErr);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 24
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external commandBuilder` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 169
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Next, we create another Java class, `duke.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The `duke.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class duke.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Run `duke.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "-": 106
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `duke.Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `duke.Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(DukeStub.getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Now, we can go back to the `duke.Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(DukeStub.getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 240
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   Why does `duke.Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   The `duke.Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Let\u0027s create a new `duke.Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "**duke.Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class duke.Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The last change that we have to make is to point our `duke.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "In `duke.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Application.launch(duke.Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "-": 285
    }
  }
]
