[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "gabrielseow": 28
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "gabrielseow": 17
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.view.Main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 11
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * duke.view.Main driver class for Duke application. Duke application helps the user to manage tasks and allows the user to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * add, remove, mark a task as completed, list all tasks and find all tasks containing a keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static final String SAVE_DIRECTORY \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            \"C:/Users/gbrls/OneDrive/Desktop/duke-master/src/main/java/duke/data/tasks.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Loads a save file and generates a new Ui, Storage and TaskList object stored as instance variables."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        storage \u003d new Storage(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String getResponse(String input) { //find a way to show welcome"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            command.execute(tasks, ui, storage); //refactor way to display ui message"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return \"Duke heard: \" + ui.getOutput();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 60
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    Task newTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public AddCommand(Task newTask) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.newTask \u003d newTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        taskList.addTask(newTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String taskDescription \u003d newTask.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ui.showAddTaskMessage(taskDescription, taskList.getListSize());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 26
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 12
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    int deletedTaskIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DeleteCommand(int deletedTaskIndex) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.deletedTaskIndex \u003d deletedTaskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task deletedTask \u003d taskList.deleteTask(deletedTaskIndex);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String taskDescription \u003d deletedTask.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ui.showDeleteTaskMessage(taskDescription, taskList.getListSize());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    int completedTaskIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DoneCommand(int completedTaskNum) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.completedTaskIndex \u003d completedTaskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task completedTask \u003d taskList.completeTask(completedTaskIndex);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String taskDescription \u003d completedTask.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ui.showDoneMessage(taskDescription);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 26
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        storage.saveTasks(taskList.getTaskList());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 22
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ArrayList\u003cTask\u003esearchResultTaskList \u003d Parser.findTasksByKeyword(keyword, taskList.getTaskList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int searchResultTaskListLen \u003d searchResultTaskList.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String[] taskDescriptionArray \u003d new String[searchResultTaskListLen];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (int i \u003d 0; i \u003c searchResultTaskListLen; i ++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            taskDescriptionArray[i] \u003d searchResultTaskList.get(i).toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ui.showSearchResult(taskDescriptionArray);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ArrayList\u003cTask\u003e taskListArray \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int taskListSize \u003d taskListArray.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String[] taskDescriptionArray \u003d new String[taskListSize];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (int i \u003d 0; i \u003c taskListSize; i ++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            taskDescriptionArray[i] \u003d taskListArray.get(i).toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ui.showList(taskDescriptionArray);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 30
    }
  },
  {
    "path": "src/main/java/duke/datetime/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int day;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final int time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private final String dateTimeString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private String dateTimePrintFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DateTime(int day, int month, int year, int time, String dateTimeString) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.dateTimeString \u003d dateTimeString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return dateTimeString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (dateTimePrintFormat !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return dateTimePrintFormat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String formattedDay \u003d \"\" + day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String formattedMonth \u003d \" of \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String formattedYear \u003d \" \" + 20 + year + \", \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String formattedTime \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int rem \u003d day % 10;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            switch (rem) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedDay +\u003d \"st\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedDay +\u003d \"nd\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedDay +\u003d \"rd\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedDay +\u003d \"th\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            switch (month) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"January\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"February\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"March\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"April\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"May\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"June\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"July\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"August\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"September\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 10:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"October\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 11:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"November\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            case 12:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedMonth +\u003d \"December\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                //Add error handling"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int minutes \u003d time % 100;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            boolean isMorning \u003d time \u003e\u003d 1200"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    ? false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    : true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int hours \u003d (time - minutes) / 100;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (hours \u003e 12) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                hours -\u003d 12;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            formattedTime +\u003d hours;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (minutes !\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedTime +\u003d \".\" + minutes;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (isMorning) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedTime +\u003d \"am\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                formattedTime +\u003d \"pm\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            dateTimePrintFormat \u003d formattedDay + formattedMonth + formattedYear + formattedTime;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return dateTimePrintFormat;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 112
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeDeadlineIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DukeDeadlineIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DukeDeadlineIllegalArgumentException(String fieldName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(\"☹ OOPS!!! The \" + fieldName + \" of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 7
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeDeleteIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DukeDeleteIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DukeDeleteIllegalArgumentException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 7
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeEventIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DukeEventIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DukeEventIllegalArgumentException(String fieldName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(\"☹ OOPS!!! The \" + fieldName + \" of an event cannot be empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 7
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 12
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeFindIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DukeFindIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DukeFindIllegalArgumentException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(\"You have entered \" + message + \" keywords in your search\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 7
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DukeIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DukeIllegalArgumentException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 7
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeSaveFileCorruptedError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DukeSaveFileCorruptedError extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DukeSaveFileCorruptedError() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(\"The save file is corrupted. Creating new save file...\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 7
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeToDoIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DukeToDoIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public DukeToDoIllegalArgumentException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 7
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.datetime.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeToDoIllegalArgumentException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeEventIllegalArgumentException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeDeadlineIllegalArgumentException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeDeleteIllegalArgumentException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeSaveFileCorruptedError;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeFindIllegalArgumentException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String[] newTaskSplit \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String taskType \u003d newTaskSplit[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        switch(taskType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new  ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int completedTaskNum \u003d parseDoneCommand(newTaskSplit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new DoneCommand(completedTaskNum);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int deletionNum \u003d parseDeleteCommand(newTaskSplit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new DeleteCommand(deletionNum);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            Task newEvent \u003d parseAddEventCommand(newTaskSplit);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new AddCommand(newEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            Task newDeadline \u003d parseAddDeadlineCommand(newTaskSplit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new AddCommand(newDeadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            Task newToDo \u003d parseAddToDoCommand(newTaskSplit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new AddCommand(newToDo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String keyword \u003d parseFindCommand(newTaskSplit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeIllegalArgumentException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static int parseDoneCommand(String[] newTaskSplit) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int completedTaskNum \u003d Integer.parseInt(newTaskSplit[1]) - 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return completedTaskNum;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static int parseDeleteCommand(String[] newTaskSplit) throws DukeDeleteIllegalArgumentException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int newTaskLen \u003d newTaskSplit.length;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (newTaskLen \u003c 2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeDeleteIllegalArgumentException(\"You have not entered a number for deletion\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else if (newTaskLen \u003e 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeDeleteIllegalArgumentException(\"You have entered too many arguments for deletion\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                int deletionNum \u003d Integer.parseInt(newTaskSplit[1]) - 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                return deletionNum;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                throw new DukeDeleteIllegalArgumentException(\"Please enter a valid number for deletion\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                throw new DukeDeleteIllegalArgumentException(\"Please enter a valid number within the range\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static ToDo parseAddToDoCommand(String[] newTaskSplit) throws DukeToDoIllegalArgumentException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int newTaskLen \u003d newTaskSplit.length;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String description \u003d newTaskSplit[1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (int i \u003d 2; i \u003c newTaskLen; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                description +\u003d \" \" + newTaskSplit[i];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            ToDo newToDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return newToDo;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeToDoIllegalArgumentException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static Deadline parseAddDeadlineCommand(String[] newTaskSplit) throws DukeDeadlineIllegalArgumentException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int newTaskLen \u003d newTaskSplit.length;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            boolean foundDeadline \u003d false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String description \u003d newTaskSplit[1];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String deadlineTimeString \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (int i \u003d 2; i \u003c newTaskLen; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                if (foundDeadline) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    if (i \u003d\u003d newTaskLen - 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        deadlineTimeString +\u003d newTaskSplit[i];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        deadlineTimeString +\u003d newTaskSplit[i] + \" \";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    if (newTaskSplit[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        foundDeadline \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        description +\u003d \" \" + newTaskSplit[i];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (foundDeadline) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                DateTime deadlineTime \u003d convertDateTime(deadlineTimeString);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                Deadline newDeadline \u003d new Deadline(description, deadlineTime);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                return newDeadline;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                throw new DukeDeadlineIllegalArgumentException(\"deadline\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeDeadlineIllegalArgumentException(\"description\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static Event parseAddEventCommand(String[] newTaskSplit) throws DukeEventIllegalArgumentException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            int newTaskLen \u003d newTaskSplit.length;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            boolean foundEvent \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String description \u003d newTaskSplit[1];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String eventTimeString \u003d \"\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (int i \u003d 2; i \u003c newTaskLen; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                if (foundEvent) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    if (i \u003d\u003d newTaskLen - 1) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        eventTimeString +\u003d newTaskSplit[i];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        eventTimeString +\u003d newTaskSplit[i] + \" \";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    if (newTaskSplit[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        foundEvent \u003d true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                        description +\u003d \" \" + newTaskSplit[i];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (foundEvent) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                DateTime eventTime \u003d convertDateTime(eventTimeString);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                Event newEvent \u003d new Event(description, eventTime);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                return newEvent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                throw new DukeEventIllegalArgumentException(\"event timing\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeEventIllegalArgumentException(\"description\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static String parseFindCommand(String[] newTaskSplit) throws DukeFindIllegalArgumentException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int newTaskLen \u003d newTaskSplit.length;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (newTaskLen \u003d\u003d 2) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String keyword \u003d newTaskSplit[1];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return keyword;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else if (newTaskLen \u003e 2) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeFindIllegalArgumentException(\"too many\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeFindIllegalArgumentException(\"too few\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static ArrayList\u003cTask\u003e findTasksByKeyword(String keyword, ArrayList\u003cTask\u003e taskArrayList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ArrayList\u003cTask\u003e searchResultArrayList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (Task task : taskArrayList) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String[] descriptionSplit \u003d task.getDescription().split(\" \");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            boolean keyWordFound \u003d false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (String word : descriptionSplit) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                if (word.equals(keyword)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    keyWordFound \u003d true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (keyWordFound) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                searchResultArrayList.add(task);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return searchResultArrayList;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static DateTime convertDateTime(String dateTimeString) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String[] dateTimeStringSplit \u003d dateTimeString.split(\" \");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String[] dateStringSplit \u003d dateTimeStringSplit[0].split(\"/\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int day \u003d Integer.parseInt(dateStringSplit[0]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int month \u003d Integer.parseInt(dateStringSplit[1]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int year \u003d Integer.parseInt(dateStringSplit[2]);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int time \u003d Integer.parseInt(dateTimeStringSplit[1]);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new DateTime(day, month, year, time, dateTimeString);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static Task parseSaveData(String newTaskString) throws DukeSaveFileCorruptedError {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String[] newTaskSplit \u003d newTaskString.split(\" \\\\| \");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String taskType \u003d newTaskSplit[0];"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        boolean taskIsDone \u003d Integer.parseInt(newTaskSplit[1]) \u003d\u003d 1"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                ? true"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                : false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String description \u003d newTaskSplit[2];"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        switch(taskType) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            DateTime deadlineTime \u003d convertDateTime(newTaskSplit[3]);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            newTask \u003d new Deadline(description, deadlineTime);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            DateTime eventTime \u003d convertDateTime(newTaskSplit[3]);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            newTask \u003d new Event(description, eventTime);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeSaveFileCorruptedError();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (newTask !\u003d null) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (taskIsDone) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                newTask.taskComplete();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else  {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            throw new DukeSaveFileCorruptedError();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 238
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.dukeexception.DukeSaveFileCorruptedError;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private String saveFilePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public Storage(String saveFilePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.saveFilePath \u003d saveFilePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeSaveFileCorruptedError {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            FileReader tasksFileReader \u003d new FileReader(new File(saveFilePath));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            BufferedReader bTasksFileReader \u003d new BufferedReader(tasksFileReader);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            return readTasksFile(bTasksFileReader);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            createNewSaveFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (DukeSaveFileCorruptedError e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            createNewSaveFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            new File(saveFilePath).delete();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            createNewSaveFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(saveFilePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                writer.write(task.toSaveFormat() + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private void createNewSaveFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            File newSaveFile \u003d new File(saveFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            newSaveFile.createNewFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private ArrayList\u003cTask\u003e readTasksFile(BufferedReader bTasksFileReader) throws DukeSaveFileCorruptedError {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String newTaskString \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                newTaskString \u003d bTasksFileReader.readLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (newTaskString \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            Task newTask \u003d Parser.parseSaveData(newTaskString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            bTasksFileReader.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 84
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private DateTime deadlineTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static final String ABBREV_TASK \u003d \"D\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public Deadline(String description, DateTime deadlineTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.deadlineTime \u003d deadlineTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return ABBREV_TASK + \" | \" + taskIsDoneState + \" | \" + description + \" | \" + deadlineTime.toSaveFormat();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadlineTime + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 23
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private DateTime eventTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static final String ABBREV_TASK \u003d \"E\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public Event(String description, DateTime eventTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return ABBREV_TASK + \" | \" + taskIsDoneState + \" | \" + description + \" | \" + eventTime.toSaveFormat();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventTime + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 23
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    protected boolean taskIsDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    protected int taskIsDoneState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.taskIsDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.taskIsDoneState \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void taskComplete() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        taskIsDone \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        taskIsDoneState \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public abstract String toSaveFormat();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (taskIsDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            output \u003d \"Complete\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            output \u003d \"Incomplete\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output +\u003d \" \" + description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 37
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private static final String ABBREV_TASK \u003d \"T\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return ABBREV_TASK + \" | \" + taskIsDoneState + \" | \" + description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 19
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public Task deleteTask(int index) throws IndexOutOfBoundsException{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return taskList.remove(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public Task completeTask(int completedTaskIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Task completedTask \u003d taskList.get(completedTaskIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        completedTask.taskComplete();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return completedTask;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 40
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private String output;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showAddTaskMessage(String taskDescription, int listSize) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                + taskDescription"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                + \"\\nNow you have \" + listSize + \" tasks in the list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        //System.out.println(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showDeleteTaskMessage(String taskDescription, int listSize) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output \u003d \"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                + taskDescription"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                + \"\\nNow you have \" + listSize + \" tasks in the list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        //System.out.println(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showDoneMessage(String taskDescription) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        //System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\" + taskDescription);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output \u003d \"Nice! I\u0027ve marked this task as done: \\n\" + taskDescription;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showList(String[] taskDescriptionArray) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int taskLen \u003d taskDescriptionArray.length;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (taskLen \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            System.out.println(\"You do not have any tasks in your list\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            output \u003d \"Here are the tasks in your list: \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (int i \u003d 0; i \u003c taskLen; i ++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                String taskDescription \u003d taskDescriptionArray[i];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                output +\u003d \"\\n\" + (i + 1) + \".\" + taskDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            //System.out.println(output);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showSearchResult(String[] taskDescriptionArray) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        int taskLen \u003d taskDescriptionArray.length;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        if (taskLen \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            System.out.println(\"There are no matching tasks in your list\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            output \u003d \"Here are the matching tasks in your list: \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            for (int i \u003d 0; i \u003c taskLen; i ++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                String taskDescription \u003d taskDescriptionArray[i];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                output +\u003d \"\\n\" + (i + 1) + \".\" + taskDescription;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            //System.out.println(output);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String welcomeMessage \u003d \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output \u003d \"Hello from\\n\" + logo;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output +\u003d getLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output +\u003d welcomeMessage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output +\u003d getLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private String getLine() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return \"____________________________________________________________\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        //Consider making DukeLoadingError"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output \u003d \"No save file found... creating new save file\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output \u003d errorMessage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        output \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 104
    }
  },
  {
    "path": "src/main/java/duke/view/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 62
    }
  },
  {
    "path": "src/main/java/duke/view/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 34
    }
  },
  {
    "path": "src/main/java/duke/view/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "package duke.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 53
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.view.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 19
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void testParserDoneCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String[] test1 \u003d {\"oeeowirkejwokwefokwenfowe\", \"2\", \"er980r3jofnb3irAO\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String[] test2 \u003d {\"09j2e0inwqi3h\", \"1232\", \"n340239rjejfiwbow\", \"201j921jfklffwe\", \"1208hj10inef\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String[] test3 \u003d {\"2904912jffdasd\", \"22\", \"sjndq0irh3qr0rn\", \"qj0rj9qr0ods\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ArrayList\u003cString[]\u003e testCases \u003d new ArrayList\u003cString[]\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCases.add(test1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCases.add(test2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCases.add(test3);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (String[] testCase : testCases) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            assertEquals(Integer.parseInt(testCase[1]) - 1, parser.parseDoneCommand(testCase));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 25
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void testToSaveFormat() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String test1String \u003d \"asfiuab9r3h83he9fudfeuifenifbewfiewbreirubewri\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String test2String \u003d \"for3nrSOFBN#IR(FNOIFNjfb roOSNSDOISANOIRNRSDD\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String test3String \u003d \"#UIN(#NEFUR(#*H#(*R(BN(FIKNFIFNEWIUEWBOFBWFOEWUF\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ArrayList\u003cString\u003e testCasesString \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCasesString.add(test1String);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCasesString.add(test2String);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCasesString.add(test3String);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ToDo test1 \u003d new ToDo(test1String);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ToDo test2 \u003d new ToDo(test2String);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ToDo test3 \u003d new ToDo(test3String);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        test3.taskComplete();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ArrayList\u003cToDo\u003e testCases \u003d new ArrayList\u003cToDo\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCases.add(test1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCases.add(test2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCases.add(test3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (int i \u003d 0; i \u003c testCases.size(); i ++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            ToDo testCase \u003d testCases.get(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String description \u003d  testCasesString.get(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String expected \u003d \"T | \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (i \u003d\u003d 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                expected +\u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                expected +\u003d \"0\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            expected +\u003d \" | \" + description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            assertEquals(expected, testCase.toSaveFormat());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String test1String \u003d \"asfiuab9r3h83he9fudfeuifenifbewfiewbreirubewri\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String test2String \u003d \"for3nrSOFBN#IR(FNOIFNjfb roOSNSDOISANOIRNRSDD\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        String test3String \u003d \"#UIN(#NEFUR(#*H#(*R(BN(FIKNFIFNEWIUEWBOFBWFOEWUF\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ArrayList\u003cString\u003e testCasesString \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCasesString.add(test1String);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCasesString.add(test2String);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCasesString.add(test3String);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ToDo test1 \u003d new ToDo(test1String);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ToDo test2 \u003d new ToDo(test2String);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ToDo test3 \u003d new ToDo(test3String);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        test3.taskComplete();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        ArrayList\u003cToDo\u003e testCases \u003d new ArrayList\u003cToDo\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCases.add(test1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCases.add(test2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        testCases.add(test3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        for (int i \u003d 0; i \u003c testCases.size(); i ++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            ToDo testCase \u003d testCases.get(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String description \u003d testCasesString.get(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            String expected \u003d \"[T]\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            if (i \u003d\u003d 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                expected +\u003d \"Complete \" + testCasesString.get(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "                expected +\u003d \"Incomplete \" + testCasesString.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            assertEquals(expected, testCase.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielseow": 72
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "### If you are not using Gradl````e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 109,
      "gabrielseow": 1
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `duke.view.Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `duke.view.Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Now, we can go back to the `duke.view.Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 240,
      "gabrielseow": 3
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "   Why does `duke.view.Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "   The `duke.view.Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Let\u0027s create a new `duke.view.Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "**duke.view.Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "public class duke.view.Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.view.Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gabrielseow"
        },
        "content": "Application.launch(duke.view.Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 287,
      "gabrielseow": 7
    }
  }
]
