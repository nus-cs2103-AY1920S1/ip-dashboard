[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\tid \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    mainClassName \u003d \"duke.main.Launcher\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 12,
      "-": 19
    }
  },
  {
    "path": "data/savedList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "todo abc"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "true"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "HIGH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deadline hw      /by 29/08/2019 0000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "true"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "MEDIUM"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "event an_event      /at 02/03/1997 1922"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "LOW"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 9
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 11
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public abstract String execute(TaskList tasks);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    protected String createTotalNumOfTaskMsg(TaskList tasks) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return \"Now you have \" + tasks.getSizeOfTaskList() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 11
    }
  },
  {
    "path": "src/main/java/duke/command/CommandAddTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public abstract class CommandAddTask extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public abstract String execute(TaskList tasks);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    protected String createTotalNumOfTaskMsg(TaskList tasks) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return \"Now you have \" + tasks.getSizeOfTaskList() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    protected String createSuccessMsg(Task t) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(t.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 19
    }
  },
  {
    "path": "src/main/java/duke/command/CommandWithIndex.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.exception.InvalidTaskIndexDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public abstract class CommandWithIndex extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public CommandWithIndex(int index) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    protected void checkIfIndexIsOutOfBounds(TaskList tasks) throws InvalidTaskIndexDukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        int lastIndex \u003d tasks.getSizeOfTaskList() - 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (this.index \u003e lastIndex || this.index \u003c 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new InvalidTaskIndexDukeException(\"Index is out of bounds\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class DeadlineCommand extends CommandAddTask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String dsc;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Date deadlineBy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public DeadlineCommand(String dsc, Date deadlineBy) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.dsc \u003d dsc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.deadlineBy \u003d deadlineBy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Task addedTask \u003d new Deadline(this.dsc, this.deadlineBy);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        tasks.addTask(addedTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return createSuccessMsg(addedTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 24
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.exception.InvalidTaskIndexDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class DeleteCommand extends CommandWithIndex {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            checkIfIndexIsOutOfBounds(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            String taskInfo \u003d tasks.getTaskDsc(this.index);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            tasks.deleteTask(this.index);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return createSuccessfulDeleteMsg(tasks, taskInfo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (InvalidTaskIndexDukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            Command c \u003d new InvalidCommand(\"Index is out of bounds\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return c.execute(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String createSuccessfulDeleteMsg(TaskList tasks, String taskInfo) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder returnString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        returnString.append(\"Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        returnString.append(taskInfo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        returnString.append(\"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        returnString.append(createTotalNumOfTaskMsg(tasks));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return returnString.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 34
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.exception.InvalidTaskIndexDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class DoneCommand extends CommandWithIndex {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            checkIfIndexIsOutOfBounds(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            tasks.checkTask(this.index);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return createSuccessfulDoneMsg(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (InvalidTaskIndexDukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            Command c \u003d new InvalidCommand(\"Index is out of bounds\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return c.execute(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String createSuccessfulDoneMsg(TaskList tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done: \\n\" + tasks.getTaskDsc(this.index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 26
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class EventCommand extends CommandAddTask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String dsc;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Date eventAt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EventCommand(String dsc, Date eventAt) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.dsc \u003d dsc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.eventAt \u003d eventAt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Task addedTask \u003d new Event(this.dsc, this.eventAt);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        tasks.addTask(addedTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return createSuccessMsg(addedTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 24
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String searchKey;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public FindCommand(String searchKey) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.searchKey \u003d searchKey;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        ArrayList\u003cString\u003e matchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        addMatchingTasks(matchList, tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return createStringOfMatchedTasks(matchList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private void addMatchingTasks(ArrayList\u003cString\u003e matchList, TaskList tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        int totalNumOfTasks \u003d tasks.getSizeOfTaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        for (int i \u003d 0; i \u003c totalNumOfTasks; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            String taskInfo \u003d tasks.getTaskDsc(i);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            addToListIfFoundMatch(taskInfo, matchList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private void addToListIfFoundMatch(String taskInfo, ArrayList\u003cString\u003e matchList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (taskInfo.contains(this.searchKey)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            matchList.add(taskInfo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String createStringOfMatchedTasks(ArrayList\u003cString\u003e matchList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        int lenOfMatchedList \u003d matchList.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(\"Here are the matching tasks in your list\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d lenOfMatchedList; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            sb.append(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            sb.append(\". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            sb.append(matchList.get(i - 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 46
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class InvalidCommand extends Command implements UnloadableCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String reasonForInvalid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public InvalidCommand(String reasonForInvalid) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.reasonForInvalid \u003d reasonForInvalid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.reasonForInvalid;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 15
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        int totalNumOfTask \u003d tasks.getSizeOfTaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return createListMsg(tasks, totalNumOfTask);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String createListMsg(TaskList tasks, int totalNumOfTask) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder returnString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        returnString.append(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d totalNumOfTask; i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            returnString.append(\"\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            returnString.append(i);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            returnString.append(\". \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            returnString.append(tasks.getFullTaskInfo(i - 1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return returnString.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 24
    }
  },
  {
    "path": "src/main/java/duke/command/PriorityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.exception.InvalidTaskIndexDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.PriorityLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class PriorityCommand extends CommandWithIndex {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private PriorityLevel priority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public PriorityCommand(int index, PriorityLevel priority) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            checkIfIndexIsOutOfBounds(tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            tasks.setPriorityOfTask(this.index, this.priority);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return createSuccessfulPriorityChangeMsg();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (InvalidTaskIndexDukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            Command c \u003d new InvalidCommand(\"Index is out of bounds\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return c.execute(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String createSuccessfulPriorityChangeMsg() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return \"Nice! I\u0027ve changed the priority of this task to \" + this.priority.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 29
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class TodoCommand extends CommandAddTask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String dsc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public TodoCommand(String dsc) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.dsc \u003d dsc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Task addedTask \u003d new TodoTask(this.dsc);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        tasks.addTask(addedTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return createSuccessMsg(addedTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 19
    }
  },
  {
    "path": "src/main/java/duke/command/UnloadableCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public interface UnloadableCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * A general duke exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDeadlineDscDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception no description is given to a deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class EmptyDeadlineDscDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EmptyDeadlineDscDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDscDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception when a to-do task does not have a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class EmptyDscDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EmptyDscDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyEventDscDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception when an event does not have a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class EmptyEventDscDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EmptyEventDscDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidPriorityDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception when no task index is given to Duke when checking/deleting tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class InvalidPriorityDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public InvalidPriorityDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskIndexDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception when an invalid task index is given to Duke when checking/deleting tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class InvalidTaskIndexDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public InvalidTaskIndexDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/NoDateDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception when no date is provided in a deadline/event task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class NoDateDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public NoDateDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/NoPriorityDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception when no task index is given to Duke when checking/deleting tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class NoPriorityDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public NoPriorityDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/NoTaskIndexDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception when no task index is given to Duke when checking/deleting tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class NoTaskIndexDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public NoTaskIndexDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/SaveFileWrongFormatDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception when the save file for duke contains information that cannot be parsed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class SaveFileWrongFormatDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public SaveFileWrongFormatDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCmdDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * An exception when an unknown command is given to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class UnknownCmdDukeException  extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public UnknownCmdDukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10
    }
  },
  {
    "path": "src/main/java/duke/main/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        displayPicture.setClip(new Circle(50.0,50.0,50.0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        text \u003d l;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        text.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        text.setPadding(new Insets(10.0,20.0,10.0,20.0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        text.setBackground("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//                new Background("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//                        new BackgroundFill("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//                                Color.LIGHTGREY,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//                                CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//                                Insets.EMPTY"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//                        )"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//                )"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        text.setMinHeight(100.0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        text.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        displayPicture.setClip(new Circle(50.0,50.0,50.0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        this.setPadding(new Insets(20,20,20,20));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static DialogBox getUserDialog(String l, Image iv) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static DialogBox getDukeDialog(String l, Image iv) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 85
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.exception.SaveFileWrongFormatDukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Duke is an application that keeps track of your"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * to-do tasks, deadlines and events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Constructor for duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        storage \u003d new Storage(\"data/savedList.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            tasks \u003d storage.load(parser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (FileNotFoundException | SaveFileWrongFormatDukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * This is where the Duke application starts to run."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Command commandFromInput \u003d parser.parse(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String returnString \u003d commandFromInput.execute(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        storage.saveDuke(tasks.saveInfo());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 41,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/main/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 12
    }
  },
  {
    "path": "src/main/java/duke/main/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//@Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            scene.getStylesheets().add(\"/css/DialogBoxStyle.css\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 33
    }
  },
  {
    "path": "src/main/java/duke/main/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    public void start(Stage stage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        Scene scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        stage.setScene(scene);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        // formatting for window"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        stage.setResizable(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        scrollPane.setPrefSize(385,535);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        scrollPane.setVbarPolicy((ScrollPane.ScrollBarPolicy.ALWAYS));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        // functionality for the button"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "////            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "////            userInput.clear();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//            handleUserInput();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "////            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "////            userInput.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//            handleUserInput();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        stage.show();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    }"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 122
    }
  },
  {
    "path": "src/main/java/duke/main/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.PriorityLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static SimpleDateFormat inputDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static SimpleDateFormat outputDateFormat \u003d new SimpleDateFormat(\"dd MMMMM yyyy hh\u0027:\u0027mma\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Parses a user input and performs action based on the input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param input the input from user to duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return a boolean to tell whether Duke should continue waiting for more commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Command parse(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String[] splitInput \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Command parsedInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String task \u003d splitInput[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        switch (task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForBye();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForDelete(task, input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForDone(task, input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForFind(task, input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForTodo(task, input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForDeadline(task, input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForEvent(task, input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForPriority(task, input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedInput \u003d createParsedInputForUnknownTask();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return parsedInput;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForBye() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForDelete(String task, String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String index \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            checkIfAnythingAfterCommand(task, input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            index \u003d input.substring(task.length() + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new DoneCommand(tryToParseIndex(index));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (NoTaskIndexDukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(\"Index not provided\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(\"Index given is not a number\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForDone(String task, String input) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String index \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            checkIfAnythingAfterCommand(task, input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            index \u003d input.substring(task.length() + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            int i \u003d tryToParseIndex(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new DoneCommand(i - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (NoTaskIndexDukeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(\"Index not provided\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(\"Index given is not a number\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private void checkIfAnythingAfterCommand(String task, String input) throws NoTaskIndexDukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (input.length() \u003d\u003d task.length()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new NoTaskIndexDukeException(\"index not provided\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private int tryToParseIndex(String index) throws NumberFormatException{"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return Integer.parseInt(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForTodo(String task, String input) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            description \u003d getDscFromRestOfInput(input, task.length());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new TodoCommand(description);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (EmptyDscDukeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            description \u003d \"Description is empty\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(description);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForFind(String task, String input) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String searchKey \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            searchKey \u003d getDscFromRestOfInput(input, task.length());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new FindCommand(searchKey);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (EmptyDscDukeException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            searchKey \u003d \"No keyword to search for\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(searchKey);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForEvent(String task, String input) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String byTime;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Date d;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        int indexOfDivider;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            indexOfDivider \u003d findDividerIndex(input);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            checkIfDateAfterKeyword(\"at\", input, indexOfDivider);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            byTime \u003d input.substring(indexOfDivider + 4);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            description \u003d getDscForEventAndDeadline(input, task.length(), indexOfDivider);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            d \u003d Parser.inputDateFormat.parse(byTime);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (NoDateDukeException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new InvalidCommand(\"Divider(\u0027/\u0027) for date could not be found\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new InvalidCommand(\"\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (EmptyDscDukeException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new InvalidCommand(\"Description is empty\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new InvalidCommand(\"Date is in incorrect format\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        c \u003d new EventCommand(description, d);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private void checkIfDateAfterKeyword(String keyword, String input, int index) throws NoDateDukeException{"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        int dateStartIndex \u003d index + keyword.length() + 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (dateStartIndex \u003e (input.length() - 1)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new NoDateDukeException(\"Index is greater than the input last index\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForDeadline(String task, String input) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String byTime;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Date d;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        int indexOfDivider;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            indexOfDivider \u003d findDividerIndex(input);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            checkIfDateAfterKeyword(\"by\", input, indexOfDivider);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            byTime \u003d input.substring(indexOfDivider + 4);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            description \u003d getDscForEventAndDeadline(input, task.length(), indexOfDivider);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            d \u003d Parser.inputDateFormat.parse(byTime);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (NoDateDukeException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new InvalidCommand(\"Divider(\u0027/\u0027) for date could not be found\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (EmptyDscDukeException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new InvalidCommand(\"Description is empty\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new InvalidCommand(\"Date is in incorrect format\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        c \u003d new DeadlineCommand(description, d);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private int findDividerIndex(String input) throws NoDateDukeException{"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        int indexOfDivider \u003d input.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (indexOfDivider \u003d\u003d -1) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new NoDateDukeException(\"Cannot find \u0027/\u0027 divider\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return indexOfDivider;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String getDscFromRestOfInput(String input, int taskLength) throws EmptyDscDukeException{"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (input.length() \u003d\u003d taskLength) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new EmptyDscDukeException(\"Description not provided\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return input.substring(taskLength + 1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private String getDscForEventAndDeadline(String input, int taskLength, int indexOfDivider) throws EmptyDscDukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String description \u003d input.substring(taskLength + 1, indexOfDivider);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        checkForEmptyDsc(description);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private void checkForEmptyDsc(String dsc) throws EmptyDscDukeException{"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (dsc.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new EmptyDscDukeException(\"Empty description\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForPriority(String task, String input) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            checkIfAnythingAfterCommand(task, input);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            String indexInString \u003d input.substring(9, 10);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            int index \u003d tryToParseIndex(indexInString) - 1;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            checkIfPriorityAfterIndex(11, input);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            String priorityInString \u003d input.substring(11).toUpperCase();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            PriorityLevel p \u003d parsePriorityLevel(priorityInString);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new PriorityCommand(index, p);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (NoTaskIndexDukeException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(\"Index not provided\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(\"Index given is not a number\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (NoPriorityDukeException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(\"No priority after index\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (InvalidPriorityDukeException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            c \u003d new InvalidCommand(\"Invalid priority\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private PriorityLevel parsePriorityLevel(String s) throws InvalidPriorityDukeException{"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        for (PriorityLevel p : PriorityLevel.values()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (s.equals(p.name())) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        throw new InvalidPriorityDukeException(\"Invalid priority\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private void checkIfPriorityAfterIndex(int indexToStartFrom, String input) throws NoPriorityDukeException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (input.length() \u003c indexToStartFrom) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new NoPriorityDukeException(\"No priority after index\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Command createParsedInputForUnknownTask() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new InvalidCommand(\"Unknown command\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 259
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.exception.SaveFileWrongFormatDukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.command.UnloadableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.main.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.PriorityLevel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Storage is where files are accessed and written for Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        file \u003d new File(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Saves a string to the save-file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param stringToSave  string that will be saved to a file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void saveDuke(String stringToSave) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            fw.write(stringToSave);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            System.out.println(\"Something went wrong! \" + e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Loads the save-file to Duke."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return TaskList that was saved in the save-file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @throws FileNotFoundException If there is an error in the file path, or the file does not exists."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @throws SaveFileWrongFormatDukeException If there is an error in the save file that affects loading."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public TaskList load(Parser parser) throws FileNotFoundException, SaveFileWrongFormatDukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Scanner fileSc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        int currentTaskIndex \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        while (fileSc.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            line \u003d fileSc.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            Command commandToLoadTask \u003d parser.parse(line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (commandToLoadTask instanceof UnloadableCommand) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                throw new SaveFileWrongFormatDukeException(\"Save file contains a line that could not be loaded\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            commandToLoadTask.execute(tl);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (Boolean.parseBoolean(fileSc.nextLine())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                tl.checkTask(currentTaskIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            String priorityInString \u003d fileSc.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            switch (priorityInString) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            case \"HIGH\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                tl.setPriorityOfTask(currentTaskIndex, PriorityLevel.HIGH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            case \"MEDIUM\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                tl.setPriorityOfTask(currentTaskIndex, PriorityLevel.MEDIUM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            case \"LOW\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                tl.setPriorityOfTask(currentTaskIndex, PriorityLevel.LOW);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                throw new SaveFileWrongFormatDukeException(\"Save file contains an invalid priority level\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            currentTaskIndex +\u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return tl;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 83
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.main.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Deadline is a task that has to be completed by a certain date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Date deadlineBy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Deadline(String taskDetails, Date deadlineBy) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(taskDetails);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.deadlineBy \u003d deadlineBy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns a string of a task that can contain"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * its description, time and completion status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return string that contains information about a task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String saveInfo() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return \"deadline\" + \" \" + taskDetails + \" /by \" + Parser.inputDateFormat.format(deadlineBy)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                + System.getProperty(\"line.separator\") + completed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                + System.getProperty(\"line.separator\") + priority.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (this.completed) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            sb.append(\"[D][\\u2713] \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            sb.append(\"[D][\\u2717] \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(taskDetails);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(\" (\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(Parser.outputDateFormat.format(deadlineBy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(\")\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(priority.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 46
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import duke.main.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Event is a task that happens at certain date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Date eventAt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Event(String taskDetails, Date eventAt) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(taskDetails);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.eventAt \u003d eventAt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns a string of a task that can contain"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * its description, time and completion status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return string that contains information about a task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    String saveInfo() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return \"event\" + \" \" + taskDetails + \" /at \" + Parser.inputDateFormat.format(eventAt)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                + System.getProperty(\"line.separator\") + completed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                + System.getProperty(\"line.separator\") + priority.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (this.completed) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            sb.append(\"[E][\\u2713] \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            sb.append(\"[E][\\u2717] \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(taskDetails);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(\" (\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(Parser.outputDateFormat.format(eventAt));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(\")\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(priority.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 47
    }
  },
  {
    "path": "src/main/java/duke/task/PriorityLevel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public enum PriorityLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    HIGH, MEDIUM, LOW"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 5
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Task is an abstract class from which other tasks are built upon."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Tasks represents the tasks that a person has when using Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public abstract class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    String taskDetails;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    boolean completed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    PriorityLevel priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    Task(String taskDetails) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.taskDetails \u003d taskDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.priority \u003d PriorityLevel.LOW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Marks a task as completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void taskDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.completed \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Set the priority level of a task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void setPriority(PriorityLevel p) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.priority \u003d p;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Get the priority level of a task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public PriorityLevel getPriority() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns a string of a task that can contain"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * its description, time and completion status."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return string that contains information about a task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    abstract String saveInfo();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns the completion status of a task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return task completion status."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.completed;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * A getter for task details."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return the task details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String getTaskDetails() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.taskDetails;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (completed) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return \"[\\u2713] \" + this.taskDetails + \" \" + priority.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return \"[\\u2717] \" + this.taskDetails + \" \" + priority.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public int compareTo(Task anotherTask) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        PriorityLevel otherPriority \u003d anotherTask.getPriority();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        switch (this.priority) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (otherPriority \u003d\u003d PriorityLevel.HIGH) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (otherPriority \u003d\u003d PriorityLevel.MEDIUM ) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            } else if (otherPriority \u003d\u003d PriorityLevel.LOW){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (otherPriority \u003d\u003d PriorityLevel.LOW ) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 102
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * TaskList contains an array-list of tasks. It keeps tracks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * of all the tasks and is the gateway for all modifications"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * between Duke and the tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Collections.sort(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Collections.sort(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public int getSizeOfTaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Marks a task as completed by changing its"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * completed field to true."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param taskIndex the index of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void checkTask(int taskIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Task t \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        t.taskDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Marks a task as completed by changing its"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * completed field to true."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param taskIndex the index of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public void setPriorityOfTask(int taskIndex, PriorityLevel priority) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Task t \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        t.setPriority(priority);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Collections.sort(taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String getTaskDsc(int taskIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Task t \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return t.getTaskDetails();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String getFullTaskInfo(int taskIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Task t \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return t.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns a string of information of all tasks in the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return a string containing information of ALL tasks in the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String saveInfo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder info \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        boolean isFirstIteration \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (isFirstIteration) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                info.append(t.saveInfo());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                isFirstIteration \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                info.append(System.getProperty(\"line.separator\")).append(t.saveInfo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return info.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 83
    }
  },
  {
    "path": "src/main/java/duke/task/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * To-do task is a task that is supposed to be completed in the future."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class TodoTask  extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public TodoTask(String taskDetails) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        super(taskDetails);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns a string of a task that can contain"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * its description, time and completion status."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return string that contains information about a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    String saveInfo() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return \"todo\" + \" \" + taskDetails"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                + System.getProperty(\"line.separator\") + completed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                + System.getProperty(\"line.separator\") + priority.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (this.completed) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return \"[T][\\u2713] \" + taskDetails + \" \" + priority.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return \"[T][\\u2717] \" + taskDetails + \" \" + priority.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" styleClass\u003d\"dialog-text\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            \u003cInsets bottom\u003d\"200.0\" left\u003d\"20.0\" right\u003d\"200.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.main.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 23
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//import duke.task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//class DukeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    void deadlineSaveInfoTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        c.set(2019,8,29,18,00);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        Deadline testDeadline \u003d new Deadline(\"homework\", c.getTime());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        assertEquals(\"deadline homework /by 29/09/2019 1800\" + System.getProperty(\"line.separator\") + \"false\", testDeadline.saveInfo());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    void todoTaskDoneTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//            tl.parseInput(\"todo task1\", true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//            tl.parseInput(\"done 1\", true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//            System.out.println(\"error in parsing input.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        assertTrue(tl.getTaskList().get(0).isCompleted());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    void eventTaskDoneTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//            tl.parseInput(\"todo task1\", true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//            tl.parseInput(\"event abc123 /at 29/09/2019 1900\", true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//            tl.parseInput(\"done 2\", true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//            System.out.println(\"error in parsing input.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        assertFalse(tl.getTaskList().get(0).isCompleted());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//        assertTrue(tl.getTaskList().get(1).isCompleted());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 47
    }
  }
]
