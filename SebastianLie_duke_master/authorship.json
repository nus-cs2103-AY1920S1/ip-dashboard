[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Deadline(String info, String type, String by) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original constructor"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String deadline do by date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(info,type,by);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original print task from superclass"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string containing info and status of task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return super.printTask() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 24
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " TO DO:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " ADD EXCEPTION SUPPORT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // define arraylist to store tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static final String FILEPATH \u003d \"C:\\\\Users\\\\Seb\\\\duke\\\\storage\\\\duke.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private WriteFile data \u003d new WriteFile(FILEPATH,false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints Intro message in between 2 solid lines"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // FileReader reads text files in the default encoding."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            FileReader fileReader \u003d new FileReader(FILEPATH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // always need to wrap file reader in buffer reader"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            while((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                store(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // close file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch(FileNotFoundException ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\"I can\u0027t see\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch(IOException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\"That sign will stop me, cos I can\u0027t read!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Hello, I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void store(String task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // converts tasks in string from storage to taskarr"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        //System.out.println(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (task.equals(\"\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Scanner stringSc \u003d new Scanner(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String type \u003d stringSc.next();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        stringSc.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int isDone \u003d stringSc.nextInt();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        stringSc.next();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String mainInfo \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String info \u003d stringSc.next();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        while (!info.equals(\"|\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            mainInfo \u003d mainInfo + info;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            info \u003d stringSc.next();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // take up empty input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String by \u003d stringSc.next();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Deadline newTask \u003d new Deadline(mainInfo,\"D\",by);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            taskArr.add(newTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String by \u003d stringSc.next();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Event newTask \u003d new Event(mainInfo,\"E\",by);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            taskArr.add(newTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            ToDo newTask \u003d new ToDo(mainInfo, \"T\",\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            taskArr.add(newTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void save() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        data.setAppend(true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (Task t: taskArr) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String mainTxt \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String type \u003d t.getType();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String status \u003d (t.getDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String info \u003d t.getTaskInfo();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String by \u003d t.getBy();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (type \u003d\u003d \"T\") {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                mainTxt \u003d mainTxt + type + \" | \" + status + \" | \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        + info + \" | \" + by + \" | \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                mainTxt \u003d mainTxt + type + \" | \" + status + \" | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        + info + \" | \" + by + \" | \";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            data.writeToFile(mainTxt);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void printLine() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  helper function, prints formatted solid line"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String list() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  returns all tasks in readable, formatted string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return string of all tasks with new line and spaces as required"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String s \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (int i \u003d 0; i \u003c taskArr.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // printInt to put number for printing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            int printInt \u003d i + 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Task currTask \u003d taskArr.get(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            s +\u003d currTask.printTask() + \"\\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void todo(String taskInfo) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // TODO add DukeException for this"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  creates new To Do, add to tasklist"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation message"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and prints formatted to do string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then total num of current tasks"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String that describes task"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if taskInfo is empty"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (taskInfo.equals(\"\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // error handling"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\" ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ToDo newToDo \u003d new ToDo(taskInfo,\"T\",\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.add(newToDo);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.print(\" \" + newToDo.printTask() + \"\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Now you have \" + taskArr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void deadline(String taskInfo) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // TODO add DukeException for this"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  creates new Deadline, add to tasklist"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation message"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and prints formatted deadline string"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then total num of current tasks"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @param String that describes task"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if taskInfo is empty"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int sep \u003d taskInfo.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // use sep to split string"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String actualTask \u003d taskInfo.substring(0,sep);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        sep +\u003d 4; // put sep at space after /by"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String time \u003d taskInfo.substring(sep);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Deadline newTing \u003d new Deadline(actualTask,\"D\",time);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.add(newTing);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.print(\" \" + newTing.printTask() + \"\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Now you have \" + taskArr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void event(String taskInfo) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // TODO add DukeException for this"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  creates new event, add to tasklist"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation message"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and prints formatted event string"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then total num of current tasks"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String that describes task"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if taskInfo is empty"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int sep \u003d taskInfo.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // use sep to split string"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String actualTask \u003d taskInfo.substring(0,sep);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        sep +\u003d 4; // put sep at space after /by"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String time \u003d taskInfo.substring(sep);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Event newTing \u003d new Event(actualTask,\"E\",time);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.add(newTing);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.print(\" \" + newTing.printTask() + \"\\n\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Now you have \" + taskArr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void done(int t) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  helper function, marks tasks as done"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints confirmation,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints the done task in formatted string"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  (formatted string from task itself)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Task doneTask \u003d taskArr.get(t-1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        doneTask.markDone();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.print(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(doneTask.printTask());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void delete(int taskNum) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  helper function, deletes task"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  based on number provided"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation and formatted task"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  as per specified within task printTask method"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints number of remaining tasks"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Task doneTask \u003d taskArr.get(taskNum-1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.print(\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\" \" + doneTask.printTask());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.remove(taskNum-1);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Now you have \" + taskArr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // TODO add DukeException for this"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  main run method"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  scans input and turns it"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  into task: event, deadline or to do"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  every print statement wrapped with"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  2 solid lines"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String that describes task"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if command unknown"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String input \u003d sc.next();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                // list all tasks"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                System.out.print(list());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"todo\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                // basic"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String info \u003d sc.nextLine();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                todo(info);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String info \u003d sc.nextLine();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                deadline(info);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"event\")) {   // list command"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String info \u003d sc.nextLine();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                event(info);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"done\")) {   // list command"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                int taskNum \u003d sc.nextInt();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                done(taskNum);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (input.equals(\"delete\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                int taskNum \u003d sc.nextInt();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                delete(taskNum);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                // handle all other cases"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            input \u003d sc.next();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Duke d \u003d new Duke();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        d.run();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 276,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // TO DO fill exceptions and handle all errors"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 10
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Event(String info, String type, String by) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original constructor"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String by: when event actually is"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(info,type,by);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original print task from superclass"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string containing info and status of task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  including when event is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return super.printTask() + \" (at: \" + by + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 22
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // all class variables private"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected String taskInfo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Task(String info, String type,String by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  constructor, saves info of task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string containing info and status of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.taskInfo \u003d info;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.taskType \u003d type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // getters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getTaskInfo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  getter of info of task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return String task info"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  getter of status of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return tick or cross depending on isDone"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // taken from partial soln tq prof"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  getter of task type"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return tick or cross depending on isDone"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints task in formatted string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String s \u003d \"[\" + getType() + \"]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        s +\u003d \"[\" + getStatus() + \"] \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        s +\u003d getTaskInfo();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // setters"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  setter to mark task is done"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   changes output of getStatus"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params none"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @returns none"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 73
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // task with nothing attached, so no frills, everything can be simply inherited"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ToDo(String info, String type, String by) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original constructor"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(info,type,by);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 13
    }
  },
  {
    "path": "src/main/java/WriteFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class WriteFile {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String  file_path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private boolean append_to_file \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public WriteFile(String file_path, boolean append_value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.file_path \u003d file_path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        append_to_file \u003d append_value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void writeToFile( String textLine ) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  Writes specified text to file in filepath specified upon construction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  Notes: The %s between double quotes means a string of characters of any length."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  The %n means a newline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  So we\u0027re telling the printf method to format a string of characters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and add a newline at the end"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String textLine contains text to write to file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            FileWriter write \u003d new FileWriter(file_path,append_to_file);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            BufferedWriter write_line \u003d new BufferedWriter(write);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            write_line.write(textLine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            write_line.newLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            write_line.close();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\"No can do son.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAppend(boolean append) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        append_to_file \u003d append;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 39
    }
  },
  {
    "path": "storage/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "D | 0 |  binch  | dead | "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "E | 0 |  why  | yeet | "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "T | 0 |  fkoff |  | "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "T | 0 |  yeet |  | "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "D | 0 | binch | dead | "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "E | 0 | why | yeet | "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "T | 0 | fkoff |  | "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "T | 0 | yeet |  | "
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 10
    }
  }
]
