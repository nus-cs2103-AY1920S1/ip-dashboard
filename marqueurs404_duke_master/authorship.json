[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Deadline Class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Represents the deadline-type task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * @author Marcus Ong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    protected boolean isAllDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        super(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.isAllDay \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Deadline(String description, LocalDateTime by, boolean isAllDay) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        super(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.isAllDay \u003d isAllDay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (isAllDay) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return String.format(\"[%s]%s (by: %s)\", TaskType.DEADLINE.getTag(), super.toString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    by.toLocalDate().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return String.format(\"[%s]%s (by: %s)\", TaskType.DEADLINE.getTag(), super.toString(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    by.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 39
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Duke Chat Class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * A Personal Assistant Chatbot that helps to keep track of various things."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * @author Marcus Ong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static final Path DATA_FILE_PATH \u003d Paths.get(System.getProperty(\"user.dir\") + \"/data/duke.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            loadTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            chat();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (DukeIOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            reply(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /** Handles user chat interaction */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static void chat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        // Create default hi/bye strings"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String logo \u003d \" ____        _        \\n\\t\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\\t\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\\t\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\\t\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\\t\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String greeting \u003d logo + \"G\u0027day mate! I\u0027m Duke.\\n\\tWhatcha need help with?\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String bye \u003d \"Bye mate. Catch you later!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        String command \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        reply(greeting); //say greetings"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        // Begin chat interaction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                if (command.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    listTasks();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if (command.toLowerCase().startsWith(\"done\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    doneTask(command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if (command.toLowerCase().startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    addTodo(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if (command.toLowerCase().startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    addDeadline(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if (command.toLowerCase().startsWith(\"event\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    addEvent(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if (command.toLowerCase().startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    deleteTask(command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if (command.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    reply(bye); //say goodbye"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    throw new UnknownCommandException(\"OOPS!!! Sorry mate, I don\u0027t geddit.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                saveTasks(); // gracefully save tasks after every command, invalid or not."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                reply(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } while (!command.equalsIgnoreCase(\"bye\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /** Add a new to-do */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void addTodo(String command) throws EmptyFieldException, InvalidCommandFormatException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            //parse description from command string"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int commandLength \u003d \"todo \".length();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String description \u003d command.substring(commandLength).trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The description of a task cannot be empty mate.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // add task and reply user"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Task task \u003d new Todo(description);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            replyAddTask(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new InvalidCommandFormatException(\"OOPS!!! Please gimme a todo with the right format: \" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    \"\u0027todo [description]\u0027\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /** Add a new deadline */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void addDeadline(String command) throws EmptyFieldException, InvalidCommandFormatException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int byLength \u003d \"/by\".length();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int commandLength \u003d \"deadline \".length();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int byIndex \u003d command.indexOf(\"/by\"); // look for \u0027/by\u0027 keyword from command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // parse description from command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String description \u003d command.substring(commandLength, byIndex).trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The description of a deadline cannot be empty mate.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // parse by-datetime from command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String by \u003d command.substring(byIndex + byLength).trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (by.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The date of a deadline cannot be empty mate.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy[ HHmm]\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            TemporalAccessor parsedBy \u003d fmt.parseBest(by, LocalDateTime::from, LocalDate::from);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Task task \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // create task depending on given whether a by-time is given"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (parsedBy instanceof LocalDateTime) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                task \u003d new Deadline(description, (LocalDateTime) parsedBy);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            } else if (parsedBy instanceof LocalDate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                task \u003d new Deadline(description, ((LocalDate) parsedBy).atStartOfDay(), true );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // add task and reply user"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            replyAddTask(task);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new InvalidCommandFormatException(\"OOPS!!! Please gimme a deadline with the right format: \" +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    \"\u0027deadline [description] /by [datetime]\u0027\\n\\t\" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    \"datetime format: d/M/yyyy[ HHmm]\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /** Add a new event */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void addEvent(String command) throws EmptyFieldException, InvalidCommandFormatException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int atLength \u003d \"/at\".length();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int commandLength \u003d \"event \".length();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int atIndex \u003d command.indexOf(\"/at\"); // look for \u0027/at\u0027 keyword from command"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // parse description from command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String description \u003d command.substring(commandLength, atIndex).trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The description of an event cannot be empty mate.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // parse at-datetime from command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            String at \u003d command.substring(atIndex + atLength).trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (at.isEmpty()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The start \u0026 end dates of an event cannot be empty mate.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy[ HHmm]\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            DateTimeFormatter fmt2 \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy][ ][HHmm]\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Task task \u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int dashIndex \u003d at.indexOf(\"-\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (dashIndex !\u003d -1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                String atStart \u003d at.substring(0, dashIndex).trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                String atEnd \u003d at.substring(dashIndex + 1).trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                TemporalAccessor parsedStart \u003d fmt.parseBest(atStart, LocalDateTime::from, LocalDate::from);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                TemporalAccessor parsedEnd \u003d fmt2.parseBest(atEnd,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        LocalDateTime::from, LocalDate::from, LocalTime::from);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                if ((parsedStart instanceof LocalDateTime) \u0026\u0026 (parsedEnd instanceof LocalDateTime)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    task \u003d new Event(description, (LocalDateTime) parsedStart,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            (LocalDateTime) parsedEnd);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if ((parsedStart instanceof LocalDate) \u0026\u0026 ((parsedEnd instanceof LocalDate))) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    task \u003d new Event(description, ((LocalDate) parsedStart).atStartOfDay(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            ((LocalDate) parsedEnd).atStartOfDay(), true);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if ((parsedStart instanceof LocalDate) \u0026\u0026 (parsedEnd instanceof LocalTime)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    task \u003d new Event(description, ((LocalDate) parsedStart).atStartOfDay(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            ((LocalTime) parsedEnd).atDate((LocalDate) parsedStart), true);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    throw new InvalidCommandFormatException(\"OOPS!!! Please gimme an event with the right format: \" +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            \"\u0027event [description] /at [start datetime] - [end datetime]\u0027\\n\\t\" +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            \"datetime format: d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                TemporalAccessor parsedStart \u003d fmt.parseBest(at, LocalDateTime::from, LocalDate::from);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                if (parsedStart instanceof LocalDateTime) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    task \u003d new Event(description, (LocalDateTime) parsedStart);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if (parsedStart instanceof LocalDate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    task \u003d new Event(description, ((LocalDate) parsedStart).atStartOfDay(), true );"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // add task and reply user"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            replyAddTask(task);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new InvalidCommandFormatException(\"OOPS!!! Please gimme an event with the right format: \" +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    \"\u0027event [description] /at [start datetime] - [end datetime]\u0027\\n\\t\" +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    \"datetime format: d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Prints out reply message for adding a task to the user."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param task Task to print out reply for."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void replyAddTask(Task task) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        StringBuilder messageBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        messageBuilder.append(\"Got it mate. I\u0027ve added this task:\\n\\t\" + task + \"\\n\\t\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        messageBuilder.append(\"Now you have \" + tasks.size() + \" tasks in the list mate.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        reply(messageBuilder.toString());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /** Mark a task as done */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void doneTask(String command) throws InvalidIndexException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            StringBuilder messageBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(command.split(\" \")[1]);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Task task \u003d tasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            messageBuilder.append(\"Nice one mate! I\u0027ve marked this task as done:\\n\\t\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            messageBuilder.append(\"  \" + task);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            reply(messageBuilder.toString());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new InvalidIndexException(\"OOPS!!! I can\u0027t do that, please gimme a valid task ID mate.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /** Permanently delete a task from the list */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void deleteTask(String command) throws InvalidIndexException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            StringBuilder messageBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(command.split(\" \")[1]);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            Task task \u003d tasks.remove(taskIndex - 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            messageBuilder.append(\"Noted mate! I\u0027ve removed this task:\\n\\t\")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                .append(\"  \" + task + \"\\n\\t\")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                .append(\"Now you have \" + tasks.size() + \" tasks in the list mate.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            reply(messageBuilder.toString());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new InvalidIndexException(\"OOPS!!! I can\u0027t do that, please gimme a valid task ID mate.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /** Display list of tasks */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void listTasks() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        StringBuilder messageBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            messageBuilder.append(\"Here are the tasks in your list:\\n\\t\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                messageBuilder.append((i+1) + \". \" + tasks.get(i) + \"\\n\\t\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            messageBuilder.setLength(messageBuilder.length() - 2); // strip trailing \\n\\t"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            messageBuilder.append(\"No tasks in your list. Add some tasks and get to work mate!\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        reply(messageBuilder.toString());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /** Save tasks to hard disk */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void saveTasks() throws DukeIOException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (!Files.exists(DATA_FILE_PATH)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                Files.createFile(DATA_FILE_PATH);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(DATA_FILE_PATH);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            // write tasks into file"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                StringBuilder rowBuilder \u003d new StringBuilder("
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        String.format(\"%s|%s|%s\", task.type.getTag(), task.isDone ? \"1\" : \"0\", task.description));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    rowBuilder.append(String.format(\"|%s\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            ((Deadline) task).by.format(DateTimeFormatter.ISO_DATE_TIME)));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    rowBuilder.append(String.format(\"|%s\","
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            ((Deadline) task).isAllDay ? \"1\" : \"0\"));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    rowBuilder.append(String.format(\"|%s|%s\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            ((Event) task).startDateTime.format(DateTimeFormatter.ISO_DATE_TIME),"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            ((Event) task).endDateTime.format(DateTimeFormatter.ISO_DATE_TIME)));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    rowBuilder.append(String.format(\"|%s\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                            ((Event) task).isAllDay ? \"1\" : \"0\"));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                rowBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                sb.append(rowBuilder);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            writer.write(sb.toString());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new DukeIOException(\"OOPS!!! Error trying to save data to file.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /** Load tasks from hard disk */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private static void loadTasks() throws DukeIOException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            if (Files.exists(DATA_FILE_PATH)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                BufferedReader reader \u003d Files.newBufferedReader(DATA_FILE_PATH);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                String line \u003d null;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    String[] parts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    String type \u003d parts[0];"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    boolean isDone \u003d \"1\".equals(parts[1]);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    String description \u003d parts[2];"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    if (type.equalsIgnoreCase(TaskType.TODO.getTag())) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        Task task \u003d new Todo(description);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        task.setDone(isDone);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        tasks.add(task);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    } else if(type.equalsIgnoreCase(TaskType.DEADLINE.getTag())) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        LocalDateTime byDate \u003d LocalDateTime.parse(parts[3], DateTimeFormatter.ISO_DATE_TIME);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        boolean isAllDay \u003d \"1\".equals(parts[4]);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        Task task \u003d new Deadline(description, byDate, isAllDay);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        task.setDone(isDone);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        tasks.add(task);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    } else if (type.equalsIgnoreCase(TaskType.EVENT.getTag())) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        LocalDateTime startDate \u003d LocalDateTime.parse(parts[3], DateTimeFormatter.ISO_DATE_TIME);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        LocalDateTime endDate \u003d LocalDateTime.parse(parts[4], DateTimeFormatter.ISO_DATE_TIME);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        boolean isAllDay \u003d \"1\".equals(parts[5]);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        Task task \u003d new Event(description, startDate, endDate, isAllDay);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        task.setDone(isDone);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                        tasks.add(task);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                reader.close();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            throw new DukeIOException(\"OOPS!!! Error trying to load data from file.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Prints out reply message to the user."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @param message String containing reply message."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public static void reply(String message) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 355,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public DukeException() { super(); }"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public DukeException(String message) { super(message); }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public DukeException(String message, Throwable cause) { super(message, cause); }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public DukeException(Throwable cause) { super(cause); }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "class EmptyFieldException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public EmptyFieldException() { super(); }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public EmptyFieldException(String message) { super(message); }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public EmptyFieldException(String message, Throwable cause) { super(message, cause); }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public EmptyFieldException(Throwable cause) { super(cause); }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "class InvalidCommandFormatException extends DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public InvalidCommandFormatException() { super(); }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public InvalidCommandFormatException(String message) { super(message); }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public InvalidCommandFormatException(String message, Throwable cause) { super(message, cause); }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public InvalidCommandFormatException(Throwable cause) { super(cause); }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public InvalidIndexException() { super(); }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public InvalidIndexException(String message) { super(message); }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public InvalidIndexException(String message, Throwable cause) { super(message, cause); }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public InvalidIndexException(Throwable cause) { super(cause); }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public UnknownCommandException() { super(); }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public UnknownCommandException(String message) { super(message); }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public UnknownCommandException(String message, Throwable cause) { super(message, cause); }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public UnknownCommandException(Throwable cause) { super(cause); }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "class DukeIOException extends DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public DukeIOException() { super(); }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public DukeIOException(String message) { super(message); }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public DukeIOException(String message, Throwable cause) { super(message, cause); }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public DukeIOException(Throwable cause) { super(cause); }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 41
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Event Class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Represents the event-type task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * @author Marcus Ong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    protected LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    protected LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    protected boolean isAllDay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Event(String description, LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.endDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.isAllDay \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Event(String description, LocalDateTime startDateTime, boolean isAllDay) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.endDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.isAllDay \u003d isAllDay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Event(String description, LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.isAllDay \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Event(String description, LocalDateTime startDateTime, LocalDateTime endDateTime,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                 boolean isAllDay) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.isAllDay \u003d isAllDay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        if (isAllDay \u0026\u0026 startDateTime.toLocalDate().isEqual(endDateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return String.format(\"[%s]%s (at: %s)\", TaskType.EVENT.getTag(), super.toString(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    startDateTime.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (isAllDay){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return String.format(\"[%s]%s (at: %s - %s)\", TaskType.EVENT.getTag(), super.toString(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    startDateTime.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    endDateTime.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else if (startDateTime.toLocalDate().isEqual(endDateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return String.format(\"[%s]%s (at: %s)\", TaskType.EVENT.getTag(), super.toString(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    startDateTime.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "            return String.format(\"[%s]%s (at: %s - %s)\", TaskType.EVENT.getTag(), super.toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    startDateTime.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "                    endDateTime.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 65
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Task Class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Represents a single task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * @author Marcus Ong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    protected TaskType type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Task(String description, TaskType type) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String getDescription() { return description; }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setDescription(String description) { this.description \u003d description; }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public TaskType getType() { return type; }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setType(TaskType type) { this.type \u003d type; }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public boolean isDone() { return isDone; }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public void setDone(boolean isDone) { this.isDone \u003d isDone; }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * Get a status symbol for the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     * @return + for a done task or x for an undone task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return (isDone ? \"+\" : \"x\"); //return + or x symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 40
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    TODO (\"T\"),"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    EVENT (\"E\"),"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    DEADLINE (\"D\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    TaskType(String tag) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return getTag();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 21
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Todo Class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * Represents the todo-type task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " * @author Marcus Ong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        super(description, TaskType.TODO);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "        return String.format(\"[%s]%s\", TaskType.TODO.getTag(), super.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 18
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tG\u0027day mate! I\u0027m Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tWhatcha need help with?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tGot it mate. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t[T][x] borrow book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tNow you have 1 tasks in the list mate."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t1. [T][x] borrow book"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tGot it mate. I\u0027ve added this task:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t[D][x] return book (by: Sunday)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tNow you have 2 tasks in the list mate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tGot it mate. I\u0027ve added this task:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t[E][x] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tNow you have 3 tasks in the list mate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tNice one mate! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t  [T][+] borrow book"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t1. [T][+] borrow book"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t2. [D][x] return book (by: Sunday)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t3. [E][x] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tNoted mate! I\u0027ve removed this task:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t  [D][x] return book (by: Sunday)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tNow you have 2 tasks in the list mate."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tOOPS!!! Sorry mate, I don\u0027t geddit."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\tBye mate. Catch you later!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "\t____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 49
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marqueurs404"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "marqueurs404": 34
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 2,
      "-": 241
    }
  }
]
