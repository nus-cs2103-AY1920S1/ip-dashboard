[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "# SANA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "| Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "| [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "| [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "| JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "walnads": 6,
      "-": 33
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tid \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 22,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class contains all the custom classes (not related to UI) needed for application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static Parser parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Duke class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Initialises Storage, TaskList, and Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        taskList \u003d new TaskList(Duke.storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        parser \u003d new Parser(Duke.taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 18,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class that makes sense of user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Parser class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param taskList TaskList object containing all the methods for creating, getting, and retrieving all the tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Parses the user\u0027s input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param input User input to be parsed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return A command class corresponding to the input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws InvalidCommandException If the user input is incomplete (i.e. does not contain the task description or date)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Command parse(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int ws \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String command \u003d input.substring(0, ws \u003d\u003d -1 ? input.length() : ws);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String parameters \u003d input.substring(command.length()).trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new DoneCommand(parameters);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new TodoCommand(parameters);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new EventCommand(parameters);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new DeadlineCommand(parameters);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new FindCommand(parameters);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new DeleteCommand(parameters);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new InvalidCommandException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 56
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class that loads tasks from the file and saves tasks in the file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private FileWriter writer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Storage class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.filePath \u003d String.format(\"%s%s\", System.getProperty(\"user.dir\"), \"\\\\data\\\\duke.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Writes all the tasks in the current application to the data file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param tasks An array containing all the tasks in the application thus far."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws IOException If the file path is incorrect."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void update(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        StringBuilder text \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "            text.append(String.format(\"%s\\n\", t.printToTxtFile()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "        writer.write(text.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "            List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "                list.add(parse(line));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Task parse(String line) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String[] lineArr \u003d line.split(String.format(\" %s \", \"\\\\|\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "            if (lineArr[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "                Task todo \u003d new Todo(lineArr[2]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "                if (lineArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    todo.markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return todo;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "            } else if (lineArr[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "                Task deadline \u003d new Deadline(lineArr[2], lineArr[3]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "                if (lineArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    deadline.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return deadline;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "                Task event \u003d new Event(lineArr[2], lineArr[3]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "                if (lineArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    event.markAsDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "walnads"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 91
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class that contains the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Tasklist class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param storage Storage object containing all the methods for writing and retrieving from the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.tasks \u003d storage.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Updates the tasks list in the data file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void update() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "            storage.update(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Gets the number of tasks in the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The number of tasks in the task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public int getNoOfTasks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Iterates through all the tasks in the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates a String containing information about all the tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return String containing information about all the tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String view() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "            StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "            str.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "                str.append(String.format(\"%d. %s\\n\", (i + 1), tasks.get(i)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "            str.deleteCharAt(str.length() - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return str.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"You have no tasks in your list! Add one now! ;~)\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Adds a Task to the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param t The Task object to be added."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The chatbot\u0027s response in String format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String add(Task t) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks.\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": "                tasks.get(tasks.size() - 1), tasks.size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Deletes a Task from the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param indexes The index of the Task object to be deleted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The chatbot\u0027s response in String format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String delete(int[] indexes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Arrays.sort(indexes);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (indexes[indexes.length - 1] \u003e tasks.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"\u003e:( !!! Please specify an index within the range.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int reduce \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int index : indexes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "walnads"
        },
        "content": "            output.append(String.format(\"\\t%s\\n\", tasks.get(index - 1 - reduce)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "walnads"
        },
        "content": "            tasks.remove(index - 1 - reduce);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": "            reduce +\u003d 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "        output.append(String.format(\"Now you have %d tasks.\", tasks.size()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": "        output.deleteCharAt(output.length() - 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Finds a matching task given the String input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param input The matching String input."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The chatbot\u0027s response in String format."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String find(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "walnads"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "walnads"
        },
        "content": "        str.append(\"Here are the matching tasks:\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int num \u003d 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "walnads"
        },
        "content": "            if (t.getDescription().contains(input)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "walnads"
        },
        "content": "                str.append(String.format(\"%d. %s\\n\", num, t));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "walnads"
        },
        "content": "                num++;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "walnads"
        },
        "content": "        str.deleteCharAt(str.length() - 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Marks a Task in a task list as done."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param indexes The indexes of the Task object to be modified."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The chatbot\u0027s response in String format."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String markDone(int[] indexes) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "walnads"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Arrays.sort(indexes);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (indexes[indexes.length - 1] \u003e indexes.length) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"\u003e:( !!! Please specify an index within the range.\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int index : indexes) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "walnads"
        },
        "content": "            tasks.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "walnads"
        },
        "content": "            output.append(String.format(\"\\t%s\\n\", tasks.get(index - 1)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "walnads"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "walnads"
        },
        "content": "        output.deleteCharAt(output.length() - 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 150
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The base class for all commands in the chatbot application."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected String parameters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Default public constructor for Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Alternative public constructor for Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Command(String parameters) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.parameters \u003d parameters;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public abstract String executeCommand() throws MissingParameterException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving creating a Deadline task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for DeadlineCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. date and description)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public DeadlineCommand(String parameters) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Deadline command (i.e. creates the Deadline task object)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s response during/after creating the Deadline task object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters in the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String executeCommand() throws MissingParameterException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\u003e:( !!! The description and date of a\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    + \"deadline cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else if (!(parameters.contains(\"/by\"))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\u003e:( !!! The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "                String[] temp \u003d parameters.split(\" /by \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "                Task t \u003d new Deadline(temp[0], temp[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return Duke.taskList.add(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return \"\u003e:( !!! Your date is not in dd/MM/yyyy HHmm format (e.g. 2/12/2019 1800)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class that handles all the methods involving deleting a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for DeleteCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. the index of the task to be deleted)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public DeleteCommand(String parameters) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Delete command (i.e. deletes the task from the task list)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s response during/after deleting the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String executeCommand() throws MissingParameterException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\u003e:( !!! Please specify the index of the task to be deleted.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "            String[] paramArr \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            int[] intArr \u003d Arrays.stream(paramArr).mapToInt(x -\u003e Integer.parseInt(x)).toArray();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Duke.taskList.delete(intArr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"\u003e:( !!! Please enter integers only.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"\u003e:( !!! Please enter integers only.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving marking a task as Done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for DoneCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. index of task)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public DoneCommand(String parameters) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String executeCommand() throws MissingParameterException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\u003e:( !!! Please specify the index of the task to be\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    \"marked done.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "            String[] paramArr \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "            int[] intArr \u003d Arrays.stream(paramArr).mapToInt(x -\u003e Integer.parseInt(x)).toArray();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Duke.taskList.markDone(intArr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"\u003e:( !!! Please specify an index within the range.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"\u003e:( !!! Please enter integers only.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"\u003e:( !!! Please enter integers only.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 43
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving creating an Event task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for EventCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed for executing the command (i.e. description and date)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public EventCommand(String parameters) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Event command (i.e. creates the Event task object)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s response during/after creating the Event task object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters in the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String executeCommand() throws MissingParameterException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\u003e:( !!! The description and date of a event cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else if (!(parameters.contains(\"/at\"))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\u003e:( !!! The date of a event cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "                String[] temp \u003d parameters.split(\" /at \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "                Task t \u003d new Event(temp[0], temp[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return Duke.taskList.add(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return \"\u003e:( !!! Your date is not in dd/MM/yyyy HHmm format (e.g. 2/12/2019 1800)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles all the methods involving ending the chat session with Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for ExitCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Exit command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s goodbye message in String format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String executeCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return \"Bye!!! :~)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 23
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving finding a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for FindCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. the String that the user is searching for)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public FindCommand(String parameters) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Find command (i.e. finds the task containing the String the user is searching for)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The tasks containing the String the user is searching for."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters in the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String executeCommand() throws MissingParameterException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\u003e:( !!! Please provide a search query.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Duke.taskList.find(parameters);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 29
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving listing all the tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for ListCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the List command (i.e. lists all the tasks)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return All the tasks in String format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String executeCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return Duke.taskList.view();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 23
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving creating a Todo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for TodoCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. description)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public TodoCommand(String parameters) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Todo command (i.e. creates the Todo task object)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s response during/after creating the Todo task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters in the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String executeCommand() throws MissingParameterException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\u003e:( !!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Task t \u003d new Todo(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Duke.taskList.add(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 34
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The base class for other checked exceptions in the chatbot application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles errors to do with invalid commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for InvalidCommandException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingParameterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles errors to do with valid commands but incomplete parameters."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class MissingParameterException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for MissingParameterException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public MissingParameterException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 16
    }
  },
  {
    "path": "src/main/java/duke/gui/Client.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Client {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Duke app;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Gets Duke\u0027s response."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (app \u003d\u003d null) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "            app \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Duke.parser.parse(input).executeCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 24
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 62
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 12
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Client duke \u003d new Client();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "            stage.setTitle(\"SANA\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().displayStartMsg();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 32
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Client duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void setDuke(Client d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Displays the message when the application first starts up."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void displayStartMsg() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String text \u003d String.format(\"Hello! How can I help you today? :~) \\n%s\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "                duke.getResponse(\"list\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "                DialogBox.getDukeDialog(text, dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 62
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A representation of the deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Date byDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for the Deadline class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates an incomplete deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param by Date and time the task is due."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws ParseException If by is not of \"dd/MM/yyyy HHmm\" format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Deadline(String description, String by) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.byDate \u003d format.parse(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the deadline task to String format (for addition to the data file)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String printToTxtFile() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat date \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, date.format(byDate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the deadline task to String format (for printing to the UI)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat date \u003d new SimpleDateFormat(\"E, dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), date.format(byDate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A representation of the event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Date atDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for the Event class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates an incomplete event task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param at The start date and time of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws ParseException If by is not of \"dd/MM/yyyy HHmm\" format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Event(String description, String at) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.atDate \u003d format.parse(at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the event task to String format (for addition to the data file)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String printToTxtFile() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat date \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, description, date.format(atDate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the event task to String format (for printing to the UI)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat date \u003d new SimpleDateFormat(\"E, dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), date.format(atDate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A representation a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The base class for all the other task classes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Task class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates an incomplete (status-wise) task by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Gets the description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The description of the task in String format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts the isDone variable to either a \"tick\" or a \"cross\" symbol."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The status of the task (completed or not) in symbol form (\"tick\" or \"cross\")."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the task to String format (for addition to the data file)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String printToTxtFile() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"T | %d | %s | %s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the task to String format (for printing to the UI)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A representation of the todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Todo class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the todo task to String format (for addition to the data file)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String printToTxtFile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the todo task to String format (for printing to the UI)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 34
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "walnads": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "walnads": 19
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parser_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Parser p \u003d new Parser(new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\")));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //test case 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "           p.parse(\"todo\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //test case 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "            p.parse(\"event\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //test case 3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "            p.parse(\"deadline\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 25
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void markDone_expectedBehaviour() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TaskList tl \u003d new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\"));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tl.add(new Todo(\"print lecture notes\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tl.markDone(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(\"Here are the tasks in your list:\\n1. [T][\\u2713] print lecture notes\", tl.view());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void markDone_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TaskList tl \u003d new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tl.add(new Todo(\"print lecture notes\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "            tl.markDone(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void delete_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TaskList tl \u003d new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tl.add(new Todo(\"print lecture notes\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "            tl.delete(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void view_expectedBehaviour() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TaskList tl \u003d new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(\"Here are the tasks in your list:\", tl.view());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 37
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void printString_todo_expectedBehaviour() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Todo task \u003d new Todo(\"print lecture notes\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(\"T | 0 | print lecture notes\", task.printString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void printString_deadline_expectedBehaviour() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Deadline task \u003d new Deadline(\"complete lab 1\", \"7/9/2019 2359\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "            assertEquals(\"D | 0 | complete lab 1 | Sat, 07/09/2019 23:59\", task.printString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void printString_event_expectedBehaviour() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Event task \u003d new Event(\"attend formal dinner\", \"4/9/2019 1900\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "            assertEquals(\"E | 0 | attend formal dinner | Wed, 04/09/2019 19:00\", task.printString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 32
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "walnads": 22
    }
  }
]
