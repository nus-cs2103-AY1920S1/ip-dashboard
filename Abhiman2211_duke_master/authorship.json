[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Deadline class which inherits from the Task class and is used to represent"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * deadlines within Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String dueDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns a new Deadline object for use within Duke"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the deadline task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param dueDate Description of the time the deadline needs to be finished"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Deadline(String task, String dueDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns a new Deadline object for use within Duke with a predermined completion state."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the deadline task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param dueDate Description of the time the deadline needs to be finished"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param complete Boolean variable to determine if the deadline has been finished or not"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Deadline(String task, String dueDate, boolean complete) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task, complete);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of a deadline as it is stored in text file on the local system."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String isComplete \u003d this.complete ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"D | \" + isComplete + \" | \" + task + \" | \" + dueDate; "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of a deadline"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 49
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Duke object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param filePath Location of the local file where all tasks are stored"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * or to be stored"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException If the file path provided does not find a file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException If an unknown or unidentifiable command is stored within the tasks file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Duke(String filePath) throws IOException, DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Drives the Duke program by providing the means to read user inputs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * which are then processed into understandable commands which help Duke run."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ui.showGreetingMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        while (! input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                parser.processCommand(input, taskList, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ui.showGoodbyeMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Duke duke \u003d new Duke(\"/Users/abhimanyadav/Desktop/Duke/duke/src/main/java/dukeTasks.txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 47,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * DukeException class used to create the throwable Duke Exceptions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * particular to Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new throwable DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param message Message to be displayed when the DukeException is encountered."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 15
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Event class which inherits from the Task class and is used to represent"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * events within Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String timeline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Event object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the event to take place"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param timeline Description of the duration of the event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Event(String task, String timeline) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.timeline \u003d timeline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Event object for use within Duke, "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * with a predermined completion state."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * it is complete or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the event to take place"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param timeline Description of the duration of the event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param complete Boolean variable to determine if the deadline has been finished or not"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Event(String task, String timeline, boolean complete) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task, complete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.timeline \u003d timeline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of an event as it is stored in text file on the local system."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String isComplete \u003d complete ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"E | \" + isComplete + \" | \" + task + \" | \" + timeline; "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of an event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + timeline + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 49
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The parser class processes user inputs into understandable commands"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * which are then executed by the Duke program. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Parser object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the name of the month specified by the "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * string representation of its index in the calendar."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param month The index of the month in the calendar in String form."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return The name of the specified month."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the month index specified does not exist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static String getMonth(String month) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int monthIndex \u003d Integer.parseInt(month);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (monthIndex \u003e 12 || monthIndex \u003c 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The month you inputted is not valid.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new DateFormatSymbols().getMonths()[monthIndex - 1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Validates an hour input in the time string to determine if it is "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * a valid hour. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param hour The hour being validated. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the hour is not part of the 24 hour system."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void validateHour(int hour) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (hour \u003e 24 || hour \u003c 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The time you inputted is not valid.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Validates a minute input in the time string to determine if it is "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * a valid minute. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param minute The minute being validated. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the minute is greater than 59 or less than 0."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void validateMinute(int minute) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (minute \u003e 59 || minute \u003c 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The time you inputted is not valid.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the time string in the 12 hour format after parsing its String "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * representation in the 24 hour format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param timeDetail The String representation of the time as per the system."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return Time in 12 hour format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException If the format of the time is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static String parseTime(String timeDetail) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int hour \u003d (Integer.parseInt(timeDetail)/100);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validateHour(hour);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String actualHour \u003d hour % 12 \u003d\u003d 0 ? \"12\" : String.valueOf(hour % 12); "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int minute \u003d Integer.parseInt(timeDetail) % 100;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validateMinute(minute);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String meridiem \u003d hour \u003e\u003d 12 \u0026\u0026 hour \u003c 24 ? \"pm\" : \"am\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String processedMinute \u003d minute \u003d\u003d 0 ? \"\" : \".\" + String.valueOf(minute);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return actualHour + processedMinute + meridiem;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the date string in (dd of mm, YYYY) format after parsing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * its string representation in the dd/mm/yyyy format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param dateDetail The string representation of the date."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return Date in (dd of mm, YYYY) format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the dd/mm/yyyy format of the date "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static String parseDate(String dateDetail) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] dateBreakup \u003d dateDetail.split(\"/\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String month \u003d getMonth(dateBreakup[1]);    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int lastDigitOfDay \u003d Integer.parseInt(dateBreakup[0]) % 10;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String dayEnding \u003d lastDigitOfDay \u003d\u003d 1 ? \"st\" : lastDigitOfDay \u003d\u003d 2 ? \"nd\" "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                : lastDigitOfDay \u003d\u003d 3 ? \"rd\" : \"th\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return dateBreakup[0] + dayEnding + \" of \" + month + \" \" + dateBreakup[2]; "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the deadline date and time for a deadline in the advanced date and time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param dateDetails Details of the due date and time of the deadline. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return String representation of the deadline date and time in advanced date"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and time format. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException If the due or time entered are invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static String processDeadlineDate(String dateDetails) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String date \u003d dateDetails.split(\" \")[0];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String time \u003d dateDetails.split(\" \")[1];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return parseDate(date) + \", \" + parseTime(time);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the event date and time duration in the advanced date and time"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param dateDetails Details of the due date and time duration of the event. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return String representation of the event date and time duration in advanced date"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and time format."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException If the due or time duration entered are invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static String processEventDate(String dateDetails) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String date \u003d dateDetails.split(\" \")[0];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String time \u003d dateDetails.split(\" \")[1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] timeDetails \u003d time.split(\"-\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return parseDate(date) + \", \" + parseTime(timeDetails[0]) + \"-\" + parseTime(timeDetails[1]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Processes the user\u0027s input into a valid command and takes an action "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * accordingly based on the deciphered command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param taskList The taskList object handling all tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param ui The Ui object to display any messages to the user."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object needed to load and write back to the "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * tasks file. "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws Exception When any error occurs during the execution of the user command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void processCommand(String input, TaskList taskList, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (command[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            ui.printTasks(taskList.getTaskList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (command[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            deleteTask(input, taskList, storage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (command[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            taskDone(input, taskList, storage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (command[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                throw new DukeException(\"Find query must be specified!!!\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            } "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            ui.printTasks(taskList.matchingTasks(command[1]));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            addTask(input, taskList, storage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Deletes a particular task from the list of tasks based on the index"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * specified by the user."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param input The user\u0027s delete command."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param taskList The TaskList object holding all the tasks."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object needed to load and write back to the "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * tasks file. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the index the user entered is not a number."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When there is a problem writing back to the file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void deleteTask(String input, TaskList taskList, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The index of task to be deleted must be mentioned.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                taskList.deleteTask(Integer.parseInt(command[1]), storage);;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The index of task to be deleted must be a number.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Marks a particular task from the list of tasks as done based on the index"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * specified by the user."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param input The user\u0027s done command."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param taskList The TaskList object holding all the tasks."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object needed to load and write back to the "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * tasks file. "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the index the user entered is not a number."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When there is a problem writing back to the file."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void taskDone(String input, TaskList taskList, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The completed task\u0027s index must be mentioned.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                taskList.markAsDone(Integer.parseInt(command[1]), storage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The completed task\u0027s index must be a number.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Todo, stores it into the task list and writes it into "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the local file as well. "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param details Details being used to create the event."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param list The TaskList object holding all the tasks."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object needed to load and write back to the "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * tasks file. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When any error arises in writing back into storage in the file."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void addToDo(String details, TaskList list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Task task \u003d new ToDos(details);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        list.addTask(task, storage);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Ui.addSuccess(task);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new deadline, stores it into the task list and writes it into "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the local file as well. "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param details Details being used to create the event."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param list The TaskList object holding all the tasks."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object needed to load and write back to the "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * tasks file. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When any error arises in creating the event."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When any error arises in writing back into storage in the file."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void addDeadline(String details, TaskList list, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] detAsArr \u003d details.split(\" /by \");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Ui.validateDeadlineDetails(detAsArr);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String deadline \u003d detAsArr[0];"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String dueDetail \u003d detAsArr[1];"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Task task \u003d new Deadline(deadline, processDeadlineDate(dueDetail));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        list.addTask(task, storage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Ui.addSuccess(task);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new event and stores into the task list and writes it back"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the local file. "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param details Details being used to create the event."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param list The TaskList object holding all the tasks."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object needed to load and write back to the "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * tasks file. "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When any error arises in creating the event."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When any error arises in writing back into storage in the file."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void addEvent(String details, TaskList list, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] detAsArr \u003d details.split(\" /at \");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Ui.validateEventDetails(detAsArr);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String event \u003d detAsArr[0];"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String dueDetail \u003d detAsArr[1];"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Task task \u003d new Event(event, processEventDate(dueDetail));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        list.addTask(task, storage);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Ui.addSuccess(task);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Adds a task into the task list and writes it back into the local task "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * file as well."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void addTask(String input, TaskList list, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] inputAsArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Ui.validateDetail(inputAsArr);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String command \u003d inputAsArr[0];"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String rest \u003d input.substring(input.indexOf(\" \") + 1);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            addToDo(rest, list, storage);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            addDeadline(rest, list, storage);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            addEvent(rest, list, storage);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"Now you have \" + list.getTaskList().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 268
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The Storage class deals with retrieving tasks from the local file"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * and writing back to the file in the case of any modifications to the tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Constructs a new Storage object which obtains its data for initialisation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * from a specified file.  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param filePath File path of the file wherein tasks are stored. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns a new Task object created from an individual line of description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param line The string which, in a single line, describes a particular task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return The task constructed from the inputted task detail line."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the line of string being read does not describe any"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * particular type of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Task createTaskFromFile(String s) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] command \u003d s.split(\" \\\\| \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        boolean isPending \u003d command[1].equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        switch (command[0]) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ToDos(command[2], isPending);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new Deadline(command[2], command[3], isPending);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new Event(command[2], command[3], isPending);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"Uncategorizable task.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Writes the inputted task back into the file at the bottom of the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task The task being stored in the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file being written to cannot be found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void addTaskToFile(Task task) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        fw.write(task.toStringForFile() + System.lineSeparator());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns an array list of tasks constructed from the tasks saved locally on"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return An array list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws FileNotFoundException When the file being written to cannot be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When a particular task saved in the file is of the wrong "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * format or does not describe an existing type of task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Scanner scan \u003d new Scanner(file);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        while (scan.hasNextLine()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            list.add(createTaskFromFile(scan.nextLine()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        scan.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Writes all the tasks from an array list back into the file on the local system."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param filePath Location of the file where the tasks are to be stored."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param list The array list containing the tasks to be written back onto the file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file being written to be cannot be found."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void writeToFile(String filePath, ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            fw.write(t.toStringForFile() + System.lineSeparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return the filePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 100
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The Task class is used to represent Tasks and acts as the "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * superclass to the Event, Deadline and Todos classes. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    Boolean complete;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String done \u003d \"[✓] \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String pending \u003d \"[✗] \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Task object to be used within Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the task to be created."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.complete \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Task object to be used within Duke with the option"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * to predetermine whether it has been completed or not.  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the task to be created."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param isPending Boolean to state whether the task been completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Task(String task, boolean isPending) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.complete \u003d isPending;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the string representation of a Task for the purpose of writing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * back onto the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return String representation of a task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"wrong because of this\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the string representation of a Task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (this.complete) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return done + task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return pending + task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Sets the status of a particular task to completed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.complete \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(this.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 62
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The TaskList class handles the storage, adding and deleting of"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * tasks in Duke program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new TaskList object initialised with tasks from"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the inputted array list of Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param taskList An array list of tasks with which the TaskList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * object is initialised."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return The current task List"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Adds a new Task into the task list and writes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the changes back into the local file of tasks as well."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task The task to be added into the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object handling the read and write from the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * local file storing the tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file to be written to is not found or does not exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void addTask(Task task, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        storage.addTaskToFile(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns a list of all tasks which have the string "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * queried as the input present in them."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param query The string being searched for in each task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return List of all tasks containing the queried string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ArrayList\u003cTask\u003e matchingTasks(String query) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArrayList\u003cTask\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        for (Task t : this.taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            String queryLowerCase \u003d query.toLowerCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            String stringUnderCheck \u003d t.toString().toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            if (stringUnderCheck.indexOf(queryLowerCase) !\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                matches.add(t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Deletes a specific task from the task list and writes"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the changes back into the local file of tasks as well."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param index The index of the task to be deleted from the array list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object handling the read and write from the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * local file storing the tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the index specified by the user does not exist."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file to be written to is not found or does not exist."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void deleteTask(int index, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The item specified does not exist.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(taskList.get(index - 1).toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        storage.writeToFile(storage.getFilePath(), taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Sets the status of a particular task in the array list of tasks to "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * completed thereby signifying that the task has been completed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param index The index of the task in the array list to be set to completed "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * to be marked as completed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object handling the read and write from the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * local file storing the tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the index specified by the user does not exist."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file to be written to is not found or does not exist."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void markAsDone(int index, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            storage.writeToFile(storage.getFilePath(), taskList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The item specified does not exist.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 102
    }
  },
  {
    "path": "src/main/java/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The ToDo class is used to represent and manage ToDos within"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new ToDo with the specified detail."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Detail of what the ToDo "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * requires to be done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ToDos(String task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new ToDo with the specified detail and "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * its completition status being predetermined."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Detail of what the ToDo "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * requires to be done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param complete Boolean to determine whether the ToDo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * has been completed or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ToDos(String task, boolean complete) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task, complete);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of a ToDo as it is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * to be stored in the local file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String isComplete \u003d this.complete ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"T | \" + isComplete + \" | \" + task; "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of a ToDo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 47
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The Ui class handles the interaction with the users, mainly "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * displaying the greeting and goodbye messages along with customised"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * error messages."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Ui object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Prints the greeting message from Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void showGreetingMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Prints the goodbye message from Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void showGoodbyeMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Prints all the tasks loaded from the local file and "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * new ones created by users as they are stored in the array list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param list The array list from which the tasks are being read."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void printTasks(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            System.out.println(i + \".\" + task.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Validates whether a command entered by the user is legitimate and something"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Duke can act upon."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param detail Details of the user command broken down into chunks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the command is either incomplete or an invalid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void validateDetail(String[] detail) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (detail.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (! detail[0].equals(\"todo\") \u0026\u0026 ! detail[0].equals(\"event\") \u0026\u0026! detail[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (detail.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a \" + detail[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Checks whether the details being used to create a particular deadline are sufficient. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param detail The details entered by the user to create the deadline."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When insufficient data is entered by the user to "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * create the deadline."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void validateDeadlineDetails(String[] detail) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (detail.length !\u003d 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The due date of a deadline must be specified.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Checks whether the details being used to create a particular event are sufficient. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param detail The details entered by the user to create the event."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When insufficient data is entered by the user to "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * create the event."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void validateEventDetails(String[] detail) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (detail.length !\u003d 2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The timeline of an event must be specified.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Success message to be shown when a task is successfully created and added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * into the file and list of tasks by Duke."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task The task which has been added successfully."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void addSuccess(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        System.out.println(\"\\t\" + task.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 96
    }
  },
  {
    "path": "src/main/java/dukeTasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "D | 1 | return book | 2nd of December 2019, 6pm"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "E | 1 | attend party | 4th of June 2019, 6.30pm-10.30pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "T | 0 | meet parents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "D | 0 | return book | 22nd of November 2019, 7pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "T | 1 | meet friends"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 5
    }
  }
]
