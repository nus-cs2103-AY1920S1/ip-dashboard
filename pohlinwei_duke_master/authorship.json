[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    modules \u003d [\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "test {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "run {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 27,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 17,
      "-": 83
    }
  },
  {
    "path": "launch.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "# !/bin/bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "./gradlew run --console\u003dplain"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.LoadException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Response;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns Duke, a task manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // for tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String taskFile \u003d \"../data/tasks.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private OptionalStorage taskStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private boolean hasTaskStorage \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // for trivia"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String triviaFile \u003d \"../data/trivia.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private OptionalStorage triviaStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns Duke, a task manager."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws LoadException if the specified file for storing user\u0027s tasks cannot be accessed, read or written to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            taskStorage \u003d new OptionalStorage(taskFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            taskStorage.load(taskManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (LoadException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            taskStorage \u003d new OptionalStorage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            this.hasTaskStorage \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            taskStorage \u003d new OptionalStorage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            this.hasTaskStorage \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            triviaStorage \u003d new OptionalStorage(triviaFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            triviaStorage.load(triviaManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (LoadException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            triviaStorage \u003d new OptionalStorage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            triviaStorage \u003d new OptionalStorage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes the command implied by \u003ccode\u003einput\u003c/code\u003e. If the command is valid, the command will be"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * executed and the response message/outcome will be returned. If otherwise, the relevant error message"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * will be returned instead."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param input command which determines the desired action to take"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return if \u003ccode\u003einput\u003c/code\u003e is a valid command, response message will be returned. If otherwise,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * the error message will be returned"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Response getResponse(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Response response \u003d new Response();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Optional\u003cCommand\u003e command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            CommandType commandType \u003d command.get().getCommandType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String message \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (commandType.equals(CommandType.TASK)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                message \u003d command.get().execute(taskManager, taskStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else if (commandType.equals(CommandType.TRIVIA)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                message \u003d command.get().execute(triviaManager, triviaStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else if (commandType.equals(CommandType.BYE)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                message \u003d command.get().execute(taskManager, taskStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else if (commandType.equals(CommandType.STORE)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                message \u003d command.get().execute(taskManager, taskStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert !(message.equals(\"\")) : \"Message to user should not be empty\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            response \u003d new Response(message, commandType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            response \u003d new Response(Ui.showError(e), CommandType.INVALID);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Greets the user who has just logged on."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a message to greet user"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String sayHi() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.sayHi();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns whether tasks can be saved to a local file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @ return whether tasks can be saved to a local file"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean hasTaskStorage() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return hasTaskStorage;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 106,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Input.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "abstract public class Input {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public abstract String getInfo();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 5
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            scene.getStylesheets().add(\"/stylesheets/dialogbox.css\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().informStorageCapabilities();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().greetUser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 35
    }
  },
  {
    "path": "src/main/java/duke/Manager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public interface Manager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    void addPrevious(Stream\u003cString\u003e previousInput);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    void removeAll();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 9
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This allows commands, as indicated by a user\u0027s input, to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes the intended command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager task list which \u003ccode\u003ethis\u003c/code\u003e task should be added to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws Exception if command cannot be executed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(Manager manager, OptionalStorage storage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 22
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * A list of valid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    TASK, TRIVIA, BYE, INVALID, STORE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 9
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows us to terminate the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private final static CommandType commandType \u003d CommandType.BYE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Bids farewell to user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param manager task list which \u003ccode\u003ethis\u003c/code\u003e task should be added to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(Manager manager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.sayBye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 26
    }
  },
  {
    "path": "src/main/java/duke/command/task/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a new task to be added to a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class AddCommand extends TaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a command which allows us to add a task to \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert this.task !\u003d null : \"Empty task should not be added\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes this command by adding \u003ccode\u003ethis\u003c/code\u003e task to \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that command has been executed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskManager task list which \u003ccode\u003ethis\u003c/code\u003e task should be added to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        taskManager.addTask(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informAdded(taskManager.getLastEditedTask(), taskManager.getSize());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 36
    }
  },
  {
    "path": "src/main/java/duke/command/task/ChangeStorageCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.NoStorageChangeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ChangeStorageCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private final static CommandType commandType \u003d CommandType.STORE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected String path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public ChangeStorageCommand(String path) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(Manager manager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String resultString \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (path.equals(\".\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return (new NoStorageChangeException(path)).getMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            storage.update(path);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            storage.updateTaskList(manager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            resultString \u003d Ui.informChanged(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (NoStorageChangeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            resultString \u003d e.getMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert !resultString.equals(\"\") : \"resultString after storage change should not be empty\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return resultString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 41
    }
  },
  {
    "path": "src/main/java/duke/command/task/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a task to be deleted from a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeleteCommand extends TaskCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    int taskNum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a command which allows us to remove a task from \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum index of \u003ccode\u003etask\u003c/code\u003e to be removed from \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes this command by removing task with \u003ccode\u003etaskNum\u003c/code\u003e from \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that command has been executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskManager task list which the task should be added to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        taskManager.deleteTask(taskNum);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.update(taskManager.getTasksAsStream());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informDeleted(taskManager.getLastEditedTask(), taskManager.getSize());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 34
    }
  },
  {
    "path": "src/main/java/duke/command/task/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class FindCommand extends TaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String query;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public FindCommand(String query) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        List\u003cString\u003e results \u003d taskManager.getTasksAsStream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .map(t -\u003e t.toString())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .filter(t -\u003e containsQuery(t, query))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String resultString \u003d IntStream.range(0, results.size())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", (i + 1), results.get(i)))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .reduce(\"\", (prev, curr) -\u003e prev + curr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.showSearchResults(resultString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean containsQuery(String task, String query) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String ignoreCaseTask \u003d task.toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String ignoreCaseQuery \u003d query.toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return ignoreCaseTask.contains(ignoreCaseQuery);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 35
    }
  },
  {
    "path": "src/main/java/duke/command/task/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a new task to be added to a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ListCommand extends TaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes this command by listing all tasks in \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskManager task list which contains all tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.showList(taskManager.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 21
    }
  },
  {
    "path": "src/main/java/duke/command/task/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.MultipleChecksException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a task to be marked as completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MarkDoneCommand extends TaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    int taskNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a command which allows us to add a task to \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum id of \u003ccode\u003etask\u003c/code\u003e in \u003ccode\u003etaskList\u003c/code\u003e to be marked as completed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public MarkDoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes this command by marking \u003ccode\u003etask\u003c/code\u003e with \u003ccode\u003etaskNum\u003c/code\u003e as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that command has been executed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskManager task list which contains \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TaskManager taskManager, OptionalStorage storage) throws MultipleChecksException,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        taskManager.markTaskDone(taskNum);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.update(taskManager.getTasksAsStream());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informDone(taskManager.getLastEditedTask());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 37
    }
  },
  {
    "path": "src/main/java/duke/command/task/TaskCmdType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * A list of valid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public enum TaskCmdType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    DEADLINE, DELETE, DONE, EVENT, LIST, TODO, FIND"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 9
    }
  },
  {
    "path": "src/main/java/duke/command/task/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "abstract class TaskCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private final static CommandType commandType \u003d CommandType.TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(Manager manager, OptionalStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return execute((TaskManager) manager, storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    abstract public String execute(TaskManager manager, OptionalStorage storage) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 22
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/AnswerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.NoQuestionAskedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class AnswerCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public AnswerCommand(String response) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws NoQuestionAskedException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!triviaManager.hasAsked()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new NoQuestionAskedException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isCorrect \u003d triviaManager.checkAnswer(response);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informResult(isCorrect);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 22
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/AskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.NoTriviaException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class AskCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws NoTriviaException,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        MissingAnswerException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (triviaManager.isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new NoTriviaException();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String question \u003d triviaManager.askRandom();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.showQuestion(question);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 20
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/CheckCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.QuestionNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class CheckCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CheckCommand(String question) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws QuestionNotFoundException,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        MissingAnswerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String answer \u003d triviaManager.findAnswer(question);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Ui.informAnswer(answer);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 26
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/NewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.Trivia;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class NewCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public NewCommand(String question, String answer) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws MissingAnswerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Trivia trivia \u003d new Trivia(question, answer);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        triviaManager.add(trivia);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.add(trivia);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informNew(trivia);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 25
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/RemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class RemoveCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    int triviaId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public RemoveCommand(int triviaId) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.triviaId \u003d triviaId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage optionalStorage) throws"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        IndexOutOfBoundsException, MissingAnswerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        triviaManager.remove(triviaId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        optionalStorage.update(triviaManager.getTriviasAsStream());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.informRemoved(triviaManager.getLastEdited(), triviaManager.getSize());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 22
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ShowCommand extends TriviaCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(TriviaManager triviaManager, OptionalStorage storage) throws MissingAnswerException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isMissingAnswer(triviaManager);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Ui.showTrivia(triviaManager.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 13
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/TriviaCmdType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public enum TriviaCmdType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ASK, CHECK, NEW, ANSWER, SHOW, REMOVE"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 5
    }
  },
  {
    "path": "src/main/java/duke/command/trivia/TriviaCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.MissingAnswerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.storage.OptionalStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "abstract class TriviaCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private final static CommandType commandType \u003d CommandType.TRIVIA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String execute(Manager manager, OptionalStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return execute((TriviaManager) manager, storage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    abstract public String execute(TriviaManager triviaManager, OptionalStorage storage) throws DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected void isMissingAnswer(TriviaManager triviaManager) throws MissingAnswerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (triviaManager.hasAsked()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new MissingAnswerException(triviaManager.getAsked());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 29
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DukeParseException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected String msg;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DukeParseException(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DukeParseException() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/ExtraArgException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ExtraArgException extends DukeParseException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public ExtraArgException(String msg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This indicates that an error was encountered when trying to parse user\u0027s command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/LoadException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class LoadException extends IOException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public LoadException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Unable to read/write tasks to hard disk.\\nEntries will not be saved.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/StoreParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class StoreParseException extends DukeParseException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Incorrect format for change storage command. \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            + \"Please input \u0027store \u003ctask or trivia\u003e \u003cpath\u003e\u0027.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/task/DeadlineParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This indicates that an error was encountered when trying to parse user\u0027s deadline input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeadlineParseException extends DukeParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DeadlineParseException(String str) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(str);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String specificErrMsg \u003d super.getMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert specificErrMsg !\u003d \"\" : \"Specific error message for DeadlineParseException should be present\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(specificErrMsg + \". Please input deadline info in the following format:\\n\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                + \"deadline essay /by 20/1 1800\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/task/DeleteParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeleteParseException extends DukeParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Incorrect format for delete command. Please input \u0027delete \u003ctask number\u003e\u0027.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/task/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This indicates that the user has indicated an empty description when trying to add a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class EmptyDescriptionException extends DukeParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns exception indicating that the user has indicated an empty description when trying to add a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param task task which has no description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public EmptyDescriptionException(String task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (task.equals(\"event\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            type \u003d \"an event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (task.equals(\"todo\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            type \u003d \"a todo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (task.equals(\"deadline\")){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            type \u003d \"a deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"Task type should be an event, todo or deadline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"The description of %s cannot be empty.\", type);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 32
    }
  },
  {
    "path": "src/main/java/duke/exception/task/EventParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This indicates that an error was encountered when trying to parse user\u0027s event input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class EventParseException extends DukeParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public EventParseException(String string) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String specificErrMsg \u003d super.getMessage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert specificErrMsg !\u003d \"\" : \"Specific error message for EventParserException should be present\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(super.getMessage() + \". Please input event info in the following format:\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                + \"event dance /at 20/1 1800-1830\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 21
    }
  },
  {
    "path": "src/main/java/duke/exception/task/MarkDoneParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MarkDoneParseException extends DukeParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Incorrect format for mark done command. Please input \u0027done \u003ctask number\u003e\u0027.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/task/MultipleChecksException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This indicates that the task with \u003ccode\u003etaskNum\u003c/code\u003e has previously been marked as done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MultipleChecksException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an exception that indicates \u003ccode\u003etask\u003c/code\u003e with \u003ccode\u003etaskNum\u003c/code\u003e has previously been completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum id of \u003ccode\u003etask\u003c/code\u003e in \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public MultipleChecksException(int taskNum) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"You have completed task %d earlier!\", taskNum);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/task/NoStorageChangeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class NoStorageChangeException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public NoStorageChangeException(String path) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Unable to change storage file to that stored at %s\", path);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/EmptyQuestionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class EmptyQuestionException extends DukeParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Unable to get an answer for an empty question.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/MissingAnswerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MissingAnswerException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public MissingAnswerException(String question) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Please answer the previous question in the following format:\\nanswer \u003cyour answer\u003e\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            + \"\\n\\nPrevious question: %s\", question);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/NoQuestionAskedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class NoQuestionAskedException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"No question was asked previously. Get a random question by typing \u0027ask\u0027.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/NoTriviaException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class NoTriviaException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"There is no questions in your trivia bank!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/QuestionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class QuestionNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Unable to find question\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/RemoveParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class RemoveParseException extends DukeParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return \"Incorrect format for remove command. Please input \u0027remove \u003ctask number\u003e\u0027.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/trivia/TriviaParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TriviaParseException extends DukeParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public TriviaParseException(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s.\\nPlease input trivia in the following format:\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            + \"new Where is Singapore? /ans South East Asia\", super.getMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 15
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.ChangeStorageCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.TaskCmdType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.TriviaCmdType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.ExtraArgException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.StoreParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class provides a parser which can be used to parse user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int NUM_ARGS_STORE \u003d 2; //todo change to 3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // prevents user from directly creating a parser object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Parser() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Optional\u003cCommand\u003e parse(String userInput) throws InvalidCommandException, DukeParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        CommandType cmdType \u003d getCmdType(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (cmdType.equals(CommandType.TASK)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseTaskCommand(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (cmdType.equals(CommandType.TRIVIA)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseTriviaCommand(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (cmdType.equals(CommandType.BYE)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseByeCommand(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (cmdType.equals(CommandType.STORE)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseStoreCommand(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (cmdType.equals(CommandType.INVALID)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"Failed to catch all possible user command types\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static CommandType getCmdType(String userInput) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedArgs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String userCommand \u003d parsedArgs[0].toUpperCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isTaskCmd \u003d isTaskCmd(userCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isTaskCmd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return CommandType.TASK;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isExitCmd \u003d isExitCmd(userCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isExitCmd) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return CommandType.BYE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isStoreCmd \u003d isStoreCmd(userCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isStoreCmd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return CommandType.STORE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isTriviaCmd \u003d isTriviaCmd(userCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isTriviaCmd) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return CommandType.TRIVIA;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return CommandType.INVALID;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static boolean isTaskCmd(String userCommand) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            TaskCmdType.valueOf(userCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static boolean isTriviaCmd(String userCommand) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            TriviaCmdType.valueOf(userCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static boolean isExitCmd(String userCommand) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            CommandType commandType \u003d CommandType.valueOf(userCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return commandType.equals(CommandType.BYE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static boolean isStoreCmd(String userCommand) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            CommandType commandType \u003d CommandType.valueOf(userCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return commandType.equals(CommandType.STORE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Optional\u003cCommand\u003e parseTaskCommand(String userInput) throws DukeParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String userCmdString \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        TaskCmdType userCommand \u003d TaskCmdType.valueOf(userCmdString.toUpperCase());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String details \u003d StringFormatter.excludeRegex(userCmdString, userInput);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return TaskParser.parse(userCommand, details);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Optional\u003cCommand\u003e parseTriviaCommand(String userInput) throws DukeParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String userCmdString \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        TriviaCmdType userCommand \u003d TriviaCmdType.valueOf(userCmdString.toUpperCase());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String details \u003d StringFormatter.excludeRegex(userCmdString, userInput);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return TriviaParser.parse(userCommand, details);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Optional\u003cCommand\u003e parseByeCommand(String userInput) throws ExtraArgException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] userCmdString \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasExtraArg \u003d userCmdString.length \u003e 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (hasExtraArg) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new ExtraArgException(\"Bye command has extra argument. To exit, just type \u0027bye\u0027.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Optional.of(new ExitCommand());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Optional\u003cCommand\u003e parseStoreCommand(String userInput) throws StoreParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedArgs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (parsedArgs.length !\u003d NUM_ARGS_STORE) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new StoreParseException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String details \u003d StringFormatter.excludeRegex(parsedArgs[0], userInput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Optional.of(new ChangeStorageCommand(details));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an \u003ccode\u003eOptional\u003c/code\u003e value. If \u003ccode\u003ecommand\u003c/code\u003e can be successfully parsed,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * the result will contain the requested command; otherwise, it will be \u003ccode\u003eempty\u003c/code\u003e."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * \u003cp\u003eCommand can be executed by using the \u003ccode\u003eexecute\u003c/code\u003e method."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param command user input"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eOptional\u003c/code\u003ecommand as specified by user, if parsing is successful; otherwise it is empty"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Parses \u003ccode\u003etaskDetails\u003c/code\u003e of tasks and creates a new object. The object will be either a"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * deadline, event or todo, as determined by \u003ccode\u003etaskType\u003c/code\u003e."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskType command which indicates type of task"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskDetails name, date and time of task"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return task with properties that are determined by command"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws ParseException if \u003ccode\u003etaskDetails\u003c/code\u003e is in the incorrect format"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 162
    }
  },
  {
    "path": "src/main/java/duke/parser/StringFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class StringFormatter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private StringFormatter() {}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String excludeRegex(String regex, String originalStr) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        int regexLen \u003d regex.length();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        int regexStartIndex \u003d originalStr.indexOf(regex);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String editedStr \u003d originalStr.substring(regexLen + regexStartIndex).trim();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return editedStr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 12
    }
  },
  {
    "path": "src/main/java/duke/parser/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.DateFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "class TaskParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int NUM_ARG_DEADLINE \u003d 2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int NUM_ARG_EVENT \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final String SEPARATOR_DEADLINE \u003d \" /by \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final String SEPARATOR_EVENT \u003d \" /at \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final String SEPARATOR_TIME \u003d \"-\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private TaskParser() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static Optional\u003cCommand\u003e parse(TaskCmdType taskCmdType, String details) throws DukeParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Optional\u003cCommand\u003e command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        switch(taskCmdType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseDelete(details));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseDone(details));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseList(details));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseFind(details));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Command addCommand \u003d new AddCommand(parseDeadline(details));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            command \u003d Optional.of(addCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Command addCommand1 \u003d new AddCommand(parseEvent(details));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            command \u003d Optional.of(addCommand1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Command addCommand2 \u003d new AddCommand(parseTodo(details));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            command \u003d Optional.of(addCommand2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"All task commands should be valid type\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseDelete(String details) throws DeleteParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            int taskId \u003d Integer.parseInt(details) - 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new DeleteCommand(taskId);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeleteParseException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseDone(String details) throws MarkDoneParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            int taskId \u003d Integer.parseInt(details) - 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new MarkDoneCommand(taskId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new MarkDoneParseException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseList(String details) throws ExtraArgException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!details.equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new ExtraArgException(\"List command has extra argument. To list tasks, just type \u0027list\u0027.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseFind(String details) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new FindCommand(details);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Task parseDeadline(String details) throws DukeParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        // required format: \u003ctaskDetails\u003e /by \u003cday/Month HH:mm\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasSeparator \u003d details.contains(SEPARATOR_DEADLINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!hasSeparator) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String errMsg \u003d String.format(\"Missing \u0027%s\u0027 between deadline info and date/time\", SEPARATOR_DEADLINE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeadlineParseException(errMsg);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedDetails \u003d details.split(SEPARATOR_DEADLINE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (parsedDetails.length !\u003d NUM_ARG_DEADLINE) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeadlineParseException(\"Missing deadline info or date/time info, or extra fields\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String info \u003d parsedDetails[0];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String dateTimeStr \u003d parsedDetails[1];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar dateTimeInfo \u003d DateFormatter.parseDate(dateTimeStr);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new Deadline(info, dateTimeStr, dateTimeInfo);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeadlineParseException(\"Incorrect date/time format for deadline\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Task parseEvent(String details) throws DukeParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        // required format: \u003ctaskDetails\u003e /at \u003cday/Month HH:mm-HH:mm\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasSeparator \u003d details.contains(SEPARATOR_EVENT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!hasSeparator) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String errMsg \u003d String.format(\"Missing \u0027%s\u0027 between event info and date/time\", SEPARATOR_EVENT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(errMsg);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedDetails \u003d details.split(SEPARATOR_EVENT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (parsedDetails.length !\u003d NUM_ARG_EVENT) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Missing event info or date/time info, or extra fields\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String info \u003d parsedDetails[0];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String dateTimeStr \u003d parsedDetails[1];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] dateTimeArr \u003d dateTimeStr.split(\" \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasStartEndTime \u003d dateTimeArr.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!hasStartEndTime) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Missing date or time\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String date \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] times \u003d dateTimeArr[1].split(SEPARATOR_TIME);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar startTime \u003d DateFormatter.parseDate(date + \" \" + times[0]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar endTime \u003d DateFormatter.parseDate(date + \" \" + times[1]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new Event(info, dateTimeStr, startTime, endTime);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Incorrect date/time format for deadline\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Todo parseTodo(String details) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Todo(details);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 166
    }
  },
  {
    "path": "src/main/java/duke/parser/TriviaParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.trivia.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.EmptyQuestionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.RemoveParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.trivia.TriviaParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "class TriviaParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final String SEPARATOR_QNS_AND_ANS \u003d \" /ans \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static Optional\u003cCommand\u003e parse(TriviaCmdType triviaCmdType, String details) throws DukeParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        switch(triviaCmdType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case ASK:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseAsk(details));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case ANSWER:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseAnswer(details));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case NEW:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseNew(details));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case CHECK:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseCheck(details));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case SHOW:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseShow(details));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case REMOVE:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.of(parseRemove(details));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"All trivia commands should be valid type\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseAsk(String details) throws ExtraArgException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!details.equals(\"\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new ExtraArgException(\"Ask command has extra argument. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                + \"To get a random question, just type \u0027ask\u0027\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new AskCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseAnswer(String details) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new AnswerCommand(details);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseNew(String details) throws TriviaParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean hasSeparator \u003d details.contains(SEPARATOR_QNS_AND_ANS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!hasSeparator) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String errorMsg \u003d String.format(\"Missing %s between question and answer\", SEPARATOR_QNS_AND_ANS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new TriviaParseException(errorMsg);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String question \u003d details.split(SEPARATOR_QNS_AND_ANS)[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String answer \u003d details.split(SEPARATOR_QNS_AND_ANS)[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (question.equals(\"\") || answer.equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new TriviaParseException(\"Both question and answer cannot be empty\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new NewCommand(question, answer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseCheck(String details) throws EmptyQuestionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EmptyQuestionException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new CheckCommand(details);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseShow(String details) throws ExtraArgException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!details.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new ExtraArgException(\"Show command has extra argument. \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    + \"To get a random question, just type \u0027show\u0027\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new ShowCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Command parseRemove(String details) throws RemoveParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            int triviaId \u003d Integer.parseInt(details);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new RemoveCommand(triviaId);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new RemoveParseException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 89
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.DateFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class represents tasks that need to be done before a specific date/time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Calendar dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a task with a deadline field."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName name of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details latest completion date and time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param dateTime formatted version of \u003ccode\u003edetails\u003c/code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Deadline(String taskName, String details, Calendar dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, taskName, details);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTask\u003c/code\u003e representing a \u003ccode\u003eDeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * when given a string representation of it."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param timeInfo latest completion date and time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e representing the given input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Task stringToTask(String name, String timeInfo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Deadline(name, timeInfo, DateFormatter.parseCorrectedDate(timeInfo));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a formatted string version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string version of \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", isDone ? SYMBOL_COMPLETE : SYMBOL_INCOMPLETE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                taskName, DateFormatter.dateBeautifier().format(dateTime.getTime()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Checks whether \u003ccode\u003eObject o\u003c/code\u003e has the same \u003ccode\u003etaskName\u003c/code\u003e and \u003ccode\u003edetails\u003c/code\u003e as"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param o \u003ccode\u003eObject\u003c/code\u003e to be compared with \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return boolean indicating whether the two objects are \u0027equal\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (o instanceof Deadline) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return this.taskName \u003d\u003d ((Deadline) o).taskName"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    \u0026\u0026 this.details \u003d\u003d ((Deadline) o).details;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 75
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.DateFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class represents tasks that start at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Calendar startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Calendar endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an event with a task name, start time and end time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName task of name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details date, start time and end time of event in the format d/M hhmm-hhmm (24h format)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param startTime formatted start time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param endTime formatted end time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Event(String taskName, String details, Calendar startTime, Calendar endTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, taskName, details);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTask\u003c/code\u003e representing an \u003ccode\u003eEvent\u003c/code\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * when given a string representation of it."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e representing the given input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static Task stringToTask(String name, String timeInfo) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] dateTimeArr \u003d timeInfo.split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String date \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] times \u003d dateTimeArr[1].split(\"-\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String time1 \u003d times[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String time2 \u003d times[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String timeDate1 \u003d date + \" \" + time1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String timeDate2 \u003d date + \" \" + time2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Event(name, timeInfo, DateFormatter.parseCorrectedDate(timeDate1),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            DateFormatter.parseCorrectedDate(timeDate2));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a formatted string version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string version of \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s-%s)\", isDone ? SYMBOL_COMPLETE : SYMBOL_INCOMPLETE, taskName,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DateFormatter.dateBeautifier().format(startTime.getTime()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DateFormatter.dateBeautifier().format(endTime.getTime()).split(\" \")[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 69
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Input;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * An \u003ccode\u003eabstract\u003c/code\u003e class representing a task which has name and status (whether it is done) fields."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public abstract class Task extends Input {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected static final String SYMBOL_COMPLETE \u003d \"\\u2714\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected static final String SYMBOL_INCOMPLETE \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected boolean isDone \u003d false; // by default it\u0027s false"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a task with \u003ccode\u003etaskName\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName name of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public abstract String getInfo();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Converts a string represented task to an instance of a \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskInfo summarised string representation of task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return an instance of \u003ccode\u003eTask\u003c/code\u003e with fields found in \u003ccode\u003etaskInfo\u003c/code\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Task strToTask(String taskInfo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedInfo \u003d taskInfo.split(\" \\\\| \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String type \u003d parsedInfo[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean done \u003d Integer.parseInt(parsedInfo[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d parsedInfo[2];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task \u003d Todo.stringToTask(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            time \u003d parsedInfo[3];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task \u003d Deadline.stringToTask(name, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            time \u003d parsedInfo[3];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task \u003d Event.stringToTask(name, time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Marks \u003ccode\u003ethis\u003c/code\u003e as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assert isDone : \"Task\u0027s isDone should be true\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a boolean indicating whether \u003ccode\u003ethis\u003c/code\u003e is done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003ethis\u003c/code\u003e is done; otherwise, it returns \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 81
    }
  },
  {
    "path": "src/main/java/duke/task/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.MultipleChecksException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns a task list which allows us to read, add, delete and update the status of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TaskManager implements Manager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Optional\u003cTask\u003e lastEditedTask \u003d Optional.empty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return an instance of \u003ccode\u003eTaskList\u003c/code\u003e that contains no \u003ccode\u003etask\u003c/code\u003es"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public TaskManager() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds tasks that are retrieved from a \u003ccode\u003eStream\u003c/code\u003e of strings representing a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * summarised version of \u003ccode\u003etask\u003c/code\u003es."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * \u003cp\u003eThe \u003ccode\u003eStream\u003c/code\u003e can be retrieved from a \u003ccode\u003eStorage\u003c/code\u003e object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param previousTasks \u003ccode\u003eStream\u003c/code\u003e of summarised string representation of \u003ccode\u003etask\u003c/code\u003es"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void addPrevious(Stream\u003cString\u003e previousTasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        tasks.addAll(toTaskList(previousTasks));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds \u003ccode\u003enewTask\u003c/code\u003e to \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param newTask task to be added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        lastEditedTask \u003d Optional.of(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Deletes task with \u003ccode\u003etaskNum\u003c/code\u003e in \u003ccode\u003ethis\u003c/code\u003e task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum index of task to be deleted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void deleteTask(int taskNum) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            lastEditedTask \u003d Optional.of(tasks.get(taskNum));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            tasks.remove(taskNum);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new IndexOutOfBoundsException(\"No such task found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Marks task with \u003ccode\u003etaskNum\u003c/code\u003e as done."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum index of task to be marked as completed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws MultipleChecksException if the task with index \u003ccode\u003etaskNum\u003c/code\u003e has been marked as done previously"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void markTaskDone(int taskNum) throws MultipleChecksException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Task completedTask \u003d tasks.get(taskNum);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (completedTask.isDone()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                throw new MultipleChecksException(taskNum + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                completedTask.setDone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                lastEditedTask \u003d Optional.of(completedTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new IndexOutOfBoundsException(\"No such task\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets the last task which has been added, deleted or marked as done."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return last task which has been added, deleted or marked as done"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Task getLastEditedTask() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return lastEditedTask.orElseThrow();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns the number of tasks in this instance of \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return number of tasks in this instance of \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a \u003ccode\u003eStream\u003c/code\u003e which represents every task in this instance of \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eStream\u003c/code\u003e which represents every task in this instance of \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Stream\u003cTask\u003e getTasksAsStream() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return tasks.stream();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private List\u003cTask\u003e toTaskList(Stream\u003cString\u003e allTasks) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return allTasks.map(taskInfo -\u003e toTask(taskInfo))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Task toTask(String taskInfo) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Task.strToTask(taskInfo);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String listedTask \u003d IntStream.range(0, tasks.size())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", (i + 1), tasks.get(i)))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .reduce(\"\", (prev, curr) -\u003e prev + curr);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return listedTask;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 130
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class represents tasks without any date/time attached to it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a todo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName name or details of task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"T | %d | %s\", isDone ? 1 : 0, taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTask\u003c/code\u003e representing a \u003ccode\u003eTodo\u003c/code\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * when given a string representation of it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e representing the given input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Task stringToTask(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Todo(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a formatted string version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string version of \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"[T][%s] %s\", isDone ? SYMBOL_COMPLETE : SYMBOL_INCOMPLETE, taskName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Checks whether \u003ccode\u003eObject o\u003c/code\u003e has the same \u003ccode\u003etaskName\u003c/code\u003e as \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param o \u003ccode\u003eObject\u003c/code\u003e to be compared with \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return boolean indicating whether the two objects are \u0027equal\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (o instanceof Todo) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return this.taskName \u003d\u003d (((Todo) o).taskName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 60
    }
  },
  {
    "path": "src/main/java/duke/trivia/Trivia.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Input;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Trivia extends Input {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Trivia(String question, String answer) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.question \u003d question.trim();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.answer \u003d answer.trim();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String getQuestion() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String getAnswer() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s | %s\", question, answer);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    boolean isAnswerCorrect(String response) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return response.equalsIgnoreCase(answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static Trivia strToTrivia(String triviaStr) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] qnsAndAns \u003d triviaStr.split(\"\\\\|\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String qns \u003d qnsAndAns[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String ans \u003d qnsAndAns[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Trivia(qns, ans);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Q: %s\\nA: %s\", question, answer);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 41
    }
  },
  {
    "path": "src/main/java/duke/trivia/TriviaManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.trivia;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TriviaManager implements Manager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private HashMap\u003cString, String\u003e quickQnsAndAns \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private List\u003cTrivia\u003e trivias \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Optional\u003cTrivia\u003e asked \u003d Optional.empty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Optional\u003cTrivia\u003e lastEdited \u003d Optional.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public TriviaManager() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void addPrevious(Stream\u003cString\u003e storedTrivias) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storedTrivias.forEach(t -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Trivia trivia \u003d Trivia.strToTrivia(t);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            trivias.add(trivia);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String question \u003d trivia.getQuestion().toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String answer \u003d trivia.getAnswer();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            quickQnsAndAns.put(question, answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        quickQnsAndAns.clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        trivias.clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void add(Trivia trivia) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String question \u003d trivia.getQuestion();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String answer \u003d trivia.getAnswer();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        quickQnsAndAns.put(question.toLowerCase(), answer);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        trivias.add(trivia);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        lastEdited \u003d Optional.of(trivia);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String askRandom() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        int questionNum \u003d rand.nextInt(trivias.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Trivia trivia \u003d trivias.get(questionNum);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        asked \u003d Optional.of(trivia);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivia.getQuestion();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean checkAnswer(String response) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!asked.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"There should be a previously asked question\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Trivia trivia \u003d asked.get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        asked \u003d Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivia.isAnswerCorrect(response);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String findAnswer(String question) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String qnsIgnoreCase \u003d question.toLowerCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return quickQnsAndAns.get(qnsIgnoreCase);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void remove(int triviaId) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        int actualId \u003d triviaId - 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String question \u003d trivias.get(actualId).getQuestion();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        quickQnsAndAns.remove(question);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Trivia deletedTrivia \u003d trivias.get(actualId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        trivias.remove(actualId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        lastEdited \u003d Optional.of(deletedTrivia);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivias.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivias.isEmpty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Trivia getLastEdited() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (lastEdited.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"There should be a previously edited trivia\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return lastEdited.get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean hasAsked() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return asked.isPresent();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getAsked() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!asked.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"There should be a previously asked question\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return asked.get().getQuestion();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Stream\u003cTrivia\u003e getTriviasAsStream() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return trivias.stream();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String allTrivias \u003d IntStream.range(0, trivias.size())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            .mapToObj(i -\u003e String.format(\"Trivia %d\\n%s\", (i + 1), trivias.get(i)))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            .reduce(\"\", (prev, curr) -\u003e prev + curr + \"\\n\\n\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            .trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return allTrivias;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 115
    }
  },
  {
    "path": "src/main/java/duke/util/DateFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int CURRENT_YEAR \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"d/M HHmm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // prevents user from directly creating a DateFormatter object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private DateFormatter() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Calendar parseDate(String str) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Date date \u003d dateFormatter.parse(str);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        c.setTime(date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        c.set(Calendar.YEAR, CURRENT_YEAR);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Calendar parseCorrectedDate(String str) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Date date \u003d dateFormatter.parse(str);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            c.setTime(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            c.set(Calendar.YEAR, CURRENT_YEAR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"Date format was mistakenly accepted as correct\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return c;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static SimpleDateFormat dateBeautifier() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new SimpleDateFormat(\"dd/MM/yy h:mma\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 40
    }
  },
  {
    "path": "src/main/java/duke/util/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Response(String message, CommandType commandType) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Response() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        new Response(\"\", CommandType.INVALID);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return commandType.equals(CommandType.BYE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 29
    }
  },
  {
    "path": "src/main/java/duke/util/storage/OptionalStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Input;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.LoadException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.task.NoStorageChangeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class OptionalStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Optional\u003cStorage\u003e storage \u003d Optional.empty();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public OptionalStorage(String path) throws LoadException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage \u003d Optional.of(new Storage(path));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public OptionalStorage() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void add(Input input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e s.add(input));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void update(Stream\u003c? extends Input\u003e inputs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e s.update(inputs));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void load(Manager manager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e manager.addPrevious(s.load()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void updateTaskList(Manager manager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        manager.removeAll();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        load(manager);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void update(String path) throws NoStorageChangeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            storage \u003d Optional.of(new Storage(path));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (LoadException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new NoStorageChangeException(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 44
    }
  },
  {
    "path": "src/main/java/duke/util/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.LoadException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows us to update and save any changes in \u003ccode\u003etaskList\u003c/code\u003e to a file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a storage which we can use to write and read the file stored at \u003ccode\u003epath\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path path to file which the user would like to store information from \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws LoadException if the file cannot be read and or written to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    Storage(String path) throws LoadException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (path.equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                throw new LoadException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } else if (!Files.exists(Paths.get(path))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                createFile(path);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (!Files.isReadable(Paths.get(path)) || !Files.isWritable(Paths.get(path))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                throw new LoadException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new LoadException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Creates a new file at \u003ccode\u003epath\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path path where new file will be located relative to main app\u0027s working directory"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private void createFile(String path) throws LoadException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String[] parsedPath \u003d path.split(\"/\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // determine dirs path"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String dirPath \u003d IntStream.range(0, parsedPath.length - 1)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    .mapToObj(i -\u003e parsedPath[i])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    .reduce(\"\", (prev, curr) -\u003e prev + curr + \"/\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Files.createDirectories(Paths.get(dirPath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Files.createFile(Paths.get(path));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new LoadException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a \u003ccode\u003eStream\u003c/code\u003e of strings. Each string represents a summarised version of a \u003ccode\u003etask\u003c/code\u003e."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return strings of summarised version of all tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    Stream\u003cString\u003e load() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Files.lines(Paths.get(path));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Stream.of(\"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds \u003ccode\u003etask\u003c/code\u003e to file found at \u003ccode\u003ethis\u003c/code\u003e path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param input task to be added to file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    void add(Input input) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            BufferedWriter w \u003d new BufferedWriter(new FileWriter(path, true));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            w.write(input.getInfo() + System.lineSeparator());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            w.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"File should be writeable\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Rewrites the entire file to save updates made to \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param inputs summarised string representation of all tasks found in \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    void update(Stream\u003c? extends Input\u003e inputs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            BufferedWriter w \u003d new BufferedWriter(new FileWriter(path));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            inputs.forEach(input -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    w.write(input.getInfo() + System.lineSeparator());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    System.err.println(\"Unable to update storage: \" + e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            w.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assert false : \"File should be readable and writeable\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 108
    }
  },
  {
    "path": "src/main/java/duke/util/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.rgb(230, 230, 230), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 68
    }
  },
  {
    "path": "src/main/java/duke/util/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.LoadException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Response;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Response response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DialogBox.getDukeDialog(response.getMessage(), dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (response.isExit()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            disableInput();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void greetUser() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DialogBox.getDukeDialog(duke.sayHi(), dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void informStorageCapabilities() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (!duke.hasTaskStorage()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String errMsg \u003d (new LoadException()).toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                DialogBox.getDukeDialog(errMsg, dukeImage)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void disableInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        sendButton.setDisable(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 89
    }
  },
  {
    "path": "src/main/java/duke/util/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.trivia.Trivia;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class gives us a user interface."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // default statements"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String hi \u003d \"Hello! I\u0027m Duke. What can I do for you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String bye \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // default statements for task commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String listIntro \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String searchResultsIntro \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // default statements for trivia commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String foundAnswer \u003d \"Here is the answer to your question:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String newInformation \u003d \"My brains just grew in size! I have added:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String askQuestion \u003d \"Here is a question for you:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String triviasListIntro \u003d \"Here is your question bank:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String sadFace \u003d \"\\u2639\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String smileyFace \u003d \"\\u263A\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Says hi to user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String sayHi() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return hi;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Says bye to user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String sayBye() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return bye;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Shows user a list of all tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showList(String tasksAsString) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       return listIntro + \"\\n\" + tasksAsString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that task is completed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param completedTask task which has been successfully marked as done"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informDone(Task completedTask) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\\n\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                completedTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that the task has been deleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param deletedTask task which has been successfully deleted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param tasksNum number of tasks remaining in the list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informDeleted(Task deletedTask, int tasksNum) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Noted. I\u0027ve removed this task:\\n%s\\n\\nNow you have %d tasks in the list.\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                deletedTask, tasksNum);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that the task has been added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param addedTask task which has been successfully added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param tasksNum number of tasks in the list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informAdded(Task addedTask, int tasksNum) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\n\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                        + \"Now you have %d tasks in the list.\\n\", addedTask, tasksNum);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       return response;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informChanged(String path) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Done! Tasks from %s have been loaded and all new entries will be stored at %s\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            path, path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that an error has occurred."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param e \u003ccode\u003eException\u003c/code\u003e encountered"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showError(Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return sadFace + \" OOPS!!! \" + e.getMessage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showSearchResults(String tasksAsString) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return searchResultsIntro + \"\\n\" + tasksAsString;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informAnswer(String answer) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s\\n%s\", foundAnswer, answer);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informNew(Trivia trivia) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s\\n%s\", newInformation, trivia);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showQuestion(String question) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s\\n%s\", askQuestion, question);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String showTrivia(String triviasAsList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"%s\\n\\n%s\", triviasListIntro, triviasAsList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informRemoved(Trivia deletedTrivia, int triviasNum) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Noted. I\u0027ve removed:\\n%s\\n\\nNow you have %d questions in your trivia bank.\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                deletedTrivia, triviasNum);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static String informResult(boolean isCorrect) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return String.format(\"Hooray! You got it right %s\", smileyFace);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return String.format(\"Oops! %s Try again the next time round.\", sadFace);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 130
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"conversation-box\" text\u003d\"Label\" textOverrun\u003d\"LEADING_ELLIPSIS\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"2.0\" right\u003d\"2.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    fx:controller\u003d\"duke.util.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" styleClass\u003d\"conversation-box\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 21
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int YEAR \u003d 2019;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"d/M HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_incompleteTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar dateTime1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dateTime1.set(YEAR, 9, 28, 23, 59);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"D | 0 | return book | 28/9 2359\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                (new Deadline(\"return book\", \"28/9 2359\", dateTime1)).getInfo());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_completedTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dateTime.set(YEAR, 9, 28, 23, 59);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"28/9 2359\", dateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        deadline.setDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"D | 1 | return book | 28/9 2359\", deadline.getInfo());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void stringToTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d \"read book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String timeInfo \u003d \"29/9 1259\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dateTime.set(YEAR, 9, 29, 12, 59);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(new Deadline(name, timeInfo, dateTime), Deadline.stringToTask(name, timeInfo));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_incompleteTask() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Date date \u003d dateFormatter.parse(\"28/9\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.setTime(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.set(Calendar.YEAR, 2019);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assertEquals(\"[D][\\u2718] return book (by: 28/09/19 11:59PM)\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    (new Deadline(\"return book\", \"28/9 2359\", dateTime)).toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // ignore"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_completedTask() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Date date \u003d dateFormatter.parse(\"28/9\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.setTime(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.set(Calendar.YEAR, 2019);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"return book\", \"28/9 2359\", dateTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            deadline.setDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assertEquals(\"[D][\\u2714] return book (by: 28/09/19 11:59PM)\", deadline.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // ignore"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 74
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_incompleteTask() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"T | 0 | read book\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                (new Todo(\"read book\")).getInfo());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_completedTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        todo.setDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"T | 1 | read book\", todo.getInfo());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void stringToTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d \"read book\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(new Todo(name), Todo.stringToTask(name));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_incompleteTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"[T][\\u2718] read book\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                (new Todo(\"read book\")).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_completedTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        todo.setDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"[T][\\u2714] read book\", todo.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 39
    }
  }
]
