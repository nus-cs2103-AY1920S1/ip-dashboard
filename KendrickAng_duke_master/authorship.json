[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // configuration files expected to be in ./config/checkstyle/ by convention."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // public .jar file to ./build/libs in form {baseName}-{version}.jar"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    archiveVersion \u003d \"0.1.8\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    mainClassName \u003d \"duke.DukeLauncher\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "KendrickAng": 30
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "T | 0 | book courts"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "T | 0 | book rooms"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "T | 0 | book stadium"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "T | 0 | control test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "T | 0 | fdsfsd"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "T | 0 | argh"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 6
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.CommandResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Main Driver class housing the infinite loop."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.taskList \u003d storage.readFromDisk(); // leave index 0 empty for clarity"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (DukeIoException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            System.err.println(ui.showError(e));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            this.taskList \u003d new TaskList(); // only load the taskList if no error"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // JavaFX GUI won\u0027t run without this."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this(\"data/duke.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * The main loop for Duke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse getResponse(String fullCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 41
    }
  },
  {
    "path": "src/main/java/duke/DukeLauncher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * The main entry point into the gui."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param primaryStage The stage to add our parent node."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // The FXMLLoader maps a control with fx:id defined in FXML to a variable with same name in controller."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 38
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeMissingDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Deals with making sense of commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Parses the full command and returns the corresponding Command instance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param command the full command to parse."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the command corresponding to the input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeException an exception generated when parsing the input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // remove trailing/leading whitespace and split by whitespace(s)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        command \u003d command.strip();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] commands \u003d command.split(\"[ ]+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] args \u003d Arrays.copyOfRange(commands, 1, commands.length);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        switch (commands[0]) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (args.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                throw new DukeMissingDescriptionException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        \"OOPS! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new AddCommand(TODO, args, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new AddCommand(EVENT, args, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String[] deadlineArgs \u003d String.join(\" \", args).split(\" /by \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String deadline \u003d deadlineArgs[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // enforce example format 2/12/2019 1800"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (deadline.split(\" \").length !\u003d 2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    || deadline.split(\" \")[0].split(\"/\").length !\u003d 3"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    || Integer.valueOf(deadline.split(\" \")[1]) \u003c 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    || Integer.valueOf(deadline.split(\" \")[1]) \u003e 2400) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                throw new DukeUnknownInputException(\"Parser: Unknown deadline String format passed :(\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new AddCommand(DEADLINE, args, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (args.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                throw new DukeMissingDescriptionException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        \"OOPS! The keyword of a search cannot be empty.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String keyword \u003d args[0].strip();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new FindCommand(keyword, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            int doneIdx \u003d Integer.valueOf(args[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new DoneCommand(doneIdx, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            int deleteIdx \u003d Integer.valueOf(args[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new DeleteCommand(deleteIdx, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new ListCommand(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new ExitCommand(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeMissingDescriptionException("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    \"OOPS! I\u0027m sorry, but I don\u0027t know what that means...\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 71
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to add a new Task to Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private TaskType type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String[] args;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public AddCommand(TaskType type, String[] args, boolean isExit) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Adds a task to the TaskList, informs the user and updates the hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // create the appropriate task, add to the list and write to disk"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Task task \u003d taskList.add(TaskFactory.getTask(type, args));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // inform the user the task has been added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showAddMessage(task, taskList.count());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // update hard disk"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        storage.writeToDisk(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String[] getArgs() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.args;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 44
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents Duke commands that will be processed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    Command(boolean isExit) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Executes the Command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public abstract CommandResponse execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 29
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Helper class to store the String response and boolean flag indicating program exit."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class CommandResponse {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse(String response, boolean isExit) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.response;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 22
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to delete a specified task in Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private int idx;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DeleteCommand(int idx, boolean isExit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Deletes a specified task from the TaskList, informs the user and updates the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // delete the task at corresponding index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Task task \u003d taskList.delete(idx);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // inform user of deletion"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showDeleteMessage(task, taskList.count());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // update hard disk"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        storage.writeToDisk(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 36
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to mark a task as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private int idx;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DoneCommand(int idx, boolean isExit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Marks a task in the TaskList as done, informs the user and updates the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // mark the task corresponding to index as done"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Task task \u003d taskList.markAsDone(idx);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // inform the user task has been marked done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showDoneMessage(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // update hard disk"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        storage.writeToDisk(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to quit Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ExitCommand(boolean isExit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Quits Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showExitMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 27
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to find all tasks with specified keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public FindCommand(String keyword, boolean isExit) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Finds all tasks containing the keyword and lists them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // create a new task list with results containing the keyword."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        TaskList searchList \u003d taskList.find(keyword);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // inform the user of matching queries (if any)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showSearchList(searchList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 33
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents an instruction to list all tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ListCommand(boolean isExit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(isExit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Lists all tasks in Duke\u0027s TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the TaskList instance Duke is referencing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param ui the Ui instance handling user-facing interaction."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param storage the Storage instance dealing with hard disk reading/writing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String response \u003d ui.showTaskList(taskList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new CommandResponse(response, super.isExit());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 27
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * The general exception type thrown by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIllegalStateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that Duke is not in an appropriate state for the request operation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeIllegalStateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeIllegalStateException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIndexOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that the program tried to access some collection out of its index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeIndexOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeIndexOutOfBoundsException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that some I/O error occurred when reading/writing from some file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeIoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeIoException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeMissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that some arguments are missing from the command input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeMissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeMissingDescriptionException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeUnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Signals that some incorrect input has tried to be passed as arguments in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DukeUnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public DukeUnknownInputException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 10
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a Horizontal box with a label and Image."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        displayPicture.setClip(new Circle("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                displayPicture.getFitWidth() / 2,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                displayPicture.getFitHeight() / 2,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                50.0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the current DialogBox instance."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private DialogBox flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a new right-justified dialog box."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param text the text to place in the label."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param img the image to place in the box."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the new dialog box."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a new left-justified dialog box."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param text the text to place in the label."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param img the image to place in the box."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the new dialog box."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new DialogBox(text, img).flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 78
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.CommandResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "// the @FXML notation marks a private or protected member, allowing FXML to access it despite the modifier."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * A UI Controller class. For UI-related code."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Bind the dialog container to the button of the scroll pane, and greet the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Greet the user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                DialogBox.getDukeDialog(Ui.addDividers(new Ui().showWelcomeMessage()), dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Listens to the input field and button and carries out the main business logic of Duke."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Main business logic goes here"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        CommandResponse response;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            response \u003d new CommandResponse(Ui.addPrefixNewline(e.getMessage()), false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // Exit application programmatically if necessary"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (response.getIsExit()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // hacky way to get the primary stage"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Stage primaryStage \u003d (Stage) scrollPane.getScene().getWindow();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            primaryStage.fireEvent(new WindowEvent("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            primaryStage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            WindowEvent.WINDOW_CLOSE_REQUEST"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    DialogBox.getUserDialog("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            Ui.addDividers(Ui.addPrefixNewline(input)),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            userImage),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            Ui.addDividers(response.getResponse()),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                            dukeImage)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // We can do this since we (1) Defined userInput in MainWindow.fxml (2) gave userInput the @FXML tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 88
    }
  },
  {
    "path": "src/main/java/duke/gui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String PREFIX \u003d \"    \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static final String DIVIDER \u003d \"------------------------------------------------------\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke. What can I do for you?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String ADD_MESSAGE \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String SEARCH_MESSAGE \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DELETE_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Convenience method for formatting un-indented input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param input the text to format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static String addPrefixNewline(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return PREFIX + input + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Convenience method for adding dividers above and below the text."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param input the text to format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the formatted text string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static String addDividers(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return addPrefixNewline(DIVIDER) + input + addPrefixNewline(DIVIDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out a welcome message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showWelcomeMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out a specified error message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param e the error to print."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showError(DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out the message indicating a task has been added."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param task the task added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskCount the number of tasks currently in the task list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showAddMessage(Task task, long taskCount) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(ADD_MESSAGE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                (taskCount \u003d\u003d 1"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    ? \"Now you have 1 task in the list.\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    : String.format(\"Now you have %d tasks in the list.\", taskCount)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out the message indicating a task has been marked done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param task the task marked done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showDoneMessage(Task task) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(DONE_MESSAGE, task.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out the message indicating a task has been deleted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param task the deleted task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskCount the number of tasks remaining in the task list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showDeleteMessage(Task task, long taskCount) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(DELETE_MESSAGE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                (taskCount \u003d\u003d 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    ? \"Now you have 1 task in the list.\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    : String.format(\"Now you have %d tasks in the list.\", taskCount)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out the list of results from a keyword search."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param searchList the task list of results."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showSearchList(TaskList searchList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(SEARCH_MESSAGE, showTaskList(searchList));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out a task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the task list to print."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (task !\u003d null) { // account for 0-indexing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                sb.append(showToUser(String.format(\"%d. %s\", i, task)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints the exit message."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String showExitMessage() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return showToUser(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Prints out a sequence of messages with dividers at beginning and end, and prefix added to each line."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param messages the sequence of messages to print."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String showToUser(String... messages) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (String line: messages) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            sb.append(PREFIX).append(line).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 140
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.nio.file.StandardOpenOption.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Stores and retrieves persisting task information from the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Storage(String uri) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.path \u003d Paths.get(uri);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Reads task data from the hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task list containing all tasks read from disk."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeIoException if some error occurs while reading the tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList readFromDisk() throws DukeIoException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Charset charset \u003d Charset.forName(\"ISO-8859-1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            BufferedReader reader \u003d Files.newBufferedReader(path, charset);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null \u0026\u0026 !line.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String[] args \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String code \u003d args[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                boolean isDone \u003d args[1].equals(\"1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                String[] taskArgs \u003d Arrays.copyOfRange(args, 2, args.length);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                if (code.equals(\"T\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    taskList.add(TaskFactory.getTask(TODO, taskArgs, isDone));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                } else if (code.equals(\"D\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    taskList.add(TaskFactory.getTask(DEADLINE, taskArgs, isDone));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                } else if (code.equals(\"E\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    taskList.add(TaskFactory.getTask(EVENT, taskArgs, isDone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    throw new IOException(\"Attempting to read unknown task from disk!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIoException(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Writes task data to the hard disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskList the task list containing all tasks to write to disk."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task list written to disk."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeException if some error occurs while writing the tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList writeToDisk(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Charset charset \u003d Charset.forName(\"ISO-8859-1\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // clear entire file and write on an empty file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            BufferedWriter bw \u003d Files.newBufferedWriter(path, charset, CREATE, TRUNCATE_EXISTING, WRITE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            for (Task task: tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                if (task !\u003d null) { // account for the first null placeholder"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    String desc \u003d task.getDescription();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    int isDone \u003d task.getIsDone() ? 1 : 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    if (task instanceof Todo) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.write(String.format(\"T | %d | %s\", isDone, desc));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.newLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        String deadline \u003d ((Deadline) task).getDeadline();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.write(String.format(\"D | %d | %s | /by | %s\", isDone, desc, deadline));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.newLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        String period \u003d ((Event) task).getPeriod();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.write(String.format(\"E | %d | %s | /at | %s\", isDone, desc, period));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        bw.newLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                        throw new IOException(\"Attempting to write unknown task to disk!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIoException(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 102
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.time.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Deadline(String description, String deadline) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this(description, deadline, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Deadline(String description, String deadline, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + DateTime.of(deadline) + \u0027)\u0027;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 29
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a task to be done at some specified time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Event(String description, String period) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this(description, period, false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Event(String description, String period, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getPeriod() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + period + \u0027)\u0027;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 26
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * The base class all Task classes are to inherit from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the status icon corresponding to whether the task is complete or not."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return \"O\" if the task is complete, \"X\" otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return (isDone ? \"O\" : \"X\"); //return O or X symbols"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Marks a task as complete."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return whether the task is complete or not."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    protected boolean markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return \u0027[\u0027 + getStatusIcon() + \u0027]\u0027 + \u0027 \u0027 + description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 46
    }
  },
  {
    "path": "src/main/java/duke/task/TaskFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Implements the Factory pattern. Handles all types of task creation."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a specific task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskType the type of task to create."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param args the required arguments to initialise the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the created task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeUnknownInputException if an unknown TaskType is passed as argument."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Task getTask(TaskType taskType, String[] args) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // example args: {\"borrow\", \"book\"}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Todo(String.join(\" \", args));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // example args: {\"attend festival\", \"2pm\"}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String[] eventArgs \u003d String.join(\" \", args).split(\" /at \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Event(eventArgs[0].strip(), eventArgs[1].strip());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            // example args: {\"homework\", \"2/12/2019 1800\"}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String[] deadlineArgs \u003d String.join(\" \", args).split(\" /by \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Deadline(deadlineArgs[0].strip(), deadlineArgs[1].strip());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException(\"Invalid TaskType enum given!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a specific task with specific completion status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param taskType the type of task to create."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param args the required arguments to initialise the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param isDone the completion status of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the created task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeUnknownInputException if an unknown TaskType is passed as argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static Task getTask(TaskType taskType, String[] args, boolean isDone) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Todo(String.join(\" \", args), isDone);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String[] eventArgs \u003d String.join(\" \", args).split(\" /at \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Event(eventArgs[0].strip(), eventArgs[1].strip(), isDone);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            String[] deadlineArgs \u003d String.join(\" \", args).split(\" /by \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            return new Deadline(deadlineArgs[0].strip(), deadlineArgs[1].strip(), isDone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException(\"Invalid TaskType enum given!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 58
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a list of tasks in Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        tasks.add(null); // leave index 0 unused for clarity."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Add a task to the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param task the task to add."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Task add(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param idx the index of the task to delete (as listed)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the deleted task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeIndexOutOfBoundsException if the index of the task to delete is not shown (as listed)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Task delete(int idx) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (idx \u003c\u003d 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\":\u0027( OOPS!!! There\u0027s no such task index.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tasks.remove(idx);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Gets a task from the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param idx the index of the task to get (as listed)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task obtained."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeIndexOutOfBoundsException if the index of the task to delete is not shown (as listed)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Task get(int idx) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (idx \u003c\u003d 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\":\u0027( OOPS!!! There\u0027s no such task index.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tasks.get(idx);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    // TODO: the user should be able to edit the returned list items via their printed index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Finds all tasks matching a keyword given."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param keyword the keyword to search among task descriptions for."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task list containing all matched tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        TaskList newList \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        for (Task task: this.getTaskList()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            if (task !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                if(task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                    newList.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Marks a task as completed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param idx the index of the task to mark as done (as listed)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the task marked as complete."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @throws DukeIndexOutOfBoundsException if the index of the task to delete is not shown (as listed)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Task markAsDone(int idx) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (idx \u003c\u003d 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\":\u0027( OOPS!!! There\u0027s no such task index.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Task task \u003d tasks.get(idx);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the number of tasks in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public long count() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return tasks.size() - 1; // account for 1-indexing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 105
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents the different types of tasks that can be created."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    TODO, EVENT, DEADLINE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 8
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Represents a task to do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 20
    }
  },
  {
    "path": "src/main/java/duke/time/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.OffsetDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " * Handles date and time formatting using the java.time built-in package."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private OffsetDateTime dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    private DateTime(int year, Month month, int dayOfMonth, int hour, int minute, int second) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        this.dateTime \u003d LocalDateTime"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .of(year, month, dayOfMonth, hour, minute, second)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .atOffset(ZoneOffset.ofHours(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * Creates a DateTime object from format DD/MM/YYYY TTTT, where time T follows the 24-hour format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @param dateTime the string in specified format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     * @return the DateTime instance."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public static DateTime of(String dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] dateTimeArgs \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        // enforced format: 2/12/2019 1800"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        if (dateTimeArgs.length !\u003d 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || dateTimeArgs[0].split(\"/\").length !\u003d 3"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || Integer.valueOf(dateTimeArgs[1]) \u003c 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                || Integer.valueOf(dateTimeArgs[1]) \u003e 2400) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            throw new DukeUnknownInputException(\"Incorrect deadline String format passed :(\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        int[] dayMonthYear \u003d Arrays"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .stream(dateTimeArgs[0].split(\"/\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .mapToInt(Integer::parseInt)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                .toArray();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        int time \u003d Integer.parseInt(dateTimeArgs[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return new DateTime(dayMonthYear[2], Month.of(dayMonthYear[1]), dayMonthYear[0], time / 100, time % 100, 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        return dateTime.format(RFC_1123_DATE_TIME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 52
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static duke.task.TaskType.DEADLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        String[] args \u003d {\"live\", \"/by\", \"2/12/2019\", \"1800\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        AddCommand command \u003d new AddCommand(DEADLINE, args, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertArrayEquals("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                command.getArgs(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "                ((AddCommand) Parser.parse(\"deadline live /by 2/12/2019 1800\")).getArgs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 24
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void getDeadline() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"live\", \"2/12/2019 1800\", false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(\"2/12/2019 1800\", deadline.getDeadline());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void toString1() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"live\", \"2/12/2019 1800\", false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(\"[D][X] live (by: Mon, 2 Dec 2019 18:00:00 GMT)\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 20
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void getPeriod() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Event event \u003d new Event(\"clean house\", \"2/12/2019 1800\", false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(\"2/12/2019 1800\", event.getPeriod());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void toString1() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Event event \u003d new Event(\"clean house\", \"2/12/2019 1800\", false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(\"[E][X] clean house (at: 2/12/2019 1800)\", event.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 20
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    void toString1() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        Todo todo \u003d new Todo(\"clean house\", false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "        assertEquals(\"[T][X] clean house\", todo.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 14
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tHello! I\u0027m duke.Duke. What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tGot it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[T][X] borrow book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNow you have 1 duke.task in the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tGot it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[D][X] return book (by: Sunday)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tGot it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[E][X] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNow you have 3 tasks in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t1. [T][X] borrow book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t2. [D][X] return book (by: Sunday)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t3. [E][X] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t:\u0027( OOPS!!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t:\u0027( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNice! I\u0027ve marked this duke.task as done:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[T][O] borrow book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNice! I\u0027ve marked this duke.task as done:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[D][O] return book (by: Sunday)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNoted. I\u0027ve removed this duke.task:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t[D][O] return book (by: Sunday)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t1. [T][O] borrow book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t2. [E][X] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\tBye. Hope to see you again soon!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "\t____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 49
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "todo"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "blah"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "if not exist ..\\out mkdir ..\\out"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM compile the code into the out folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\out ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "   echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "   exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "java -classpath ..\\out main/java/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KendrickAng"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "KendrickAng": 21
    }
  }
]
