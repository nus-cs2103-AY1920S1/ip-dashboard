[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            srcDir \u0027src\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            srcDir \u0027test\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "run {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Launcher\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "test {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    version \u003d \"12\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 46,
      "-": 13
    }
  },
  {
    "path": "checkstyle.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "./gradlew checkstyleMain checkstyleTest"
      }
    ],
    "authorContributionMap": {
      "jascxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Text dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Flips the dialog box such that the {@code ImageView} is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        dialog.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns a {@code DialogBox} for the User"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param text The text."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param img The image."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The {@code DialogBox}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        DialogBox db \u003d  new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns a {@code DialogBox} for the Duke"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param text The text."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param img The image."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The {@code DialogBox}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Main class of Duke application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String DATA_PATH \u003d \"./duke_data.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        storage \u003d new Storage(DATA_PATH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        parser \u003d new Parser(storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the response from the parser."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param input The input from the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Command command \u003d parser.parse(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (command.isExitCommand()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                exit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return command.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        new Timer().schedule("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new TimerTask() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        System.exit(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                250"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 55,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS); // make scroll bar always visible"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Creates two {@code DialogBox}s, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (response \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // no response"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 59
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.SortCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.TodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Parses string commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String SORT_COMMAND \u003d \"sort\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Parser(Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        taskList.addAll(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parse an input to a {@code Command}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param input The user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String[] strs \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String command \u003d strs[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String arg \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (strs.length \u003e 1) { // there are more words"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            arg \u003d strs[1].trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case TODO_COMMAND:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new TodoCommand(arg, taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case DEADLINE_COMMAND:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new DeadlineCommand(arg, taskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case EVENT_COMMAND:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new EventCommand(arg, taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case BYE_COMMAND:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case LIST_COMMAND:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new ListCommand(taskList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case DONE_COMMAND:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new DoneCommand(arg, taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case DELETE_COMMAND:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new DeleteCommand(arg, taskList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case FIND_COMMAND:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new FindCommand(arg, taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case SORT_COMMAND:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new SortCommand(arg, taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Handles storage related functions, e.g. loads data from disk and saves data to disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Loads the data in the file path and returns the corresponding list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            String data \u003d Files.readString(Path.of(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Scanner sc \u003d new Scanner(data);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                list.add(Task.parse(sc.nextLine()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // no such file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Saves the list to the current directory."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param list The list to be saved."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void save(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(task.getStringRepresentation());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String text \u003d sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        BufferedWriter output \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                boolean created \u003d file.createNewFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            output \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            output.write(text);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            output.flush();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 71
    }
  },
  {
    "path": "src/main/java/seedu/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a list of tasks. Every time the data is changed, the new data will be saved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param storage To save the data everytime a change happens. {@code null} if not associated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *                to any {@code storage}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean add(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        boolean added \u003d super.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (storage !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            storage.save(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return added;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Task removed \u003d super.remove(index - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (storage !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            storage.save(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return removed;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return super.get(index - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void sort(Comparator\u003c? super Task\u003e c) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super.sort(c);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        storage.save(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Notifies the change of the tasks such that the tasks can be saved."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void notifyChange() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        storage.save(this);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size(); ++i) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            String info \u003d i + \". \" + get(i) + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(info);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getListSizeMsg() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return \"Now you have \" + size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getAddedMsg(Task task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String taskString \u003d \"  \" + task + \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + taskString"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + getListSizeMsg();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 81
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(null, null);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return \"Bye...\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    protected String arg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Command(String arg, TaskList taskList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.arg \u003d arg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Executes this command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The response."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public abstract String execute() throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.EmptyDeadlineArgException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.EmptyDeadlineDescException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public DeadlineCommand(String arg, TaskList taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(arg, taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return addDeadline(arg);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds a Deadline to the list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param desc The description of the Deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The response."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws DukeException If {@code desc} is empty, or does not contain the second argument separated by"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *         the regex \"/by\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String addDeadline(String desc) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert desc !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (desc.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                throw new EmptyDeadlineDescException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            String[] strs \u003d desc.split(Deadline.REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Task task \u003d new Deadline(strs[0], strs[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return taskList.getAddedMsg(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new EmptyDeadlineArgException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.ArgumentNotNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.TaskNotSpecifiedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public DeleteCommand(String arg, TaskList taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(arg, taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return delete(arg);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Deletes a task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param s The index of the task to be deleted, represented as a String."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The response."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws DukeException If {@code s} cannot be parsed to an Integer, or if the integer as an index is not"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *         within the {@code TaskList} bound."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String delete(String s) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert s !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (s.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                throw new TaskNotSpecifiedException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            int i \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            taskList.remove(i);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(\"Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            String taskString \u003d \"  \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(taskString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(taskList.getListSizeMsg());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new ArgumentNotNumberException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new TaskDoesNotExistException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 48
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.ArgumentNotNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.TaskNotSpecifiedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public DoneCommand(String arg, TaskList taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(arg, taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return done(arg);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param s The index of the task to be marked as done, represented as a String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The response."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws DukeException If {@code s} cannot be parsed to an Integer, or if the integer as an index is not"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *         within the {@code TaskList} bound."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String done(String s) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert s !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (s.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                throw new TaskNotSpecifiedException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            int i \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            taskList.notifyChange();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            String taskString \u003d \"  \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(taskString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new ArgumentNotNumberException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new TaskDoesNotExistException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.EmptyEventArgException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.EmptyEventDescException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public EventCommand(String arg, TaskList taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(arg, taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return addEvent(arg);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds an Event to the list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param desc The description of the Deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The response."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws DukeException If {@code desc} is empty, or does not contain the second argument separated by"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *         the regex \"/at\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String addEvent(String desc) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert desc !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (desc.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                throw new EmptyEventDescException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            String[] strs \u003d desc.split(Event.REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Task task \u003d new Event(strs[0], strs[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return taskList.getAddedMsg(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new EmptyEventArgException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.EmptyFindArgException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public FindCommand(String arg, TaskList taskList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(arg, taskList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return find(arg, taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Finds and lists the tasks containing {@code keyword}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param keyword The keyword to find."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The response."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    String find(String keyword, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert keyword !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new EmptyFindArgException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cTask\u003e list \u003d taskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .filter(x -\u003e x.getDescription().contains(keyword))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        TaskList matchTaskList \u003d new TaskList(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        matchTaskList.addAll(list);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                matchTaskList.toString() + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ListCommand(TaskList taskList) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(null, taskList);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return list();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Lists all the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String list() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return \"Here are the tasks in your list:\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                taskList.toString() + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.InvalidSortFlagException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public SortCommand(String arg, TaskList taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(arg, taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sort(arg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Sorts the {@code taskList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param arg The flags."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The response."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String sort(String arg) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String[] strs \u003d arg.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (strs.length \u003e 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new InvalidSortFlagException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Optional\u003cSortFlag\u003e sortFlag \u003d Stream.of(SortFlag.values()).filter(x -\u003e x.flag.equals(arg)).findFirst();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (sortFlag.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // no match with any flags"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new InvalidSortFlagException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        taskList.sort(sortFlag.get().getComparator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return \"I have sorted your tasks!\\n\" + taskList.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static String getModes() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Stream.of(SortFlag.values()).map(x -\u003e x.flag).collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The possible sorting modes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    enum SortFlag {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CHRONO(\"chrono\", (x, y) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (x.getDate() !\u003d null \u0026\u0026 y.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return x.getDate().compareTo(y.getDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else if (x.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else if (y.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        LEXI(\"lexi\", (x, y) -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return x.getDescription().compareTo(y.getDescription());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        DONE(\"done\", (x, y) -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "           if (x.isDone() \u0026\u0026 !y.isDone()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               return 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "           } else if (!x.isDone() \u0026\u0026 y.isDone()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               return -1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "           } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               return 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "           }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        DEADLINE(\"deadline\", (x, y) -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (x instanceof Deadline \u0026\u0026 y instanceof Deadline) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return x.getDate().compareTo(y.getDate());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else if (x instanceof Deadline) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else if (y instanceof Deadline) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EVENT(\"event\", (x, y) -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (x instanceof Event \u0026\u0026 y instanceof Event) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return x.getDate().compareTo(y.getDate());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else if (x instanceof Event) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else if (y instanceof Event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        TODO(\"todo\", (x, y) -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (x instanceof Todo \u0026\u0026 !(y instanceof Todo)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            else if (y instanceof Todo \u0026\u0026 !(x instanceof Todo)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private String flag;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private Comparator\u003cTask\u003e comparator;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        SortFlag(String flag, Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.flag \u003d flag;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public String getFlag() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return flag;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public Comparator\u003cTask\u003e getComparator() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return comparator;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 127
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.EmptyTodoDescException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public TodoCommand(String arg, TaskList taskList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(arg, taskList);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return addTodo(arg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds a Todo to the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param desc The description of the todo"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The response."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws DukeException If {@code desc} is empty."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String addTodo(String desc) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert desc !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (desc.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new EmptyTodoDescException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Task task \u003d new Todo(desc);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return taskList.getAddedMsg(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/ArgumentNotNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class ArgumentNotNumberException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ArgumentNotNumberException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"Argument must be a number.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DateParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class DateParseException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public DateParseException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"Your date format is wrong. It must be in the form of dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Parent class for all Duke related exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    DukeException(String desc) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyDeadlineArgException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class EmptyDeadlineArgException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public EmptyDeadlineArgException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"The time of an deadline cannot be empty, e.g. deadline do homework /by 12/12/2010 1230\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyDeadlineDescException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class EmptyDeadlineDescException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public EmptyDeadlineDescException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyEventArgException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class EmptyEventArgException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public EmptyEventArgException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"The time of an event cannot be empty, e.g. event play tennis /at 12/06/2021 2000\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyEventDescException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class EmptyEventDescException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public EmptyEventDescException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyFindArgException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class EmptyFindArgException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public EmptyFindArgException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"The keyword to find cannot be empty, e.g. find swim\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyTodoDescException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class EmptyTodoDescException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public EmptyTodoDescException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidSortFlagException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.commands.SortCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class InvalidSortFlagException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public InvalidSortFlagException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"Sort command should be in the form of \u0027sort FLAG\u0027.\\nAvailable flags: \" + SortCommand.getModes());"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/TaskDoesNotExistException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class TaskDoesNotExistException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public TaskDoesNotExistException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"Task does not exist.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/TaskNotSpecifiedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class TaskNotSpecifiedException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public TaskNotSpecifiedException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"Which task is it?\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"What are you even saying?\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DateParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String REGEX \u003d \"/by\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String INITIAL \u003d \"D\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param desc The description of the deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param by The date of the deadline as a string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws DateParseException If {@code by} cannot be parsed to a {@code Date}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Deadline(String desc, String by) throws DateParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(desc.trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.by \u003d INPUT_DATE_FORMAT.parse(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new DateParseException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    String getInitial() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return INITIAL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    String getDatePrefix() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return \"by: \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DateParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents an event task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String REGEX \u003d \"/at\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String INITIAL \u003d \"E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Date at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param desc The description of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param at The date of the event as a string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws DateParseException If {@code at} cannot be parsed to a {@code Date}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Event(String desc, String at) throws DateParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(desc.trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.at \u003d INPUT_DATE_FORMAT.parse(at);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new DateParseException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    String getInitial() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return INITIAL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    String getDatePrefix() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return \"at: \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String DELIMITER \u003d \" ` \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final SimpleDateFormat INPUT_DATE_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final SimpleDateFormat OUTPUT_DATE_FORMAT \u003d new SimpleDateFormat(\"dd MMMM yyyy hh:mma\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parses and returns the object representation of {@code str}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param str The string to be parsed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The corresponding task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws DukeException If the initial does not match any {@code Task}\u0027s subclasses\u0027 initials."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Task parse(String str) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String[] data \u003d str.split(DELIMITER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String type \u003d data[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        boolean isDone \u003d Integer.parseInt(data[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String desc \u003d data[2];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case Todo.INITIAL:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            task \u003d new Todo(desc);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case Deadline.INITIAL:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            task \u003d new Deadline(desc, data[3]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case Event.INITIAL:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            task \u003d new Event(desc, data[3]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalArgumentException(\"Initial does not match any known initials\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns a unique initial of the subtype of {@code Task}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The initial."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    abstract String getInitial();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns a date associated to the task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The associated date if applicable, null otherwise."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the prefix that describes the date, e.g. \"by: \", \"at: \"."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The prefix if applicable, null otherwise"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    String getDatePrefix() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The description."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the status icon that describes {@code isDone}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The status icon."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the string representation of this task to be saved to the disk."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return The string representation."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getStringRepresentation() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        sb.append(getInitial());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        sb.append(DELIMITER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        sb.append(isDone ? 1 : 0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        sb.append(DELIMITER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (getDate() !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(DELIMITER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(INPUT_DATE_FORMAT.format(getDate()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return \"[\" + getInitial() + \"]\" + \"[\" + getStatusIcon() + \"] \" + description + \" \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + (getDate() \u003d\u003d null ? \"\" : \"(\" + getDatePrefix() + OUTPUT_DATE_FORMAT.format(getDate()) + \")\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 130
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String INITIAL \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Todo(String desc) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(desc.trim());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    String getInitial() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return INITIAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 17
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" pickOnBounds\u003d\"false\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cText fx:id\u003d\"dialog\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text Text \" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"260.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003ccursor\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/cursor\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003ccursor\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/cursor\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003ccursor\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cCursor fx:constant\u003d\"SW_RESIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/cursor\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cInsets bottom\u003d\"4.0\" left\u003d\"4.0\" right\u003d\"4.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jascxx": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jascxx": 19
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 4
    }
  }
]
