[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 1,
      "-": 15
    }
  },
  {
    "path": "data/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "D-1-fgepwfnwp-26/07/1900 1000"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Creates a Deadline object which extends from the Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * A \u003ccode\u003edescription\u003c/code\u003e is passed into this class to"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * instantiate a Deadline task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String[] deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String[] datetime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Events object by passing a String of description and time"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param by The date and time of the deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Deadline(String description, String by) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        deadline \u003d by.split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.datetime \u003d deadline[1].split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Get the date from a numeric format eg. (23/05/2019) and convert it"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * into words (23rd of May 2019)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return a String consisting the date in wording format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String getDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String[] splitDates \u003d this.datetime[0].split(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String day \u003d splitDates[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String month \u003d splitDates[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String year \u003d splitDates[2];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String editedDay; //String to store the day from numerical to words"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String editedMonth; //String to store the month from numerical to words"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (day.equals(\"1\") || day.equals(\"01\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"1st\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"2\") || day.equals(\"02\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"2nd\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"3\") || day.equals(\"03\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"3rd\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"21\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"21st\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"22\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"22nd\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"23\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"23rd\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"31\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"31st\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d day + \"th\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"01\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"January\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"02\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"Febuary\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"3\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"03\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"March\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"4\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"04\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"April\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"5\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"05\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"May\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"6\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"06\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"June\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"7\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"07\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"July\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"8\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"08\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"August\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"9\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"09\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"September\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"10\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"October\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"11\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"November\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"12\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"December\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"Invalid\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return editedDay + \" of \" + editedMonth + \" \" + year;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Get the time format from 24Hr eg.(2300) to a 12Hr HH:MM format"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * eg.(11.00pm)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Time in 12Hr HH:MM format."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String getTime() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String time \u003d this.datetime[1];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String timeStr;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        int timeInt \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        int hours \u003d timeInt/100;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        int minutes \u003d timeInt % 100;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (hours \u003e\u003d 12) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            timeStr \u003d Integer.toString(hours - 12) + \".\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    + String.format(\"%02d\", minutes) + \"pm\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (hours \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            timeStr \u003d \"12.\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    + String.format(\"%02d\", minutes) + \"am\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            timeStr \u003d Integer.toString(hours) + \".\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    + String.format(\"%02d\", minutes) + \"am\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return timeStr;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String formatString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"D-\" + super.checkStatus() + \"-\" + super.getDescription().trim() + \"-\" + this.deadline[1];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"[D]\" + super.toString() +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \"(by: \" + this.getDate() + \", \" + this.getTime() + \")\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 157
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * The main class for managing all the java files."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Duke object when a directory parameter is passed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * into it. Will also instantiate the Ui, Storage and TaskList objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param filePath the directory for the designated path to store the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Duke (String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Run the application Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        parser \u003d new Parser(tasks, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String command \u003d ui.enterCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                storage.save(parser.retrieveTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                parser.parse(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Passed in the file path for the .txt file to instantiate the Duke object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        new Duke(\"/Users/kchensheng/Documents/NUS/Y2\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \"/Sem1/CS2103/kwan_chen_sheng_duke/data/data.txt\").run();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 52,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * This exception is used when there is an empty file"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * in the save .txt file. If there are no tasks in the save file,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * it will print an error message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * An DukeException object will be instantiated and will be thrown to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Duke main class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param errormessage a String to display the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + this.errorMessage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n____________________________________________________________\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 24
    }
  },
  {
    "path": "src/main/java/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Creates a Events object which extends from the Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * A \u003ccode\u003edescription\u003c/code\u003e is passed into this class to"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * instantiate a Events task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String event[];"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String[] datetime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Events object by passing a String of description and time"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param at The date and time of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Events(String description, String at) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        event \u003d at.split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.datetime \u003d event[1].split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Get the date from a numeric format eg. (23/05/2019) and convert it"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * into words (23rd of May 2019)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return a String consisting the date in wording format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String[] splitDates \u003d this.datetime[0].split(\"/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String day \u003d splitDates[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String month \u003d splitDates[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String year \u003d splitDates[2];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String editedDay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String editedMonth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (day.equals(\"1\") || day.equals(\"01\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"1st\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"2\") || day.equals(\"02\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"2nd\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"3\") || day.equals(\"03\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"3rd\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"21\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"21st\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"22\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"22nd\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"23\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"23rd\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"31\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"31st\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d day + \"th\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"01\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"January\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"02\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"Febuary\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"3\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"03\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"March\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"4\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"04\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"April\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"5\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"05\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"May\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"6\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"06\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"June\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"7\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"07\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"July\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"8\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"08\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"August\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"9\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"09\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"September\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"10\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"October\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"11\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"November\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            case \"12\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"December\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                editedMonth \u003d \"Invalid\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return editedDay + \" of \" + editedMonth + \" \" + year;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Get the time format from 24Hr eg.(2300) to a 12Hr HH:MM format"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * eg.(11.00pm)."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Time in 12Hr HH:MM format."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String getTime() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String time \u003d this.datetime[1];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String timeStr;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        int timeInt \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        int hours \u003d timeInt/100;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        int minutes \u003d timeInt % 100;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (hours \u003e\u003d 12) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            timeStr \u003d Integer.toString(hours - 12) + \".\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    + String.format(\"%02d\", minutes) + \"pm\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (hours \u003d\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            timeStr \u003d \"12.\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    + String.format(\"%02d\", minutes) + \"am\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            timeStr \u003d Integer.toString(hours) + \".\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    + String.format(\"%02d\", minutes) + \"am\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return timeStr;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String formatString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"E-\" + super.checkStatus() + \"-\" + super.getDescription().trim() + \"-\" + this.event[1];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"[E]\" + super.toString() +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                \"(at: \" + this.getDate() + \", \" + this.getTime() + \")\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 158
    }
  },
  {
    "path": "src/main/java/IllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * This exception is used when User enters an invalid command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class IllegalCommandException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * An IllegalCommandException is instantiated when an error message"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * parameter is being passed through."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param errorMessage a String to display the error."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected IllegalCommandException (String errorMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" OOPS!!! \" + this.errorMessage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n____________________________________________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 22
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * This class is created to make sense of the User commands and input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TaskList tasksList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Parser class is instantiated by passing TaskList and Ui class parameters."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param tasksList TaskList class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param ui Ui class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Parser(TaskList tasksList, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.tasksList \u003d tasksList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Making sense of the User\u0027s input, and to throw an IllegalCommandException when User enter an invalid"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param command Inputs of the User."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void parse(String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (command.contains(\"todo\") || command.contains(\"deadline\") || command.contains(\"event\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                this.tasksList.addTask(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                ui.getAddedMessage(this.tasksList.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (command.contains(\"delete\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                String deletedTask \u003d this.tasksList.deleteTask(command); // retrieve the deleted task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                ui.getDeletedMessage(this.tasksList.getTaskList(), deletedTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (command.contains(\"done\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                String taskDoneStr \u003d this.tasksList.doneTask(command);  // retrieve the task that is done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                ui.getDoneMessage(taskDoneStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (command.contains(\"list\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                ui.showList(this.tasksList.getTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (command.contains(\"find\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                ArrayList\u003cTask\u003e foundTask \u003d this.tasksList.findTasks(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                ui.showFoundMessage(foundTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                throw new IllegalCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (IllegalCommandException errorMsg) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            ui.getIllegalCommandError(errorMsg);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * To retrieve the taskList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return The stored taskList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e retrieveTasks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.tasksList.getTaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 56
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Store the tasks list into a .txt file after User exits the Duke application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * It also loads up the tasks list from the selected .txt file when User starts up"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * the Duke application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Load the file contents of the .txt file and to input the saved tasks into"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * an Arraylist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param filePath Directory of the .txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param storingList An Arraylist to store the tasks in the .txt save file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws FileNotFoundException if there are no .txt file found in the directory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws DukeException if the .txt file is an empty file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static void loadFileContents(String filePath, ArrayList\u003cTask\u003e storingList)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (f.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new DukeException(\"No listings found!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String currentLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitCurrentLine \u003d currentLine.split(\"-\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (splitCurrentLine[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                storingList.add(new Deadline(splitCurrentLine[2],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                        \"by \" + splitCurrentLine[3]));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                storingList.get(storingList.size()-1).recoverStatus(splitCurrentLine[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (splitCurrentLine[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                storingList.add(new Events(splitCurrentLine[2],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                        \"at \" + splitCurrentLine[3]));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                storingList.get(storingList.size()-1).recoverStatus(splitCurrentLine[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (splitCurrentLine[0].equals(\"T\"))  {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                storingList.add(new ToDos(splitCurrentLine[2]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                storingList.get(storingList.size()-1).recoverStatus(splitCurrentLine[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Save the tasks into the .txt file allocated in the directory."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param filepath Directory for the .txt file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList Arraylist of tasks that the User inputs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IOException if there is an error of copying the list to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static void WriteTextToFile(String filepath, ArrayList\u003cTask\u003e taskList)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        FileWriter fileOut \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                fileOut.write(taskList.get(i).formatString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                fileOut.write(taskList.get(i).formatString() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            fileOut.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Storage object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param filepath the directory for the allocated .txt file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Storage(String filepath) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to save the tasks that is being keyed in by the User"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList the list of tasks User inputs"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void save(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                Storage.WriteTextToFile(this.filepath, taskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            System.err.println(\"Something went wrong!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to load the .txt file and to store the tasks into"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * an ArrayList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return the Arraylist of tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws DukeException if there are no tasks found in the .txt file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            Storage.loadFileContents(this.filepath, this.taskList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            System.err.println(\"No file found, creating new file\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            File file \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 104
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * An abstract class to instantiate all the Task objects."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Boolean isdone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Task object is instantiated when User enters the description of task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param description Description of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Task (String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.isdone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * For other classes to retrieve the description information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * For other classes to retrieve the status of task whether if its"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * completed or not."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Status of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return (isdone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to check the status when saving the tasks into the .txt file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Status of task, \"1\" means its done and \"0\" means its yet to be completed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String checkStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (isdone \u003d\u003d true) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return \"1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to revert the numerical status back to the boolean."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param status The number \"1\" or \"0\"."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void recoverStatus(String status) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            isdone \u003d true ;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            isdone \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A flag to toggle when a task is done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void markAsDone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        isdone \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Format the String into a save file format."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Formatted String for the .txt file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public abstract String formatString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 76
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * TaskList is a class to process all the commands and adds them into"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * the tasklist. It is to split the Strings and allocate them accordingly"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * to the different Task classes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate the TaskList class by passing an Arraylist as a parameter."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList A list to store all the tasks written by the User."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate the TaskList class when there are no existing tasks in the .txt file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A new Arraylist is created to store the tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Add tasks to the tasks list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param command The description of task and date/time(if applicable) from the User"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IllegalCommandException If the User inputs a wrong/invalid command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void addTask(String command) throws IllegalCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (!command.contains(\" \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new IllegalCommandException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (command.contains(\"todo\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskList.add(new ToDos(splitCommand[1]));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (command.contains(\"event\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitEvent \u003d (splitCommand[1].split(\"/\", 2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskList.add(new Events(splitEvent[0], splitEvent[1]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitDeadline \u003d (splitCommand[1].split(\"/\", 2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskList.add(new Deadline(splitDeadline[0], splitDeadline[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Delete the task that the User inputs in number. Eg. (User types \"delete 3\" means to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * delete the task 3 from the tasks list)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param command The command delete and the number of the task User wants to delete"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return the updated tasks list after deletion"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IllegalCommandException if User did not enter a number after delete or invalid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String deleteTask(String command) throws IllegalCommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (!command.contains(\" \")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new IllegalCommandException(\"Give a task to delete.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else  {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            int taskDelete \u003d Integer.valueOf(splitCommand[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String deleted \u003d taskList.get(taskDelete - 1).getDescription();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskList.remove(taskDelete-1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return deleted;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Set the status of the selected task to be done. Eg. (User inputs \"done 3\" means User"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * wants to indicate that task 3 in the list is completed)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param command The command done and the number of the task User set as done."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Updated tasks list with the selected task being marked done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IllegalCommandException if User did not enter a number after delete or invalid"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String doneTask(String command) throws IllegalCommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (!command.contains(\" \")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new IllegalCommandException(\"There must be a number after done.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitString \u003d command.split(\" \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            int taskDone \u003d Integer.valueOf(splitString[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskList.get(taskDone - 1).markAsDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return taskList.get(taskDone - 1).getDescription();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Other classes can retrieve the tasks list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return The tasks list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e findTasks(String command) throws IllegalCommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (!command.contains(\" \")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new IllegalCommandException(\"There must be an input to find.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitString \u003d command.split(\" \",  2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                if (task.toString().contains(splitString[1])) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    foundTasks.add(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return foundTasks;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 111
    }
  },
  {
    "path": "src/main/java/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Creates a ToDos object which extends from the Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * A \u003ccode\u003edescription\u003c/code\u003e is passed into this class to"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * instantiate a todos task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a ToDos object by passing a String of description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param description Description of the todos task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ToDos (String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String formatString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"T-\" + super.checkStatus().trim() + \"-\" + super.getDescription();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 25
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * This class is responsible of taking in User inputs and to display information"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * after the User\u0027s command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Ui object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display a welcome message for the User."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String logo \u003d \"  ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String welcome \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + logo"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" What can I do for you?\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.out.println(welcome);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Prompt the user to enter command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return the Users command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String enterCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display the list of tasks to the User."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList The tasks list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void showList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int x \u003d 0; x \u003c taskList.size(); x++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            System.out.println(x + 1 + \". \" + taskList.get(x));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display the error when there is an empty .txt file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void showLoadingError(DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.err.println(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display message when a task is added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList The tasks list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void getAddedMessage(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" Got it. I\u0027ve added this task:\\n\" + \"   \" + taskList.get(taskList.size()-1)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n Now you have \" + taskList.size() + \" tasks in the list.\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n____________________________________________________________\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display message when a task is deleted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList The tasks list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param deleted The task deleted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void getDeletedMessage(ArrayList\u003cTask\u003e taskList, String deleted) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"  \" + deleted + \"Now you have \" + taskList.size()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" tasks in the list \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n____________________________________________________________\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display message and also the change in status icon to show the task is done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskDoneStr String of the task done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void getDoneMessage(String taskDoneStr) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" Nice! I\u0027ve marked this tasked as done:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + taskDoneStr"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n____________________________________________________________\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display a goodbye message when User exits the Duke application."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void getByeMessage() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" Bye. Hope to see you again soon!\\n\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display the error message to User when User inputs an invalid command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param errorMsg"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void getIllegalCommandError(IllegalCommandException errorMsg) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.err.println(errorMsg);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void showFoundMessage(ArrayList\u003cTask\u003e foundTasklist) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int x \u003d 0; x \u003c foundTasklist.size(); x++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            System.out.println(x + 1 + \". \" + foundTasklist.get(x));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 126
    }
  },
  {
    "path": "src/test/java/EventsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class EventsTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void EventTestOutput(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        assertEquals(\"[E][\\u2718] CS2103 project meet(at: 23rd of April 2019, 3.00pm)\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new Events(\"CS2103 project meet\", \"at 23/04/2019 1500\").toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 11
    }
  },
  {
    "path": "src/test/java/ToDosTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class ToDosTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void ToDosTestFormatstringOutput() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        assertEquals(\"T-0-submit 2103 assignment\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new ToDos(\"submit 2103 assignment\").formatString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 12
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "  ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "deadline return book /by Sunday"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "java -classpath ../src/main/java Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 34
    }
  }
]
