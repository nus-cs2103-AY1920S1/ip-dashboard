[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Deadline with the given description and due date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param by                Due date for the Deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Deadline(String description, String by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        parse(by);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the due date of the current deadline to the date represented in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * given String. If the input format is invalid, due date is set to the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * current instant."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param date  Valid date string, as specified in DukeFormatter.DATE_FORMATS."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void parse(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (SimpleDateFormat format : DukeFormatter.DATE_FORMATS) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (by !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                by \u003d format.parse(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                // do nothing and try the next format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (by \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            by \u003d new Date();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Deadline with the given description, due date and status."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param by                Due date for the Deadline."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone            Whether the Deadline is completed or not."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        parse(by);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the letter \"D\", representing the type Deadline."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  \"D\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    String getType() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a representation of the current Deadline, including its due"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * date or time, in an appropriate format for data storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String representing the current Deadline."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    String formatAsData() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return super.formatAsData() + \" | \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + String.format(\"%1$ta, %1$td %1$tb %1$ty, %1$tR\", by);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, description,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and deadline."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String describing the Deadline."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + String.format(\"%1$ta, %1$td %1$tb %1$ty, %1$tR\", by) + \")\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 82
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static DukeLogic dukeLogic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Initialises and runs the application."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static void start() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        dukeLogic \u003d new DukeLogic();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        dukeLogic.runApplication();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Starts the Duke application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param args  Standard arguments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Duke.start();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 15,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 5
    }
  },
  {
    "path": "src/main/java/DukeFileHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class DukeFileHandler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static File dataFile \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Reads tasks from a (valid) data file and adds them to the given list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Any existing tasks in the list are removed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param taskList          List of tasks to be filled."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    If lines cannot be read from the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    static void readTasksFromFile(List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String task \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String[] details \u003d task.split(\" \\\\| \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                boolean isDone \u003d details[1].equals(\"+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                if (details[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Todo(details[2], isDone));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                } else if (details[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Event(details[2], details[3], isDone));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                } else if (details[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Deadline(details[2], details[3], isDone));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    throw new DukeException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            \"I could not retrieve your previous tasks.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // do nothing. Duke continues with an empty list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Writes the tasks in the given list to an external data file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param taskList          List of tasks to be written."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws IOException      If file cannot be found, etc."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    static void writeToFile(List\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(dataFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fileWriter.append(task.formatAsData() + \"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 56
    }
  },
  {
    "path": "src/main/java/DukeFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class DukeFormatter {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * An array of date formats that Duke can parse. A valid date can take any"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * of the following formats:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 1. dd-MM-yyyy"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 2. hh:mm"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 3. dd-MM-yyyy hh:mm"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 4. EEE, dd MMM yy, hh:mm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    static final SimpleDateFormat[] DATE_FORMATS \u003d {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new SimpleDateFormat(\"EEE, dd MMM yy, hh:mm\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new SimpleDateFormat(\"dd-MM-yy hh:mm\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new SimpleDateFormat(\"dd-MM-yyyy\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new SimpleDateFormat(\"dd-MM-yy\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new SimpleDateFormat(\"hh:mm\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new SimpleDateFormat(\"EEE\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints a horizontal line of width 60 characters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static void printBorder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        System.out.println(INDENT + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the given text with indentation of five spaces."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text      Single line of text to be printed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static void print(String text) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        System.out.println(INDENT + \" \" + text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the given text with a horizontal line above and below the text"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and appropriate indentation."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text      Formatted text with appropriate line breaks. Maximum"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  width for each line is 58 characters."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    static void prettyPrint(String text) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String[] lines \u003d text.split(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            print(line);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the items in the given list with their corresponding index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * numbers. A horizontal line is printed above and below the list, and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * output is indented throughout."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param list      A List of Tasks to be printed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     // TODO: Wrap text for longer user input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     static void prettyPrint(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            print(i + \".\" + list.get(i - 1).toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints a welcome message that consists of the Duke logo and a greeting."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         prettyPrint(LOGO + \"\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                 + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                 + \"What can I do for you?\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints an apology followed by details of the given exception."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param exception     Exception that caused the error"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    static void printErrorMessage(Exception exception) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         prettyPrint(\"Sorry, \" + exception.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 95
    }
  },
  {
    "path": "src/main/java/DukeLogic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class DukeLogic {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Throws an exception if the given input does not have a valid format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Valid formats are: 1. \"list\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    2. \"done [taskIndex]\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    3. \"undo [taskIndex]\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    4. \"todo [description]\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    5. \"deadline [description] /by [time]\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    6. \"event [description] /at [time]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    7. \"delete [taskIndex]\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param input             Text input to be validated"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    An exception with a message describing Duke\u0027s"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                          response to the problem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (input.startsWith(\"done\") || input.startsWith(\"undo\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 6) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I couldn\u0027t find a task to look up.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 8) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I couldn\u0027t find a task to delete.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 6) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I can\u0027t see the description of your todo.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 7) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I need to know the event description.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else if (!input.contains(\" /at \")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I also need to know when your event is.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 10) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I didn\u0027t catch what you need to do.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else if (!input.contains(\" /by \")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"what\u0027s the deadline for this?\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (!input.equals(\"list\")){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"I don\u0027t know what that means... :(\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: Check \"event\" and \"deadline\" for valid date format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * If the input is \"list\", prints the full list of tasks. If the input is"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * \"done\" or \"undo\" followed by an integer, marks the task corresponding to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * the index integer as done or undone respectively. Otherwise, adds the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * given input to the list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param input     User text to be processed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void process(String input) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (input.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DukeFormatter.prettyPrint(\"You have no tasks now. Hooray!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DukeFormatter.prettyPrint(taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int taskIndex \u003d getTaskIndex(input.substring(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Task selectedTask \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            selectedTask.markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.prettyPrint(\"Nice! I\u0027ve marked this task as done:\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + selectedTask.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            save();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"undo\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int taskIndex \u003d getTaskIndex(input.substring(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Task selectedTask \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            selectedTask.markAsUndone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.prettyPrint(\"Oh dear. I\u0027ve marked this task as undone:\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + selectedTask.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            save();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int taskIndex \u003d getTaskIndex(input.substring(7));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Task deletedTask \u003d taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.prettyPrint(\"Noted. I\u0027ve removed this task:\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + deletedTask.toString()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            save();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            addNewTask(input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int numberOfTasks \u003d taskList.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.prettyPrint(\"Got it. I\u0027ve added this task:\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + taskList.get(numberOfTasks - 1)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\nNow you have \" + numberOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            save();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Saves the current task list in the file `[root]/data/duke.txt`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void save() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFileHandler.writeToFile(taskList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.prettyPrint("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    \"Oops! I encountered an error when saving your tasks.\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \"    \" + e.getMessage() + \"\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \"If you say bye now, you may not be able to access this\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \" list in future.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the taskList index of the task with the given number if such a"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * task exists, and throws an exception otherwise. Note that taskList is"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * zero-indexed, whereas the input number is one-indexed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param number            String containing a (possibly invalid) number"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return                  The requested task index"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    Exception message indicating task not found"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private int getTaskIndex(String number) throws DukeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (!isValid(taskIndex)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I couldn\u0027t find the task you requested!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return taskIndex - 1; // taskList is zero-indexed"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t find the task you requested!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if a task corresponding to the given index exists and"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * false otherwise."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param taskIndex     Task index to be validated"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return              True if the index is valid and false otherwise"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private boolean isValid(int taskIndex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return taskIndex \u003e\u003d 1 \u0026\u0026 taskIndex \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Add a new task to the list according to the given task type - Todo,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Event, or Deadline."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param task      Description of task and other relevant details."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void addNewTask(String task) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (task.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Todo(task.substring(5)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (task.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            String[] taskDetails \u003d task.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Event(taskDetails[0], taskDetails[1]));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (task.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            String[] taskDetails \u003d task.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Deadline(taskDetails[0], taskDetails[1]));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Todo(task));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Runs the main application by handling user input."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Duke begins by printing a welcome message. Subsequently, it repeatedly"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * scans for user input, then validates and processes it accordingly. The"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * function returns when the command to exit (\"bye\") is received."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     void runApplication() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DukeFormatter.printWelcomeMessage();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFileHandler.readTasksFromFile(taskList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.printErrorMessage(e);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        while (SCANNER.hasNext()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            String userInput \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            userInput \u003d userInput.strip();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (userInput.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // TODO: add alternative commands e.g. \"exit\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                validate(userInput);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                process(userInput);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DukeFormatter.printErrorMessage(e);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                // TODO: Add \"help\" feature: list all supported commands"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DukeFormatter.prettyPrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 194
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Date time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Event with the given description and timing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Description of Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param time              Timing of the Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Event(String description, String time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        parse(time);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the timing of the current event to the date represented in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * given String. If the input format is invalid, event time is set to the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * current instant."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param date  Valid date string, as specified in DukeFormatter.DATE_FORMATS."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void parse(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (SimpleDateFormat format : DukeFormatter.DATE_FORMATS) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (time !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                time \u003d format.parse(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                // do nothing and try the next format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            time \u003d new Date();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Event with the given description, timing and status."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Description of Event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param time              Timing of the Event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone            Whether the Event is done or not."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Event(String description, String time, boolean isDone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        parse(time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the letter \"E\", representing the type Event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  \"E\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    String getType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a representation of the current Event, including its time, in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * an appropriate format for data storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String representing the current Event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    String formatAsData() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return super.formatAsData() + \" | \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + String.format(\"%1$ta, %1$td %1$tb %1$ty, %1$tR\", time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, description,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and time."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String describing the Event."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + String.format(\"%1$ta, %1$td %1$tb %1$ty, %1$tR\", time) + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 81
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new undone Task with the given description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description   Description of the Task. Description length should"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                      be at most 50 characters (for now)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Task with the given description and isDone status."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description   Description of the Task. Description length should"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                      be at most 50 characters (for now)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a tick or X symbol according to the isDone status of the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * current task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  A tick symbol if the Task is done, and an X symbol otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return isDone ? \"+\" : \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // return isDone ? \"\\u2713\" : \"\\u2718\"; // return tick or X symbols"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a String of length 1 that indicates the current Task type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String indicating Task type"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    String getType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"-\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Indicates that the current Task has been completed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Indicates that the current Task has not been completed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void markAsUndone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a representation of the current Task in an appropriate"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * format for data storage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String representing the current Task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    String formatAsData() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return getType() + \" | \" + getStatusIcon() + \" | \" + description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the description of the Task along with an indication of its"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * isDone status."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String containing the status and description of the current"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *          Task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 75
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Todo task with the given description."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Todo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Todo task with the given description and status."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone            Whether the Task has been completed or not."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the letter \"T\", representing the type Todo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  \"T\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    String getType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String describing the Todo."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 37
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "undo 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dorcastan": 36
    }
  }
]
