[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "`A-TextUiTesting` | [Text ui Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "liawsy": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "run {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 28,
      "-": 14
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static boolean isDuke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static final Background DUKE_BACKGROUND \u003d new Background(new BackgroundFill(Color.rgb("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            237, 227, 255), CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static final Background USER_BACKGROUND \u003d new Background(new BackgroundFill(Color.rgb("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            203, 240, 255), CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private DialogBox(String text, Image img, boolean isDuke) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (isDuke) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            this.setBackground(DUKE_BACKGROUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            this.setBackground(USER_BACKGROUND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Gets the DialogBox for UI (User)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param text User input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param img Icon for user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return DialogBox with designated UI features."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        isDuke \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return new DialogBox(text, img, isDuke);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Gets the DialogBox for UI (Duke)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param text Duke output."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param img Icon for Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return DialogBox with designated UI features."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        isDuke \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        var db \u003d new DialogBox(text, img, isDuke);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 92
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import ui.MessageGenerator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private MessageGenerator greeter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String FILE_PATH \u003d \"files/tasks.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Reads file containing a list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Updates and changes this file according to user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        greeter \u003d new MessageGenerator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        ui \u003d new UI(FILE_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private void run() throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        greeter.greet();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        ui.processFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            ui.processInput();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            isExit \u003d ui.isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        greeter.bye();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    String greet() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return greeter.greet();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return ui.processInput(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static void main(String[] args) throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 46,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private boolean first \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private boolean first \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/grizz.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/panda.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Sets up dialogue box for welcome message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param d Duke object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DialogBox.getDukeDialog(d.greet(), dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * the dialog container."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            TimerTask exitGui \u003d new TimerTask() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            timer.schedule(exitGui, 500);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 72
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import ui.MessageGenerator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    MessageGenerator msg \u003d new MessageGenerator();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    String errorMessage \u003d \"OOPS!!! \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates Duke Exception for exceptions in programs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    DukeException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates DukeException that are related to tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param errorMessage takes in error message for printing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates String for error message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return error message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public abstract String getErrorMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 33
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates InvalidCommandException when commands that are not understood by program are given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.errorMessage +\u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates String for error message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return error message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msg.getLinedMessage(this.errorMessage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 21
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates InvalidInputException when an invalid input is given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * This exception is thrown when"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.errorMessage +\u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates String for error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return Error message processed from the {@link ui.MessageGenerator}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msg.getLinedMessage(errorMessage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 22
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidItemException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class InvalidItemException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates InvalidItemException when an invalid list item is given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public InvalidItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        errorMessage +\u003d \"This item does not exist on the list!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates String for error message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return      * @return error message processed from the {@link ui.MessageGenerator}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msg.getLinedMessage(errorMessage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 22
    }
  },
  {
    "path": "src/main/java/exceptions/MissingInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class MissingInputException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates MissingInputException when input is not complete for program to process."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param message String to be used for printing error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public MissingInputException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        errorMessage +\u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates String for error message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return error message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msg.getLinedMessage(errorMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 24
    }
  },
  {
    "path": "src/main/java/storage/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public CommandType type;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Constructor a Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type type of command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    Command(CommandType type) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Constructor a Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type type of command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param description description for task related to given command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    Command(CommandType type, String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.command \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Retrieves description of task given in command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String with task description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 37
    }
  },
  {
    "path": "src/main/java/storage/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": " * Documents types of commands available."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    EXIT, DELETE, DONE, PRINTLIST, ADD, FIND, INVALID, UPDATE, HELP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 8
    }
  },
  {
    "path": "src/main/java/storage/Formatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String SPACE_FORMATTER \u003d \"     \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates new Formatter used to format printing."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Formatter() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Adds 4 spaces for indentation for printing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param s String to be printed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String that has additional indentation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String format(String s) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return SPACE_FORMATTER + s;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Appends a variable number of strings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return Appended string with new line for each element (varargs version)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String appendStrings(String... strings) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        for (String string: strings) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (!string.equals(\"\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                s +\u003d format(string) + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Appends heading string with list and the respective number."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Used specifically for listing out tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param s Title string for list description."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param list List containing tasks in String form."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return Appended string with new line for each element."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String appendStrings(String s, List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String newString \u003d s + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        for (String string: list) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            newString +\u003d format(String.format(\"%d. %s\", count, string)) + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return newString;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 59
    }
  },
  {
    "path": "src/main/java/storage/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Task task \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static int count \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Constructor for a Parser object used to process input and strings."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Takes in line of information to process into commands for program to read."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param line task description or information needed for processing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return command used for updating tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws InvalidCommandException when program gives an invalid command type."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Command process(String line) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String[] commands \u003d line.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String first \u003d commands[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        switch (first) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new Command(CommandType.EXIT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new Command(CommandType.HELP);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new Command(CommandType.PRINTLIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new Command(CommandType.ADD, line);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new Command(CommandType.DONE, line);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new Command(CommandType.DELETE, line);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new Command(CommandType.FIND, line);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new Command(CommandType.UPDATE, line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return new Command(CommandType.INVALID);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Processes command to get information for update."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param command Command taken in for processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return Array of Strings containing the various segments of information required."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws MissingInputException when description for the update is incomplete."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws InvalidInputException when an invalid update type is included."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String[] getUpdateInfo(Command command) throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String desc \u003d command.getDescription();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String[] description \u003d desc.split(\" \\\\| \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (description.length \u003c\u003d 3) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new MissingInputException(\"Description for update is incomplete!\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    + \"Instruction should be in the form Update | [TaskNo] | [Type] | [Info]\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String updateType \u003d description[2];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        switch (updateType) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"desc\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            //allow cases to fall through"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            String[] info \u003d new String[3];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                info[i] \u003d description[i + 1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return info;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new InvalidInputException(\"This is not an update type.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                + \"An update type should be: \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                + \"desc, time or date.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Processes String to retrieve keyword for search."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param command command for finding matching tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return keyword for matching tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getKeyword(Command command) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String line \u003d command.getDescription();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String[] description \u003d line.split(\" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return description[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates task from given Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param command command for task to be created."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return task created from the command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws MissingInputException when command\u0027s description is incomplete."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws InvalidInputException when date/time description is not in given format."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Task createTask(Command command) throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String line \u003d command.getDescription();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String[] description \u003d line.split(\" \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String eventType \u003d description[0];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        count++;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assert count \u003e 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return createNewTask(count, eventType, description);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Processes command description for task number of related task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param command command for task to be marked as done/deleted."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return task number"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws MissingInputException when command\u0027s description is incomplete."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public int getTaskNo(Command command) throws MissingInputException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String line \u003d command.getDescription();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String[] description \u003d line.split(\" \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (description.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new MissingInputException(Task.MISSING_DESC_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return Integer.parseInt(description[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates task by processing information given for task."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Intermediate operation for Parser\u0027s createTask method."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param taskNo Task\u0027s number in the list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param taskType tasks of type Todo/Deadline/Event."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param arr String array that contains task description that has been processed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return Task created from given inputs."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws MissingInputException when description is incomplete."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    Task createNewTask(int taskNo, String taskType, String[] arr) throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        boolean firstInDescription \u003d true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String desc \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        DukeDate date \u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        DukeTime time \u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (firstInDescription) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                desc +\u003d arr[i];"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                firstInDescription \u003d false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            } else if (arr[i].startsWith(\"/\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                desc +\u003d \" \" + arr[i];"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (desc.equals(\"\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                throw new MissingInputException(Task.MISSING_DESC_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            task \u003d new Todo(taskNo, desc, \"T\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (arr.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                throw new MissingInputException(Task.MISSING_DATE_TIME_MESSAGE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            date \u003d DukeDate.processDate(arr[arr.length - 2]);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            time \u003d DukeTime.processTime(arr[arr.length - 1]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            task \u003d new Event(taskNo, desc, date, time, \"E\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (arr.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                throw new MissingInputException(Task.MISSING_DATE_TIME_MESSAGE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            date \u003d DukeDate.processDate(arr[arr.length - 2]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            time \u003d DukeTime.processTime(arr[arr.length - 1]);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            task \u003d new Deadline(taskNo, desc, date, time, \"D\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            assert false; //only three types of tasks should be created!"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 192
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Loads and writes into given file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param filePath String that indicates path to file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        file \u003d new File(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            System.out.println(\"File not found.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Loads tasks from file into the program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return TaskList that will be used in the program for further modifications by user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public TaskList loadTasks() throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                String task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                String[] details \u003d task.split(\" \\\\| \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                int num \u003d Integer.parseInt(details[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                boolean done;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                done \u003d (num \u003d\u003d 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DukeDate date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DukeTime time;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                switch (details[0]) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    tasks.loadTask(new Todo(counter, details[2], \"T\", done));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    date \u003d DukeDate.processDate(details[3].split(\" \")[0]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    time \u003d DukeTime.processTime(details[3].split(\" \")[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    tasks.loadTask(new Deadline(counter, details[2], date, time, \"D\", done));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    date \u003d DukeDate.processDate(details[3].split(\" \")[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    time \u003d DukeTime.processTime(details[3].split(\" \")[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    tasks.loadTask(new Event(counter, details[2], date, time, \"E\", done));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    throw new InvalidInputException(\"Task types should only be T, D, and E.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            System.out.println(\"file not detected\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Writes formatted task list into file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param tasks Task list that has been processed and updated."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void updateTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                if (task !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    fw.write(task.fileFormat() + System.lineSeparator());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            System.out.println(\"Something went wrong\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 104
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates Deadline (also a Task)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param num Number in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task String indicates description of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param date Date at which deadline occurs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param time Time at which deadline occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type String indicates task type, in this case \"D\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param done boolean indicates whether the task is done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Deadline(int num, String task, DukeDate date, DukeTime time,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                    String type, boolean done) throws MissingInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        super(num, task, date, time, type, done);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates Deadline (also a Task)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Done status is set as not done by default."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param num Number in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task String indicates description of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param date Date at which deadline occurs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param time Time at which deadline occurs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type String indicates task type, in this case \"D\"."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Deadline(int num, String task, DukeDate date, DukeTime time, String type) throws MissingInputException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        super(num, task, date, time, type);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats the deadline for printing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String in the form for printing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s %s)\", done ? \"Y\" : \"N\",task, date, time);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats the deadline for writing in the text file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String in the form writing in text file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String fileFormat() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return String.format(\"D | %s | %s | %s %s\", done ? \"1\" : \"0\", task, date, time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 56
    }
  },
  {
    "path": "src/main/java/task/DukeDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class DukeDate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static SimpleDateFormat dateFormat \u003d new SimpleDateFormat();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static SimpleDateFormat outputFormat \u003d new SimpleDateFormat(\"EEE, dd MMM YYYY\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String INVALID_DATE_MESSAGE \u003d \"Input is invalid!\\n Date should be in DD/MM/YYYY format.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Constructs a DukeDate object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param date {@link Date} object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public DukeDate(Date date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Calls constructor for a DukeDate object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param dateString User input String."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return DukeDate object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws InvalidInputException when date is not valid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws MissingInputException when date is not complete."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static DukeDate processDate(String dateString) throws InvalidInputException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        dateFormat.applyPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            date \u003d dateFormat.parse(dateString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (ParseException | DateTimeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new InvalidInputException(INVALID_DATE_MESSAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return new DukeDate(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats DukeDate object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return A string in the form Day, dd MMM YYYY format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return outputFormat.format(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 61
    }
  },
  {
    "path": "src/main/java/task/DukeTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class DukeTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static final String TIME_FORMAT_MESSAGE \u003d \"Time should be given in HHMM format from 0000 to 2359\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static SimpleDateFormat inputFormat \u003d new SimpleDateFormat();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static final SimpleDateFormat outputFormat \u003d new SimpleDateFormat(\"hh:mma\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Date time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Constructs a new DukeTime object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param time {@link Date} object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public DukeTime(Date time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Calls constructor for a DukeTime object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param timeString User input String."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return new {@DukeTime} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @throws InvalidInputException when time given is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static DukeTime processTime(String timeString) throws InvalidInputException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Date time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        inputFormat.applyPattern(\"HHmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        inputFormat.setLenient(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (timeString.length() \u003c\u003d 3) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new InvalidInputException(TIME_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            time \u003d inputFormat.parse(timeString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new InvalidInputException(TIME_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return new DukeTime(time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats DukeTime object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return A string in the form HH:MMa format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return outputFormat.format(time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 61
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates Events (also a Task)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param num Number in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task String indicates description of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param date Date at which deadline occurs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param time Time at which deadline occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type String indicates task type, in this case \"E\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param done boolean indicates whether the task is done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Event(int num, String task, DukeDate date, DukeTime time,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                 String type, boolean done) throws MissingInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        super(num, task, date, time, type, done);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates Events (also a Task)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Done status is set as not done by default."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param num Number in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task String indicates description of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param date Date at which deadline occurs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param time Time at which deadline occurs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type String indicates task type, in this case \"E\"."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Event(int num, String task, DukeDate date, DukeTime time, String type) throws MissingInputException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        super(num, task, date, time, type);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats the event for printing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String in the form for printing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s %s)\", done ? \"Y\" : \"N\",task, date, time);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats task to be written in given file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return formatted string for writing in file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String fileFormat() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return String.format(\"E | %s | %s | %s %s\", done ? \"1\" : \"0\", task, date, time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 55
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    boolean done;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private int no;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    String task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    DukeTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    DukeDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static String MISSING_DESC_ERROR_MESSAGE \u003d \"Task description is incomplete!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public static String MISSING_DATE_TIME_MESSAGE \u003d \"Task date/time is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates Task with an item number, task description, task type and done status."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param num Task number in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task Task description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type Task type (can be Todo, Event or Deadline)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param done Indicates whether task is done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    Task(int num, String task, String type, boolean done) throws MissingInputException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.no \u003d num;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (task.length() \u003c 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new MissingInputException(MISSING_DESC_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates Task with an item number, task description, task type and done status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Done status is set as not done by default."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param num Task number in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task Task description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type Task type (can be Todo, Event or Deadline)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    Task(int num, String task, String type) throws MissingInputException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.no \u003d num;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (task.length() \u003c 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new MissingInputException(MISSING_DESC_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    Task(int num, String task, DukeDate date, DukeTime time, String type, boolean done) throws MissingInputException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.no \u003d num;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (task.length() \u003c 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new MissingInputException(MISSING_DESC_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (date \u003d\u003d null || time \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new MissingInputException(MISSING_DATE_TIME_MESSAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    Task(int num, String task, DukeDate date, DukeTime time, String type) throws MissingInputException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.no \u003d num;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (task.length() \u003c 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new MissingInputException(MISSING_DESC_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (date \u003d\u003d null || time \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new MissingInputException(MISSING_DATE_TIME_MESSAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    void updateTaskDesc(String newDesc) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.task \u003d newDesc;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    void updateTaskDate(String dateString) throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.date \u003d DukeDate.processDate(dateString);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    void updateTaskTime(String timeString) throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.time \u003d DukeTime.processTime(timeString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    void setDone() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    String getTaskInfo() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats task to be written in given file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return formatted string for writing in file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public abstract String fileFormat();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 114
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidItemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import ui.MessageGenerator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    MessageGenerator msgGenerator \u003d new MessageGenerator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates task list and adds a placeholder value for easier tracking."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskList.add(null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private int noTasks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return taskList.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Adds task to task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Prints message when task is added via user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return program message when task is added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msgGenerator.getAddMessage(task, noTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Adds task to task List when task is loaded from the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task task loaded from the file that is to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void loadTask(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Removes task of given identification number from list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Prints message when task is removed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Method is only called when task is a valid number."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param taskNo identification number of task in list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return message to indicate task is removed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String removeTask(int taskNo) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        Task deleted \u003d taskList.get(taskNo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskList.remove(taskNo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        //assert !(taskList.contains(taskList.get(taskNo)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msgGenerator.getRemoveMessage(deleted, noTasks());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats task list into list of strings for printing/writing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param tasks List of Tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return List of Strings."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private List\u003cString\u003e listify(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (task !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                list.add(task.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns list of tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Prints list of tasks using the message generator."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String containing list of tasks in format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msgGenerator.getList(listify(this.taskList));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Checks if given task number exists in task list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param taskNo identification number for task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return whether or not task number exists."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private boolean invalidTaskNo(int taskNo) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return taskNo \u003e\u003d taskList.size();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Marks a task as done and returns the done message."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param taskNo identification number for task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return done message."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String setDone(int taskNo) throws InvalidItemException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (invalidTaskNo(taskNo)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new InvalidItemException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskList.get(taskNo).setDone();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msgGenerator.getDoneMessage(taskList.get(taskNo));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Deletes task with given identification number."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param taskNo identification number for task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String with delete message."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String deleteTask(int taskNo) throws InvalidItemException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (invalidTaskNo(taskNo)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new InvalidItemException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return removeTask(taskNo);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Updates task depending on what type of instruction."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns update message when task is updated."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param strings Variable number of strings taken in."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String containing message on task updated."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String updateTask(String...strings) throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String updateType \u003d strings[1];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String info \u003d strings[2];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        int taskNo;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            taskNo \u003d Integer.parseInt(strings[0]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (invalidTaskNo(taskNo)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                throw new InvalidItemException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (NumberFormatException | InvalidItemException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new InvalidInputException(\"Task number should be given!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        switch (updateType) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"desc\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return updateTaskDesc(taskNo, info);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return updateTaskTime(taskNo, info);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return updateTaskDate(taskNo, info);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            assert false; //update types should be filtered out."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return \"Wrong update type!\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Updates Task Description."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param taskNo identification number for task."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return message when task is updated."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String updateTaskDesc(int taskNo, String desc) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskList.get(taskNo).updateTaskDesc(desc);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msgGenerator.getUpdateMessage(taskList.get(taskNo), noTasks());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Updates Task Timing."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param taskNo identification number for task."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return message when task is updated."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String updateTaskTime(int taskNo, String time) throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (taskList.get(taskNo).type.equals(\"T\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new InvalidInputException(\"Time\u0027s not available for Todo!\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskList.get(taskNo).updateTaskTime(time);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msgGenerator.getUpdateMessage(taskList.get(taskNo), noTasks());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Updates Task Date."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param taskNo identification number for task."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return message when task is updated."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String updateTaskDate(int taskNo, String date) throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (taskList.get(taskNo).type.equals(\"T\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            throw new InvalidInputException(\"Date\u0027s not available for Todo!\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskList.get(taskNo).updateTaskDate(date);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msgGenerator.getUpdateMessage(taskList.get(taskNo), noTasks());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Searches and prints matching tasks in task list"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param keyword word that task must contain to be printed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String containing list of tasks."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String findMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            if (task !\u003d null \u0026\u0026 task.getTaskInfo().contains(keyword)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return msgGenerator.getMatchingList(listify(matchingTasks));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 222
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates Todo (also a Task)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param num Number in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task String indicates description of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type String indicates task type, in this case \"T\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param done boolean indicates whether the task is done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Todo(int num, String task, String type, boolean done) throws MissingInputException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        super(num, task, type, done);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Creates Todo (also a Task)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param num Number in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task String indicates description of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param type String indicates task type, in this case \"T\"."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public Todo(int num, String task, String type) throws MissingInputException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        super(num, task, type);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats the todo for printing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String in the form for printing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return String.format(\"[T][%s] %s\", done ? \"Y\" : \"N\",task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats task to be written in given file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return formatted string for writing in file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String fileFormat() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return String.format(\"T | %s | %s\", done ? \"1\" : \"0\", task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 50
    }
  },
  {
    "path": "src/main/java/ui/MessageGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import storage.Formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class MessageGenerator {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    Formatter formatter \u003d new Formatter();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String LINE \u003d \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Generates messages for different user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public MessageGenerator() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String line() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return LINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String listTasks() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return \"Here are the tasks in your list: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String removeTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return \"Noted. I\u0027ve removed this task: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String addTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String markDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String numTask(int n) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return \"Now you have \" + n + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String matchingTasks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String updateTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return \"Got it. Your task is now updated as: \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String greeting() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d formatter.format(\"Hello I\u0027m Pan Pan!\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.format(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.format(\"For list of commands, type help.\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String byeString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private List\u003cString\u003e helpMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        List\u003cString\u003e messageChain \u003d new ArrayList\u003c\u003e(20);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"Here\u0027s the list of commands:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To create a new Todo, type:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"todo \u003cTask Description\u003e\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To create a new Deadline, type:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"deadline \u003cTask Description\u003e /by\u003cDD/MM/YYYY\u003e \u003cHHMM\u003e\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To create a new Event, type:\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"event \u003cTask Description\u003e /at\u003cDD/MM/YYYY\u003e \u003cHHMM\u003e\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To list all tasks:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"list\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To find a task containing keyword(s)\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"find \u003ckeyword(s)\u003e\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To delete a task:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"delete \u003cTaskNo\u003e\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To mark a task as done, type:\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"done \u003cTaskNo\u003e\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To update a task description, type:\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"update | \u003cTaskNo\u003e | desc | \u003cNew Description\u003e\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To update a task time, type:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"update | \u003cTaskNo\u003e | time | \u003cNew Time\u003e\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(\"To update a task date, type:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        messageChain.add(formatter.format(\"update | \u003cTaskNo\u003e | date | \u003cNew Date\u003e\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return messageChain;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Formats task with indentations."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task that is to be formatted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String for formatted task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String formatTask(Task task) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return \"  \" + task.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns a message with lined formatting."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param message that should be formatted."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return formatted string for printing/output."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getLinedMessage(String message) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.format(message) + \"\\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns the program response when a task is removed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task Task that is to be removed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param n Number tagged to task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getRemoveMessage(Task task, int n) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d line();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.appendStrings(removeTask(), formatTask(task), numTask(n));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns program response when a task is updated."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task Task to be updated."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param n Number of tasks in the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String containing update message."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getUpdateMessage(Task task, int n) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d line();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.appendStrings(updateTask(), formatTask(task), numTask(n));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns program response when a task is added."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task Task that is to be added."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param n Number tagged to task."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String that contains the task added."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getAddMessage(Task task, int n) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.appendStrings(addTask(), formatTask(task), numTask(n));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns the program response when a task is set as done."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param task Task that is set as done."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String to indicate task is marked as done."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getDoneMessage(Task task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d line();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.appendStrings(markDone(), formatTask(task));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns the program response when user asks for list of tasks."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param list List of tasks in their string form."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String of list in lined formatting."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getList(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d line();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.appendStrings(formatter.format(listTasks()), list);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns matching tasks in a task list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param list list of tasks in their string form."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return Appended string containing tasks."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getMatchingList(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.appendStrings(formatter.format(matchingTasks()), list);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns welcome message when program begins."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String containing Greeting message."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d line();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.format(greeting());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns goodbye message when program terminates."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String containing goodbye message."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String bye() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d line();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.format(byeString());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Returns help message when user asks for help."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return String containing list of commands."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String getHelpMessage() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String s \u003d line();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d formatter.appendStrings(helpMessage().toArray(new String[(helpMessage().size())]));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        s +\u003d line();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 236
    }
  },
  {
    "path": "src/main/java/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidItemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import storage.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import storage.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import storage.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private MessageGenerator msg \u003d new MessageGenerator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Processes commands from the user to interact with given file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param fileInput String that indicates file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public UI(String fileInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        storage \u003d new Storage(fileInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Exits program in Duke by changing boolean."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Indicates whether program should be exited based on user command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return boolean to indicate whether program should be exited."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Processes file in storage and adds tasks to program."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void processFile() throws MissingInputException, InvalidInputException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        for (Task task: storage.loadTasks().getTaskList()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            tasks.loadTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Processes input from the Command Line made by user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * This makes changes to the program\u0027s task list and file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void processInput() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            processCommand(parser.process(line));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Processes input from the Command Line made by user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @return Formatted string for Duke\u0027s output."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public String processInput(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        String output \u003d processCommand(parser.process(input));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        storage.updateTaskList(tasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * Intermediate method to process command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * This updates and writes the file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     * @param command command created from parser."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private String processCommand(Command command) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            switch (command.type) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                exit();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                return \"Bye!\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            case PRINTLIST:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                return tasks.getList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            case ADD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                return tasks.addTask(parser.createTask(command));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                return tasks.deleteTask(parser.getTaskNo(command));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                return tasks.setDone(parser.getTaskNo(command));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                return tasks.findMatchingTasks(parser.getKeyword(command));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            case UPDATE:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                return tasks.updateTask(parser.getUpdateInfo(command));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                return msg.getHelpMessage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                assert command.type.equals(CommandType.INVALID); //cases should always fall up to Invalid case."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        } catch (InvalidCommandException | InvalidInputException | MissingInputException | InvalidItemException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            return e.getErrorMessage();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 117
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liawsy": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liawsy": 19
    }
  },
  {
    "path": "src/test/java/DukeDateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class DukeDateTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void processDate_success() throws InvalidInputException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(\"Sun, 22 Sep 2019\", DukeDate.processDate(\"22/9/2019\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(\"Sun, 22 Sep 2019\", DukeDate.processDate(\"22/09/2019\").toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void processDate_throwsException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e DukeDate.processDate(\"22 Sep 19\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e DukeDate.processDate(\"Sunday\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e DukeDate.processDate(\"22/9\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e DukeDate.processDate(\"41/27/2019\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 24
    }
  },
  {
    "path": "src/test/java/DukeTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class DukeTimeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void processTime_success() throws InvalidInputException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(\"03:00PM\", DukeTime.processTime(\"1500\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(\"03:00AM\", DukeTime.processTime(\"0300\").toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void processTime_throwsException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e DukeTime.processTime(\"300\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e DukeTime.processTime(\"2500\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e DukeTime.processTime(\"1290\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e DukeTime.processTime(\"2590\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 23
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidItemException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private TaskList taskListTest1 \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String TODO1 \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       \" + TestCase.TODO_SUCCESSFUL_OUTPUT + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Now you have 1 task(s) in the list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String EVENT2 \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       \" + TestCase.EVENT_SUCCESSFUL_OUTPUT + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Now you have 2 task(s) in the list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String DEADLINE3 \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       \" + TestCase.DEADLINE_SUCCESSFUL_OUTPUT + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Now you have 3 task(s) in the list.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String TODO_DELETE \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       \" + TestCase.TODO_SUCCESSFUL_OUTPUT + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Now you have 2 task(s) in the list.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String EVENT_DELETE \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       \" + TestCase.EVENT_SUCCESSFUL_OUTPUT + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Now you have 1 task(s) in the list.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String DEADLINE_DELETE \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       \" + TestCase.DEADLINE_SUCCESSFUL_OUTPUT + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Now you have 0 task(s) in the list.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String DEADLINE_DONE \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       \" + TestCase.DEADLINE_DONE_OUTPUT + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String EVENT_DONE \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       \" + TestCase.EVENT_DONE_OUTPUT + \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private static String TODO_DONE \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       \" + TestCase.TODO_DONE_OUTPUT + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void addTask_success() throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(TODO1, taskListTest1.addTask(new Todo(1, TestCase.TODO_DESCRIPTION, \"T\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(EVENT2, taskListTest1.addTask(new Event(2, TestCase.EVENT_DESCRIPTION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DukeDate.processDate(TestCase.DATE), DukeTime.processTime(TestCase.TIME), \"E\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(DEADLINE3, taskListTest1.addTask(new Deadline(3, TestCase.DEADLINE_DESCRIPTION,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DukeDate.processDate(TestCase.DATE), DukeTime.processTime(TestCase.TIME), \"D\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    private void initialiseTasksForTest() throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskListTest1.addTask(new Todo(1, TestCase.TODO_DESCRIPTION, \"T\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskListTest1.addTask(new Event(2, TestCase.EVENT_DESCRIPTION,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DukeDate.processDate(TestCase.DATE), DukeTime.processTime(TestCase.TIME), \"E\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        taskListTest1.addTask(new Deadline(3, TestCase.DEADLINE_DESCRIPTION,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DukeDate.processDate(TestCase.DATE), DukeTime.processTime(TestCase.TIME), \"D\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void deleteTask_success() throws InvalidInputException, MissingInputException, InvalidItemException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        initialiseTasksForTest();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(TODO_DELETE, taskListTest1.deleteTask(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(EVENT_DELETE, taskListTest1.deleteTask(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(DEADLINE_DELETE, taskListTest1.deleteTask(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void deleteTask_throwsException() throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        initialiseTasksForTest();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidItemException.class, () -\u003e taskListTest1.deleteTask(5));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void setDone_success() throws InvalidInputException, MissingInputException, InvalidItemException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        initialiseTasksForTest();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(TODO_DONE, taskListTest1.setDone(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(EVENT_DONE, taskListTest1.setDone(2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(DEADLINE_DONE, taskListTest1.setDone(3));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void setDone_throwsException() throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        initialiseTasksForTest();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(InvalidItemException.class, () -\u003e taskListTest1.setDone(5));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void updateTaskDesc_success() throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        initialiseTasksForTest();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(TestCase.TODO_UPDATE, taskListTest1.updateTaskDesc(1, TestCase.NEW_TODO_DESCRIPTION));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void updateTaskTime_success() throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        initialiseTasksForTest();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(TestCase.EVENT_UPDATE, taskListTest1.updateTaskTime(2, TestCase.NEW_TIME));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void updateTaskDate_success() throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        initialiseTasksForTest();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(TestCase.DEADLINE_UPDATE, taskListTest1.updateTaskDate(3, TestCase.NEW_DATE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 134
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.DukeTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "import exceptions.MissingInputException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void taskConstructor_success() throws InvalidInputException, MissingInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(new Event(3, TestCase.EVENT_DESCRIPTION, DukeDate.processDate(TestCase.DATE),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DukeTime.processTime(TestCase.TIME), \"E\").toString(), TestCase.EVENT_SUCCESSFUL_OUTPUT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(new Todo(3, TestCase.TODO_DESCRIPTION, \"T\").toString(), TestCase.TODO_SUCCESSFUL_OUTPUT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertEquals(new Deadline(3, TestCase.DEADLINE_DESCRIPTION, DukeDate.processDate(TestCase.DATE),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                DukeTime.processTime(TestCase.TIME), \"D\").toString(), TestCase.DEADLINE_SUCCESSFUL_OUTPUT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    public void taskConstructor_throwsException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(MissingInputException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                new Event(3, TestCase.DESCRIPTION_FALSE, DukeDate.processDate(TestCase.DATE),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                        DukeTime.processTime(TestCase.TIME), \"E\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(MissingInputException.class, () -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                new Deadline(3, TestCase.DESCRIPTION_FALSE, DukeDate.processDate(TestCase.DATE),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                        DukeTime.processTime(TestCase.TIME), \"D\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(MissingInputException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                new Todo(3, TestCase.DESCRIPTION_FALSE, \"T\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(MissingInputException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                new Event(3, TestCase.EVENT_DESCRIPTION, null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                        DukeTime.processTime(TestCase.TIME),\"E\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liawsy"
        },
        "content": "        assertThrows(MissingInputException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                new Event(3, TestCase.EVENT_DESCRIPTION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liawsy"
        },
        "content": "                        DukeDate.processDate(TestCase.DATE), null,\"E\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 43
    }
  },
  {
    "path": "src/test/java/TestCase.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "public class TestCase {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String EVENT_DESCRIPTION \u003d \"Movie date\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String TODO_DESCRIPTION \u003d \"Wash plates\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String DEADLINE_DESCRIPTION \u003d \"Submit Reflections\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String DESCRIPTION_FALSE \u003d \"\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String DATE \u003d \"15/7/2019\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String TIME \u003d \"1800\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String EVENT_SUCCESSFUL_OUTPUT \u003d \"[E][N] Movie date (at: Mon, 15 Jul 2019 06:00PM)\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String TODO_SUCCESSFUL_OUTPUT \u003d \"[T][N] Wash plates\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String DEADLINE_SUCCESSFUL_OUTPUT \u003d \"[D][N] Submit Reflections (by: Mon, 15 Jul 2019 06:00PM)\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String EVENT_DONE_OUTPUT \u003d \"[E][Y] Movie date (at: Mon, 15 Jul 2019 06:00PM)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String TODO_DONE_OUTPUT \u003d \"[T][Y] Wash plates\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String DEADLINE_DONE_OUTPUT \u003d \"[D][Y] Submit Reflections (by: Mon, 15 Jul 2019 06:00PM)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String EVENT_UPDATE \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Got it. Your task is now updated as: \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       [E][N] Movie date (at: Mon, 15 Jul 2019 07:30PM)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Now you have 3 task(s) in the list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String TODO_UPDATE \u003d  \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Got it. Your task is now updated as: \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       [T][N] Wipe floor\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Now you have 3 task(s) in the list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String DEADLINE_UPDATE \u003d \"_______________________________________________________\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Got it. Your task is now updated as: \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"       [D][N] Submit Reflections (by: Sun, 18 Aug 2019 06:00PM)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"     Now you have 3 task(s) in the list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liawsy"
        },
        "content": "            + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String NEW_TODO_DESCRIPTION \u003d \"Wipe floor\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String NEW_DATE \u003d \"18/8/2019\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "    static String NEW_TIME \u003d \"1930\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liawsy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liawsy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liawsy": 33
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we will be creating a GUI for Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Mockup for Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Controls are reusable ui elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Now that we know what controls we need to implement our ui, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liawsy"
        },
        "content": "But how do we get the exact layout we want in the ui? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "liawsy": 3,
      "-": 155
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liawsy"
        },
        "content": "In the mockup of the ui, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "liawsy": 1,
      "-": 242
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liawsy"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and ui, let\u0027s _refactor_ the ui-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liawsy"
        },
        "content": "We call these ui classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our ui to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liawsy"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the ui in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "liawsy": 4,
      "-": 290
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liawsy"
        },
        "content": "# Text ui Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "liawsy": 1,
      "-": 73
    }
  }
]
