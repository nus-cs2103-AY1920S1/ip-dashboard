[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "run {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//reused from https://github.com/Oscar-B-Liang/duke/pull/6/files"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 37,
      "-": 14
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "## Commands "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "### `BYE`"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Exits the program  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "### `LIST`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Shows a list of the current tasks  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "### `DONE`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Marks a task as done  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Format: `done task_number`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "### `TODO`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Adds a new todo task to the task list  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Format: `todo task_name`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "### `DEADLINE`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Adds a new deadline task to the task list  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Format: `deadline task_name /by dueDate`  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "DateTimeFormat: *dd/MM/yyyy HHmm*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "### `EVENT`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Adds a new event task to the task list  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Format: `event task_name /at startDateTime - endDateTime`  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "DateTimeFormat: *dd/MM/yyyy HHmm*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "### `DELETE`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Deletes a task from the task list  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Format: `delete task_number`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "### `FIND`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Finds tasks based on keywords  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Format: `find keywords`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "### `HELP`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Displays a help page  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "Format: `help`"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 32,
      "-": 9
    }
  },
  {
    "path": "src/main/java/duke/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(CommandType.BYE);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 7
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private CommandType type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Command(CommandType type) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 13
    }
  },
  {
    "path": "src/main/java/duke/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    HELP"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 13
    }
  },
  {
    "path": "src/main/java/duke/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private LocalDateTime dueDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public DeadlineCommand(String description, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(CommandType.DEADLINE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public LocalDateTime getDueDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 22
    }
  },
  {
    "path": "src/main/java/duke/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public DeleteCommand(Integer index) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(CommandType.DELETE);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Integer getIndex() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 14
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 62
    }
  },
  {
    "path": "src/main/java/duke/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public DoneCommand(Integer index) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(CommandType.DONE);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Integer getIndex() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 14
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Main class for Duke chatbot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Handles user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Executor executor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Duke setup() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Storage storageHandler \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            TaskList tasks \u003d new TaskList(storageHandler.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            this.executor \u003d new Executor(ui, storageHandler, tasks, parser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void hello() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Executor getExecutor() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return executor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                DialogBox.getUserDialog(userText.getText(), new ImageView(user).getImage()),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                DialogBox.getDukeDialog(dukeText.getText(), new ImageView(duke).getImage())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getExecutor().execute(input);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 147,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public EventCommand(String description, LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(CommandType.EVENT);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 28
    }
  },
  {
    "path": "src/main/java/duke/Executor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Storage storageHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Executor(Ui ui, Storage storageHandler, TaskList tasks, Parser parser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.storageHandler \u003d storageHandler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Responds to user input by determining which subsequent methods to call."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String execute(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (userInput.toUpperCase().equals(\"BYE\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            ui.sayGoodbye();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String reply \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Command userCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            switch (userCommand.getType()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                reply \u003d ui.displayList(tasks.getTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                Integer index \u003d ((DoneCommand) userCommand).getIndex();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                Task doneTask \u003d tasks.markTaskAsDone(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                reply \u003d ui.doneReply(doneTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                Task addedTodo \u003d tasks.addTodo(((TodoCommand) userCommand).getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                reply \u003d ui.displayAddedTask(addedTodo, tasks.getTasks());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                Task addedDeadline \u003d tasks.addDeadline("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        ((DeadlineCommand) userCommand).getDescription(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        ((DeadlineCommand) userCommand).getDueDate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                reply \u003d ui.displayAddedTask(addedDeadline, tasks.getTasks());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                Task addedEvent \u003d tasks.addEvent("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        ((EventCommand) userCommand).getDescription(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        ((EventCommand) userCommand).getStartDateTime(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        ((EventCommand) userCommand).getEndDateTime()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                reply \u003d ui.displayAddedTask(addedEvent, tasks.getTasks());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                Task deletedTask \u003d tasks.deleteTask(((DeleteCommand) userCommand).getIndex());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                reply \u003d ui.displayDeletedTask(deletedTask, tasks.getTasks());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                ArrayList\u003cTask\u003e matchingTasks \u003d tasks.findMatching(((FindCommand) userCommand).getSearchParams());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                reply \u003d ui.displayList(matchingTasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                reply \u003d ui.renderHelp();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // TODO: have this string be based on enum values"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                String commands \u003d \"BYE, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                reply \u003d \"I don\u0027t know what that means! The available commands are: \" + commands;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            reply \u003d e.getMessage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            storageHandler.save(tasks.getTasks());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return reply;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 84
    }
  },
  {
    "path": "src/main/java/duke/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String searchParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public FindCommand(String searchParams) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(CommandType.FIND);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.searchParams \u003d searchParams;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getSearchParams() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return searchParams;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 14
    }
  },
  {
    "path": "src/main/java/duke/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(CommandType.HELP);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 7
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 13
    }
  },
  {
    "path": "src/main/java/duke/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(CommandType.LIST);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 7
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Duke duke \u003d new Duke().setup();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            duke.hello();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 32
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 52
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Formatter used to parse input due dates. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static final DateTimeFormatter DATEFORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Command parse(String userInput) throws InvalidTaskException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] splitInput \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            CommandType commandType \u003d CommandType.valueOf(CommandType.class, splitInput[0].toUpperCase());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // `bye`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // `list`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // `done task_number`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    Integer index \u003d Integer.parseInt(splitInput[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    return new DoneCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    throw new InvalidTaskException(\"Invalid input! Done has the following format: `done task_number`\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // `todo task_description`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    String description \u003d splitInput[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    return new TodoCommand(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    throw new InvalidTaskException(\"Invalid input! Todo has the following format: `todo task_description`\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // `deadline task_description /by dueDate` DateTimeFormat: dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    String[] descAndDate \u003d splitInput[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    String description \u003d descAndDate[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    LocalDateTime dueDate \u003d LocalDateTime.parse(descAndDate[1], DATEFORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    return new DeadlineCommand(description, dueDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    throw new InvalidTaskException(\"Invalid input! Deadline has the following format:\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                            \"`deadline task_description /by dueDate` DateTimeFormat: dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // `event event_description /at startDateTime - endDateTime` DateTimeFormat: dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    String[] descAndDates \u003d splitInput[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    String[] startEndDates \u003d descAndDates[1].split(\" - \", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    String description \u003d descAndDates[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    LocalDateTime startDateTime \u003d LocalDateTime.parse(startEndDates[0], DATEFORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    LocalDateTime endDateTime \u003d LocalDateTime.parse(startEndDates[1], DATEFORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    return new EventCommand(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    throw new InvalidTaskException(\"Invalid input! Event has the following format:\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                            \"`event event_description /at startDateTime - endDateTime` DateTimeFormat: dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // `delete task_number`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    Integer index \u003d Integer.parseInt(splitInput[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    return new DeleteCommand(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    throw new InvalidTaskException(\"Invalid input! Delete has the following format: `delete task_number`\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // `find search_params`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    String searchParams \u003d splitInput[1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    return new FindCommand(searchParams);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    throw new InvalidTaskException(\"Invalid input! Find has the following format: `find search_params`\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // `help`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // TODO: have this string be based on enum values"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                String commands \u003d \"BYE, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                throw new InvalidTaskException(\"Invalid input! The available commands are: \" + commands);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // TODO: have this string be based on enum values"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            String commands \u003d \"BYE, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(\"Invalid input! The available commands are: \" + commands);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 94
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Storage class is responsible for reading/writing tasks from/to a save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Tasks saved in following format: taskType|isDone|description|otherFields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Directory of saved tasks. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private final String SAVE_DIRECTORY \u003d \"./duke.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Loads tasks from the save file into an arraylist and returns it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return an arraylist containing the saved tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws InvalidTaskException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return load(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public ArrayList\u003cTask\u003e load(String save_directory) throws InvalidTaskException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            System.out.println(\"Loading save file from: \" + save_directory + \" ...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            if (Files.notExists(Paths.get(save_directory))) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                System.out.println(\"Save file missing! Attempting to create new file...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            File savedTasks \u003d new File(save_directory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Scanner sc \u003d new Scanner(savedTasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    Task task \u003d parseFileToDuke(sc.nextLine());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    throw new InvalidTaskException(\"Save file corrupted!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            System.out.println(\"File load successful.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                FileWriter fw \u003d new FileWriter(save_directory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                fw.write(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                System.out.println(\"New save file created!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            catch (IOException er) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                throw new InvalidTaskException(\"Unable to access save directory! Aborting!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Writes the input task list to the save file directory."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param tasks input task list containing all the current tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        save(tasks, SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks, String save_directory) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            FileWriter fw \u003d new FileWriter(save_directory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            String parsedTasks \u003d parseDukeToFile(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            fw.write(parsedTasks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // TODO: Handle exception properly"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            System.out.println(\"Failed to save changes\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Parses the input lines to create tasks."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param line input line from the save file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a task created from the input line."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the task type is unrecognized."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Task parseFileToDuke(String line) throws InvalidTaskException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] taskDetails \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String taskType \u003d taskDetails[0];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            task \u003d new Todo(taskDetails);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            task \u003d new Deadline(taskDetails);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            task \u003d new Event(taskDetails);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // TODO: Should change this to diff type of exception"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(\"Unrecognized task! Save file possibly corrupt!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Parses the input list of tasks into a single string containing all the tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param tasks input list of tasks to be parsed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a single string containing all the tasks."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String parseDukeToFile(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String parsedTasks \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            String parsedTask \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                parsedTask \u003d \"T|\" + (task.getIsDone() ? \"1|\" : \"0|\") + task.getDescription();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                parsedTask \u003d \"D|\" + (task.getIsDone() ? \"1|\" : \"0|\") + task.getDescription() + \"|\" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        ((Deadline) task).getStringifiedDueDate();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                parsedTask \u003d \"E|\" + (task.getIsDone() ? \"1|\" : \"0|\") + task.getDescription() + \"|\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        ((Event) task).getStringifiedStartDateTime() + \"|\" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                                ((Event) task).getStringifiedEndDateTime();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            parsedTasks +\u003d parsedTask + \"\\n\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return parsedTasks;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 147
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Task addTodo(String description) throws InvalidTaskException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Task addDeadline(String description, LocalDateTime dueDate) throws InvalidTaskException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, dueDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Task addEvent(String description, LocalDateTime startDateTime, LocalDateTime endDateTime) throws InvalidTaskException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Event event \u003d new Event(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Task deleteTask(Integer index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Task deletedTask \u003d getTask(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return deletedTask;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Task markTaskAsDone(Integer index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        getTask(index).markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getTask(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Task getTask(Integer index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public ArrayList\u003cTask\u003e findMatching(String searchParams) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            if (task.getInfo().contains(searchParams)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 65
    }
  },
  {
    "path": "src/main/java/duke/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(CommandType.TODO);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 14
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Sends a friendly message to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dukeReply(\"Hello! My name is Duke!\\nHow may I help you?\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Displays the input task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param task the input task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String displayAddedTask(Task task, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dukeReply(\"Got it. I\u0027ve added this task:\\n  \" + task.getInfo() + \"\\nNow you have \" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String displayDeletedTask(Task task, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dukeReply(\"I have removed the following task:\\n  \" + task + \"\\nNow you have \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Displays the contents of current task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String displayList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String finalOutput \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        boolean first \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            if (!first) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                finalOutput +\u003d \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            first \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            finalOutput +\u003d i + 1 + \". \" + tasks.get(i).getInfo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dukeReply(\"Here are the tasks in your list:\\n\" + finalOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String doneReply(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dukeReply(\"Successfully marked the following task as done:\\n\" + task.getInfo());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String displayErrors(Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dukeReply(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String sayGoodbye() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dukeReply(\"Till next time, goodbye!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String renderHelp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String helpMessage \u003d \"Hello and Welcome to Duke! I am a task managing tool for you to keep track of your\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"todos, deadlines and events.\\n\\n Here are a list of available commands: \\n\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"Exit Duke:\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"`Bye`\\n\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"View your List of tasks:\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"`List`\\n\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"Mark a task as Done:\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"`Done task_number`\\n\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"Add a new Todo task:\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"`Todo task_name`\\n\\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"Add a new Deadline:\\n\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"`Deadline task_name /by dueDate` DateTimeFormat: dd/MM/yyyy HHmm\\n\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"Add a new Event:\\n\" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"`Event event_name /at startDateTime - endDatetime` DateTimeFormat: dd/MM/yyyy HHmm\\n\\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"Delete a task:\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"`Delete task_number`\\n\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"Find a task based on keywords:\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"`Find keywords`\\n\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"Display the help page (Hey you know this one already!)\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \"`Help`\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dukeReply(helpMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Sends the input reply string to the user after formatting it."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param reply input string to be formatted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String dukeReply(String reply) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return reply;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 89
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Raised when task attributes are invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class InvalidTaskException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public InvalidTaskException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 10
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * A deadline emulates a task that has to be completed by a specific due date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Formatter used to parse input due dates. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static DateTimeFormatter dueDateFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Formatter used to prettify due dates. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static DateTimeFormatter prettifiedDateTimeFormat \u003d "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d MMM yy h:mma\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Date time that a deadline has to be completed by. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private LocalDateTime dueDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a deadline that is not yet completed and has the input description and duedate."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param description a short summary of what is due."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param dueDate the date the task is due."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when description or due date is blank."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDate) throws InvalidTaskException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a deadline from the input string array."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param input input string array containing description, isDone and due date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when description or due date is blank."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Deadline(String[] input) throws InvalidTaskException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(input[2]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        isDone \u003d input[1].equals(\"1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dueDate \u003d LocalDateTime.parse(input[3], dueDateFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Validations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Validates that the created deadline object has acceptable parameters."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the deadline has unacceptable parameters."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected void validate() throws InvalidTaskException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Description cannot be blank\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (dueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d errorMessage.isBlank() ? \"\" : \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Due date cannot be blank\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (!errorMessage.isBlank()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(errorMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getters/setters"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the due date in string format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the due date in string format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getStringifiedDueDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dueDate.format(dueDateFormat);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a nicely formatted string that displays the status and details of a deadline."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a nicely formatted string that displays the status and details of a deadline."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[D]\" + super.getInfo() + \"(by: \" + getPrettyDueDate() + \")\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the due date in a prettified string format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the due date in a prettified string format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getPrettyDueDate() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dueDate.format(prettifiedDateTimeFormat);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 100
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Event emulates a task to be attended to that has a start and end date/time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Formatter used to parse input event date/times. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static DateTimeFormatter eventDateTimeFormat \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Formatter used to prettify due dates. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static DateTimeFormatter prettifiedDateTimeFormat \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d MMM yy h:mma\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Start date and time of the event. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** End date and time of the event. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates an event task with the input description and start and end date times."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param description describes the nature of the event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param startDateTime the start date and time of the event. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param endDateTime the end date and time of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when any of description, start/end date and time are blank."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Event(String description, LocalDateTime startDateTime, LocalDateTime endDateTime)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throws InvalidTaskException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates an event from the input string array."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param input string array containing description, isDone, event start and end date/times."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException any of description, event start and end date/times are blank."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Event(String[] input) throws InvalidTaskException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(input[2]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        isDone \u003d input[1].equals(\"1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        startDateTime \u003d LocalDateTime.parse(input[3], eventDateTimeFormat);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        endDateTime \u003d LocalDateTime.parse(input[4], eventDateTimeFormat);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Validates that the created event object has acceptable parameters."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the event has unacceptable parameters."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected void validate() throws InvalidTaskException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Description cannot be blank\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d errorMessage.isBlank() ? \"\" : \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Start time cannot be blank\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d errorMessage.isBlank() ? \"\" : \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"End time cannot be blank\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (!errorMessage.isBlank()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(errorMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getters/setters"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the start date/time in string format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the start date/time in string format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getStringifiedStartDateTime() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return startDateTime.format(eventDateTimeFormat);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the end date/time in string format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the end date/time in string format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getStringifiedEndDateTime() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return endDateTime.format(eventDateTimeFormat);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // TODO: display \"date startTime-endTime\" if same day, else \"startDateTime - endDateTime\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a nicely formatted string that displays the status and details of an event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a nicely formatted string that displays the status and details of an event."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[E]\" + super.getInfo() + \"(at: \" + getPrettyStartDateTime() + \"-\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                getPrettyEndDateTime() + \")\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the start date/time in a prettified string format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the start date/time in a prettified string format."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getPrettyStartDateTime() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return startDateTime.format(prettifiedDateTimeFormat);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the end date/time in a prettified string format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the end date/time in a prettified string format."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getPrettyEndDateTime() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return endDateTime.format(prettifiedDateTimeFormat);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 129
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Abstract class emulating a task to be performed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Description that summarizes the details of the task. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Boolean value that represents whether a task has been completed. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a new task object that is not yet done, with the input description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param description short summary of the details of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Validates that the created Task object has acceptable parameters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the Task has unacceptable parameters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected abstract void validate() throws InvalidTaskException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getter/setters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns true if the task is done and false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return true if the task is done and false otherwise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a string containing a tick symbol if the task is done and a cross otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a string containing a tick symbol if the task is done and a cross otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a nicely formatted string that displays the status and description of a task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a nicely formatted string that displays the status and description of a task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Marks the current task as completed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 80
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Todo class emulates a task to be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a new todo object with the input description, that is not yet completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param description a short summary of the task to be done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when description is blank."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Todo(String description) throws InvalidTaskException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a new todo object with the input string array containing description and isDone."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param input string array containing description and isDone."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when description is blank."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Todo(String[] input) throws InvalidTaskException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(input[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        isDone \u003d input[1].equals(\"1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Validates that the created todo object has acceptable parameters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the todo has unacceptable parameters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected void validate() throws InvalidTaskException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(\"Description cannot be blank\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getters/setters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a nicely formatted string that displays the status and details of a todo."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a nicely formatted string that displays the status and details of a todo."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[T]\" + super.getInfo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 58
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"1000.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"800.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"86.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"-3.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"15.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"708.0\" prefWidth\u003d\"570.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"78.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"14.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"701.0\" prefWidth\u003d\"570.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 10
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.TodoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void parse_normalTodoCommandInput_returnTodoCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Command testCommand \u003d parser.parse(\"todo make this test\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Command perfectCommand \u003d new TodoCommand(\"make this test\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            assertEquals(testCommand.getType(), perfectCommand.getType());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            assertEquals(((TodoCommand) testCommand).getDescription(), ((TodoCommand) perfectCommand).getDescription());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            fail(\"normalTodoCommandInput threw exception: \" + e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void parse_noDescriptionTodoCommandInput_throwInvalidTaskException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            parser.parse(\"todo\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        fail(\"noDescriptionTodoCommand created without exception thrown\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 34
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private final String TEST_DIRECTORY \u003d \"./data/test.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private final String FAIL_DIRECORY \u003d \"../~.././...../~~~/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void load_directoryNotAccessible_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // Nonsensical directory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            storage.load(FAIL_DIRECORY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        fail(\"Unreachable directory accepted without exception thrown\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//    public void load_saveDoesNotExist_newFileCreatedAtInputDirectory() throws InvalidTaskException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//        storage.load(TEST_DIRECTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//        if (Files.notExists(Paths.get(TEST_DIRECTORY))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//            fail(\"Unable to create save file\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//        File file \u003d new File(TEST_DIRECTORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//        file.delete();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "// TODO"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//    public load_storageFileCorrupt_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//    public save_directoryNotAccessible_exceptionThrown(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 45
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "duke doesnt understand this command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "todo "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "todo create a proper todo!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "deadline this deadline is missing a date :("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "deadline still missing /by "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "deadline now correct /by like right now"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event this is an incomplete event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event still incomplete /at "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event still same /at now"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event this is ok /at now - not now"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "if ! javac -sourcepath ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 34
    }
  }
]
