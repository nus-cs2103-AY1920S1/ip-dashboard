[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Deadline|1|mai lai |02/12/2019 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "ToDo|1|finish 2103"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "ToDo|1|qwef"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "ToDo|0|hey yo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Deadline|0|submit due |02/12/2019 1800"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "ToDo|0|hey yo"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 6
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    String[] parsedString;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddCommand(String[] command) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.parsedString \u003d command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            switch (parsedString[0]) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                task \u003d new ToDo(parsedString[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                task \u003d new Deadline(parsedString[1], parsedString[2]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                task \u003d new Event(parsedString[1], parsedString[2]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                // if the user type anything besides the three types of item"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                System.out.println(\"Now you have 1 task in the list\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                System.out.println(String.format(\"Now you have %d tasks in the list\", tasks.size()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            storage.updateFile(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 39
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    abstract void execute(TaskList tasks, UI ui, Storage storage) throws Exception;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    abstract boolean isExit();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 6
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Date deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Deadline(String content, String deadline) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            date \u003d inputFormatter.parse(deadline);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.deadline \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return inputFormatter.format(deadline);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return done ? String.format(\"[D][%c] %s (by: %s)\", tick, content, outputFormatter.format(deadline))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                : String.format(\"[D][%c] %s (by: %s)\", cross, content, outputFormatter.format(deadline));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 28
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws Exception{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d Integer.parseInt(command.split(\" \")[1]);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task task \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        tasks.remove(index - 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(\"Now you have 1 task in the list\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(String.format(\"Now you have %d tasks in the list\", tasks.size()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 26
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d Integer.valueOf(command.split(\" \")[1]);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        tasks.getList().get(index - 1).complete();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 18
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Duke duke \u003d new Duke(\"../../../data/duke.txt\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Duke(String filePath) throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.ui \u003d new UI(new Scanner(System.in));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void run() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                Command c \u003d Parser.parseUserInput(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 39,
      "-": 2
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Date time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Event(String content, String time) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            date \u003d formatter.parse(time);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(formatter.format(date));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.time \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return inputFormatter.format(time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return done ? String.format(\"[E][%c] %s (by: %s)\", tick, content, outputFormatter.format(time))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                : String.format(\"[E][%c] %s (by: %s)\", cross, content, outputFormatter.format(time));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 32
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.command \u003d \"bye\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 16
    }
  },
  {
    "path": "src/main/java/Formatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static String formatTaskForWriting(Task task) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String className \u003d task.getClass().getSimpleName();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(className);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"|\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (task.done) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"1\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"0\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"|\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(task.content);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (className.equals(\"ToDo\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"|\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                sb.append(task.getTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                sb.append(task.getTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 27
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ListCommand (String command) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(index + \". \" + task.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 21
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // this method parse string from txt file and creates task objects when duke is initiated"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Task parseTaskString(String str) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] strs \u003d str.split(\"\\\\|\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        switch (strs[0]) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case (\"ToDo\"):"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Task todo \u003d new ToDo(strs[2]);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (strs[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                todo.done \u003d true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case (\"Deadline\"):"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Task deadline \u003d new Deadline(strs[2], strs[3]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (strs[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                deadline.done \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case (\"Event\"):"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Task event \u003d new Event(strs[2], strs[3]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (strs[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                event.done \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new Task(\"shouldn\u0027t come to here\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // this method takes in string from user and decide which type it is and respective information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // needed to create an object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // return a string arr of length 3, index 0 is type of task, index 1 is content of task, index 2 is datetime"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // of task if the task requires datetime if not it will be empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command parseUserInput(String str) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (str.equals(\"list\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new ListCommand(str);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (str.contains(\"done\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new DoneCommand(str);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (str.contains(\"delete\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new DeleteCommand(str);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (str.equals(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            // it should be an add command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            String[] result \u003d new String[3];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            // info splits the string into description and datetime if available"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            String[] info \u003d str.split(\" \", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            boolean isAddCommand \u003d info[0].equals(\"todo\") || info[0].equals(\"deadline\") || info[0].equals(\"event\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            // if info has length 1 it means that only the type of item is there but no description"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                if (info[0].equals(\"todo\") || info[0].equals(\"deadline\") || info[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! I do not understand what did you just typed.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (isAddCommand \u0026\u0026 info.length \u003d\u003d 2 \u0026\u0026 info[1].isBlank()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (info[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result[0] \u003d \"todo\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result[1] \u003d info[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result[2] \u003d \"nil\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else if (info[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                String[] dateTimeArr \u003d info[1].split(\"/by\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                // if it is a deadline event but no slash the info will be just 1 string after split"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                if (dateTimeArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! You need a /by to separate out the date time for this task.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result[0] \u003d \"deadline\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result[1] \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result[2] \u003d dateTimeArr[1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else if (info[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                String[] dateTimeArr \u003d info[1].split(\"/by\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                // if it is a deadline event but no slash the info will be just 1 string after split"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                if (dateTimeArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! You need a /by to separate out the date time for this task.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result[0] \u003d \"event\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result[1] \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result[2] \u003d dateTimeArr[1];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                throw new DukeException(\"There is an unknown error parsing your message\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new AddCommand(result);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 91
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void updateFile(TaskList list) throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        PrintWriter pw \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Task task : list.getList()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            pw.println(Formatter.formatTaskForWriting(task));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        pw.close();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ArrayList\u003cTask\u003e readFile() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String st;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        while ((st \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            result.add(Parser.parseTaskString(st));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 32
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    String content;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    boolean done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    static final int tick \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    static final int cross \u003d \u0027\\u2717\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    static final SimpleDateFormat inputFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    static final SimpleDateFormat outputFormatter \u003d new SimpleDateFormat(\"E, dd MMM yyyy ha\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Task(String content) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n  \" + this.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 27
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void remove(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        list.remove(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 37
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ToDo(String content) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return done ? String.format(\"[T][%c] %s\", tick, content) : String.format(\"[T][%c] %s\", cross, content);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 11
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public UI(Scanner sc) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.sc \u003d sc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //print welcome message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(\"Hello I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //read user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //show error message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void showError(String msg) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //print the divider line"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(\"-------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 29
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Hello I\u0027m Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✗] read book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 1 task in the list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [D][✗] return book (by: June 6th)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 2 tasks in the list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [E][✗] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 3 tasks in the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✗] join sports club"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 4 tasks in the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✗] borrow book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 5 tasks in the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✓] read book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [E][✓] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [D][✓] return book (by: June 6th)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✓] read book"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 4 tasks in the list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [E][✓] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 3 tasks in the list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✗] borrow book"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 2 tasks in the list"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "java -classpath ../src/main/java Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 34
    }
  }
]
