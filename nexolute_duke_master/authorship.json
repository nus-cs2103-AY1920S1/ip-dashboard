[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "**Screenshot**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "![Screenshot of Duke](screenshot.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/dukeModel issue tracker](https://github.com/se-edu/dukeModel/issues)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    mainClassName \u003d \"duke.core.DukeApplication\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 32,
      "-": 14
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "nexolute": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.core.DukeResponder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public abstract String execute(TaskList tasks, DukeResponder responder, Storage storage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 11
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.core.DukeResponder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.CannotSaveTasksException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Date by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public DeadlineCommand(String description, Date by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String execute(TaskList tasks, DukeResponder responder, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Task task \u003d new Deadline(this.description, this.by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            storage.saveTasks(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getTaskAddedMessage(task, tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (CannotSaveTasksException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getErrorMessage(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 34
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.core.DukeResponder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.CannotSaveTasksException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String execute(TaskList tasks, DukeResponder responder, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Task task \u003d tasks.remove(this.index - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            storage.saveTasks(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getTaskDeletedMessage(task, tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (CannotSaveTasksException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getErrorMessage(e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 28
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.core.DukeResponder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.CannotSaveTasksException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String execute(TaskList tasks, DukeResponder responder, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            tasks.get(this.index - 1).markAsDone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            storage.saveTasks(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getTaskDoneMessage(tasks.get(this.index - 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (CannotSaveTasksException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getErrorMessage(e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 27
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.core.DukeResponder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.CannotSaveTasksException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Date at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public EventCommand(String description, Date at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String execute(TaskList tasks, DukeResponder responder, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Task task \u003d new Event(this.description, this.at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            storage.saveTasks(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getTaskAddedMessage(task, tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (CannotSaveTasksException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getErrorMessage(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 34
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.core.DukeResponder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String execute(TaskList tasks, DukeResponder responder, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return responder.getTasksMessage(tasks.filter(this.keyword));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 20
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.core.DukeResponder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String execute(TaskList tasks, DukeResponder responder, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return responder.getTasksMessage(tasks);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 14
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.core.DukeResponder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.CannotSaveTasksException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String execute(TaskList tasks, DukeResponder responder, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Task task \u003d new Todo(this.description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            storage.saveTasks(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getTaskAddedMessage(task, tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (CannotSaveTasksException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return responder.getErrorMessage(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 30
    }
  },
  {
    "path": "src/main/java/duke/core/DukeApplication.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DukeApplication extends Application {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String APPLICATION_TITLE \u003d \"Duke\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DukeModel model \u003d new DukeModel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DukeController controller \u003d DukeController.createInstance(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Scene scene \u003d controller.getScene();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        stage.setTitle(DukeApplication.APPLICATION_TITLE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Application.launch(DukeApplication.class, args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 28
    }
  },
  {
    "path": "src/main/java/duke/core/DukeController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DukeController {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String URL_DUKE_IMAGE \u003d \"/images/DaDuke.png\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String URL_USER_IMAGE \u003d \"/images/DaUser.png\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String URL_MAIN_VIEW  \u003d \"/views/duke.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Image userImage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Image dukeImage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private DukeModel model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Creates new instance of DukeController."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Use this method instead of the constructor to create"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * a new instance of {@link DukeController}. This method"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * would help to initialize a new root node, and return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * a controller that is attached to this node."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param model instance of {@link DukeModel}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return controller attached to the root node"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static DukeController createInstance(DukeModel model) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        URL mainViewUrl \u003d DukeController.class.getResource(DukeController.URL_MAIN_VIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(mainViewUrl);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        AnchorPane anchorPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DukeController controller \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        controller.initialize(model, scene);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        model.initialize(controller);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return controller;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return this.scene;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void addDukeDialog(String message) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, this.dukeImage));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void addUserDialog(String message) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.dialogContainer.getChildren().add(DialogBox.getUserDialog(message, this.userImage));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private void initialize(DukeModel dukeModel, Scene scene) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.model \u003d dukeModel;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.scene \u003d scene;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.dukeImage \u003d new Image(this.getClass().getResourceAsStream(DukeController.URL_DUKE_IMAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.userImage \u003d new Image(this.getClass().getResourceAsStream(DukeController.URL_USER_IMAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.scrollPane.vvalueProperty().bind(this.dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.model.getResponse(this.userInput.getText());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.userInput.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 83
    }
  },
  {
    "path": "src/main/java/duke/core/DukeModel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.CorruptedTasksException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.ui.GuiPrinter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.ui.Printer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DukeModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String URL_STORAGE \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private DukeResponder responder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Printer printer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Initializes the Duke class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method should be executed after the creation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * of the {@link DukeController} object and before the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * execution of {@link DukeModel#getResponse getResponse}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param controller the main window for the Duke GUI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void initialize(DukeController controller) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.responder \u003d new DukeResponder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.printer \u003d new GuiPrinter(controller);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.storage \u003d new Storage(DukeModel.URL_STORAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            this.tasks \u003d this.storage.loadTasks();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (CorruptedTasksException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            this.printer.printDuke(this.responder.getErrorMessage(e));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.printer.printDuke(this.responder.getWelcomeMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Get a response to a given command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method returns the response from Duke"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * given the command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param fullCommand the command to be executed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void getResponse(String fullCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            this.printer.printUser(fullCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Command command \u003d Parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            String message \u003d command.execute(this.tasks, this.responder, this.storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            this.printer.printDuke(message);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            this.printer.printDuke(this.responder.getErrorMessage(e));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 62
    }
  },
  {
    "path": "src/main/java/duke/core/DukeResponder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DukeResponder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Generates welcome message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method returns the welcome message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return welcome message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getWelcomeMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return buildMultilineString(new String[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \"Hello! I\u0027m Duke\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \"What can I do for you?\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Generates tasks message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method returns a neatly formatted tasks listing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param tasks list of tasks to be shown."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return tasks message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getTasksMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return buildMultilineString(tasks.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                .map(Task::toString)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                .toArray(String[]::new));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Generates task done message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method returns a message to indicate that a task is marked as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param task completed task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return task done message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getTaskDoneMessage(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return buildMultilineString(new String[] {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \"Nice! I\u0027ve marked this task as done:\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            task.toString()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Generates task deleted message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method returns a message to indicate that a task is successfully deleted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param task deleted task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param tasks list of tasks after deletion"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return task deleted message"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getTaskDeletedMessage(Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return buildMultilineString(new String[] {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \"Noted. I\u0027ve removed this task:\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            task.toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \"Now you have \" + tasks.size() + \" tasks in the list.\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Generates task added message."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method returns a message to indicate that a task is successfully added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param task added task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param tasks list of tasks after addition"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return task added message"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getTaskAddedMessage(Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return buildMultilineString(new String[] {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \"Got it. I\u0027ve added this task:\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            task.toString(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \"Now you have \" + tasks.size() + \" tasks in the list.\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Generates error message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method returns a message reporting the error occurred."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param e instance of {@link DukeException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return error message"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getErrorMessage(DukeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return buildMultilineString(new String[] {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            e.getResponseMessage()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private String buildMultilineString(String[] strings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assert strings.length \u003e 0 : \"strings should not be empty\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        builder.append(strings[0]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        for (int i \u003d 1; i \u003c strings.length; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            builder.append(strings[i]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 108
    }
  },
  {
    "path": "src/main/java/duke/exception/CannotSaveTasksException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class CannotSaveTasksException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getResponseMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"Sorry, I am not able to save your tasks.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/CorruptedTasksException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class CorruptedTasksException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getResponseMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"Sorry, I am not able to load the tasks from saved file.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public abstract String getResponseMessage();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getResponseMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"Sorry, I do not understand the command.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class InvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getResponseMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"Sorry, I do not understand the date format.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 10
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Date by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Deadline(String description, Date by, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toEncodedString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String isDone \u003d this.isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"D | \" +  isDone + \" | \" + this.description + \" | \" + dateFormat.format(this.by);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateFormat.format(this.by) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Date at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Event(String description, Date at, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toEncodedString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String isDone \u003d this.isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"E | \" +  isDone + \" | \" + this.description + \" | \" + dateFormat.format(this.at);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateFormat.format(this.at) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public abstract String toEncodedString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toEncodedString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String isDone \u003d this.isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"T | \" +  isDone + \" | \" + this.description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 24
    }
  },
  {
    "path": "src/main/java/duke/ui/CliPrinter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class CliPrinter extends Printer {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void printDuke(String text) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        System.out.println(text);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void printUser(String text) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // do nothing"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 15
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String URL_DIALOG_BOX_VIEW  \u003d \"/views/dialog_box.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML private Text dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML private ImageView displayPicture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            URL dialogBoxViewUrl \u003d DialogBox.class.getResource(DialogBox.URL_DIALOG_BOX_VIEW);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(dialogBoxViewUrl);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.displayPicture.setImage(image);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Get the dialog box for user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method always return a {@link DialogBox} object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * corresponding to the dialog box for user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param text the message written by user"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param img the image of user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return the dialog box of user saying the message"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Get the dialog box for Duke."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method always return a {@link DialogBox} object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * corresponding to the dialog box for Duke."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param text the message written by Duke"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param img the image of Duke"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return the dialog box of Duke saying the message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 75
    }
  },
  {
    "path": "src/main/java/duke/ui/GuiPrinter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.core.DukeController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class GuiPrinter extends Printer {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private DukeController controller;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public GuiPrinter(DukeController controller) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.controller \u003d controller;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void printDuke(String text) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.controller.addDukeDialog(text);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void printUser(String text) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.controller.addUserDialog(text);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 23
    }
  },
  {
    "path": "src/main/java/duke/ui/Printer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public abstract class Printer {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public abstract void printDuke(String text);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public abstract void printUser(String text);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 9
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Converts a task from its saved format to a task object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The savedText argument must be in the correct format. An example of a correctly formatted task is"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * \"E | 0 | dancing session | 12/1/2010 1212\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param encodedString task in encoded string format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return task object converted from the encoded text"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static Task convertEncodedStringToTask(String encodedString)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throws InvalidDateException, InvalidCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String[] tokens \u003d encodedString.split(\"\\\\s\\\\|\\\\s\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String type \u003d tokens[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        boolean isDone \u003d tokens[1].equals(\"1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String description \u003d tokens[2];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Date date \u003d tokens.length \u003d\u003d 4 ? parseDate(tokens[3]) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new Todo(description, isDone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new Event(description, date, isDone);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new Deadline(description, date, isDone);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Converts list of tasks to saved text format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The returned value can be written into a file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return encoded string format of the list of tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static String convertTasksToEncodedString(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        StringBuilder text \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            text.append(task.toEncodedString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            text.append(\"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return text.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Parses a command string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This method always return a {@link Command} object corresponding to the command written by user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param fullCommand command string from raw user input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return executable {@link Command} object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static Command parseCommand(String fullCommand) throws InvalidDateException, InvalidCommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String commandName \u003d fullCommand.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"ls\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            int doneIndex \u003d Integer.parseInt(fullCommand.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new DoneCommand(doneIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"rm\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            int deleteIndex \u003d Integer.parseInt(fullCommand.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new DeleteCommand(deleteIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"t\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            String todoDescription \u003d fullCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new TodoCommand(todoDescription);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            String eventDescription \u003d fullCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Date at \u003d parseDate(eventDescription.split(\" /at \", 2)[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            eventDescription \u003d eventDescription.split(\" /at \", 2)[0];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new EventCommand(eventDescription, at);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"d\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            String deadlineDescription \u003d fullCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Date by \u003d parseDate(deadlineDescription.split(\" /by \", 2)[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            deadlineDescription \u003d deadlineDescription.split(\" /by \", 2)[0];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new DeadlineCommand(deadlineDescription, by);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            String keyword \u003d fullCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static Date parseDate(String dateString) throws InvalidDateException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return dateFormat.parse(dateString);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 127
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.CannotSaveTasksException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.CorruptedTasksException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Storage(String fileUrl) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.file \u003d new File(fileUrl);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Loads all tasks from storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return the list of tasks saved in the storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public TaskList loadTasks() throws CorruptedTasksException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return loadTasksFromFile(this.file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (InvalidDateException | InvalidCommandException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new CorruptedTasksException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Saves all tasks into storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param tasks the list of tasks to be saved into storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void saveTasks(TaskList tasks) throws CannotSaveTasksException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.file);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            fileWriter.write(Parser.convertTasksToEncodedString(tasks));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new CannotSaveTasksException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private TaskList loadTasksFromFile(File file)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throws FileNotFoundException, InvalidDateException, InvalidCommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            String savedText \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Task task \u003d Parser.convertEncodedStringToTask(savedText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 69
    }
  },
  {
    "path": "src/main/java/duke/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns all tasks that contains some keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param keyword the keyword to be matched with"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return the list of tasks with the keyword"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public TaskList filter(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        TaskList filteredList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        for (Task task : this) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                filteredList.add(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 24
    }
  },
  {
    "path": "src/main/resources/views/dialog_box.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #002B36;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cVBox style\u003d\"-fx-background-color: #073642; -fx-background-radius: 5;\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003cText fx:id\u003d\"dialog\" fill\u003d\"#839496\" style\u003d\"-fx-font-color: #839496;\" wrappingWidth\u003d\"650.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 25
    }
  },
  {
    "path": "src/main/resources/views/duke.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-background-color: #002B36;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.core.DukeController\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" pannable\u003d\"true\" style\u003d\"-fx-background: #002B36; -fx-border-color: #002B36;\" vbarPolicy\u003d\"NEVER\" AnchorPane.bottomAnchor\u003d\"40.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #002B36;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" style\u003d\"-fx-background-color: #586E75; -fx-text-fill: #002b36;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 22
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void testToSaveString() throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String description \u003d \"hackathon\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Date at \u003d dateFormat.parse(\"21/9/2019 0930\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(\"E | 0 | hackathon | 21/9/2019 0930\",event.toEncodedString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void testToString() throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String description \u003d \"hackathon\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Date at \u003d dateFormat.parse(\"21/9/2019 0930\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(\"[E][✘] hackathon (at: 21/9/2019 0930)\",event.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 31
    }
  }
]
