[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "//group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    mainClassName \u003d \"gui.Launcher\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 42,
      "-": 12
    }
  },
  {
    "path": "contacts.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "LoremIpsum | FakePerson | 94350294 | loremipsum@gmail.com"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "DeXun | Myself | -999 | chia.dexun97@gmail.com"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "person | lol | lol | lol"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "This is the Duke ChatBot created by De Xun as part of the CS2103T Individual Project."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003cimg src\u003d\"./Ui.png\" width\u003d\"600\" height\u003d\"600\"/\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### GUI"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Instead of giving commands via a simple CLI, all inputs and outputs are displayed on a GUI designed for a quality and smooth User Experience."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### Create, Read, Update, Delete (CRUD)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Duke is able to effectively perform CRUD actions based on pre-defined User Commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### Saving and Loading"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "User-Created entities are saved into a text file and loaded everytime Duke starts up. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### Task List"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Duke provides the functionality to save and record to-dos, events, and deadlines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### Contact List"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Duke provides the functionality to save the personal information of your contacts."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `list` - Displays list of all Tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "1. [D][✓] return book (by: 10 DECEMBER 2019 0830)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "2. [D][✓] project meeting (by: 7 JULY 2019 0815)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "3. [T][✓] join sports club"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "4. [E][✗] Do CS2103T (20 AUGUST 2019 0000 - 18 NOVEMBER 2019 2359)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "5. [D][✗] iP (by: 23 SEPTEMBER 2019 2359)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `todo` - Creates a Task to be done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "todo [taskDescription]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "todo Write ReadME"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "  [T][✗] Write Readme"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `deadline` - Creates a Deadline Task with an End Date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "deadline [deadlineDescription] /by DD/MM/YYYY HHMM"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "deadline Submit README /by 19/09/2019 2359"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "  [D][✗] Submit ReadME (by: 19 SEPTEMBER 2019 2359)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `event` - Creates an Event with a Start and End Date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "event [eventDescription] /at DD/MM/YYYY HHMM - DD/MM/YYYY HHMM"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "event Attend Talk /at 20/09/2019 1000 - 20/09/2019 1200"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "  [E][✗] Attend Talk (20 SEPTEMBER 2019 1000 - 20 SEPTEMBER 2019 1200)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Now you have 8 tasks in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `done` - Marks item as completed in the Task List"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "done [taskNumber]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "done 6"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "  [T][✓] Write Readme"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `delete` - Deletes item off the Task List"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "delete [taskNumber]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "delete 6"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "  [T][✓] Write Readme"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `find` - Find via keyword a specific Task in the Task List"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "find [keyword]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "find return"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "1. [D][✓] return book (by: 10 DECEMBER 2019 0830)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `contacts` - Show your list of contacts"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "contacts"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Here is your list of contacts:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "1. Name: LoremIpsum"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Relationship: FakePerson"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Contact Number: 94350294"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Email: loremipsum@gmail.com"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "2. Name: DeXun"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Relationship: Myself"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Contact Number: -999"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Email: chia.dexun97@gmail.com"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `addContact` - Find via keyword a specific Task in the Task List"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "addContact [Name], [Relationship], [Phone Number], [Email]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "addContact Damith, Professor, 000, damith@u.nus.edu"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Got it. I\u0027ve added this contact:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Name: Damith"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Relationship: Professor"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Contact Number: 000"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Email: damith@u.nus.edu"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `findContact` - Find a contact in the contact list"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "findContact [keyword]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "findContact D"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Here is your list of contacts matching your keyword:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "1. Name: DeXun"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Relationship: Myself"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Contact Number: -999"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Email: chia.dexun97@gmail.com"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "2. Name: Damith"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Relationship: Professor"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Contact Number: 000"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Email: damith@u.nus.edu"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `deleteContact` - Delete a contact in the contact list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "deleteContact [index number]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "deleteContact 3"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Noted. I\u0027ve removed this contact: "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Name: Damith"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Relationship: Professor"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Contact Number: 000"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Email: damith@u.nus.edu"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Now you have 2 contacts in your contact list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "### `bye` - Ends and shutsdown the program"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "bye"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "```"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "Expected outcome: \u003ci\u003eProgram Terminates and Closes\u003c/i\u003e"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 198,
      "-": 12
    }
  },
  {
    "path": "src/main/java/commands/AddContactCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import contacts.Contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeStrings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class AddContactCommand extends ContactCommands {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public AddContactCommand(String args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] contactDetails \u003d args.split(\", \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.CONTACT_EMPTY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (contactDetails.length !\u003d 4) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.CONTACT_WRONG_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Contact contact \u003d new Contact(contactDetails); //args is the description string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        list.add(contact);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateContactFile(list);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 31
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Abstraction and Encapsulation of User Commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void execute(DukeList list, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 13
    }
  },
  {
    "path": "src/main/java/commands/ContactCommands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public abstract class ContactCommands implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 4
    }
  },
  {
    "path": "src/main/java/commands/ContactListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ContactListCommand extends ContactCommands {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.printList(list.getList(), \"printContacts\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 12
    }
  },
  {
    "path": "src/main/java/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeStrings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Deadlines;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to add a Deadline Obj to TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DeadlineCommand extends TaskCommands {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DeadlineCommand(String args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the DeadlineCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list   list of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If command arguments is invalid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] splitStr \u003d args.split(\"/by\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.DEADLINE_WRONG_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (splitStr[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.DEADLINE_EMPTY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime deadline \u003d Parser.parseDateTime(splitStr[1].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d new Deadlines(false, splitStr[0].trim(), deadline);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateTaskFile(list);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 49
    }
  },
  {
    "path": "src/main/java/commands/DeleteContactCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DeleteContactCommand extends ContactCommands {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DeleteContactCommand(String args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        list.delete(args); //deletes contact obj"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateContactFile(list);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 20
    }
  },
  {
    "path": "src/main/java/commands/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to delete a task from the Task List."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DeleteTaskCommand extends TaskCommands {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DeleteTaskCommand(String args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the delete command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list    list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If problems encountered with file update"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        list.delete(args); //deletes task obj"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateTaskFile(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 32
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DoneCommand extends TaskCommands {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DoneCommand(String args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the DoneCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list   list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If problem encountered with file update"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ((TaskList) list).markTask(args); //will mark task.task Obj as done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateTaskFile(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 32
    }
  },
  {
    "path": "src/main/java/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeStrings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Events;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to create an Event Task to be added to List of Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventCommand extends TaskCommands {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventCommand(String args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the EventCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list   list of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If command arguments is invalid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] splitStr \u003d args.split(\"/at\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (splitStr[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.EVENT_WRONG_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] dateString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            dateString \u003d splitStr[1].trim().split(\" - \"); //e.g. 2/12/2019 1800 - 2/12/2019 1800"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (dateString.length !\u003d 2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.EVENT_WRONG_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.EVENT_WRONG_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime start \u003d Parser.parseDateTime(dateString[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime end \u003d Parser.parseDateTime(dateString[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (start.isAfter(end)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.EVENT_NOT_CHRONO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d new Events(false, splitStr[0].trim(), start, end);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateTaskFile(list);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 63
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to exit and terminate the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ExitCommand extends TaskCommands {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to exit the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list   list of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 24
    }
  },
  {
    "path": "src/main/java/commands/FindContactCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Find Contacts by name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class FindContactCommand extends ContactCommands {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FindContactCommand(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cTask\u003e filteredContacts \u003d list.find(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.printList(filteredContacts, \"printFilteredContacts\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 25
    }
  },
  {
    "path": "src/main/java/commands/FindTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to find and filter tasks by keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class FindTaskCommand extends TaskCommands {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FindTaskCommand(String args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to exit the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list    list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d list.find(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.printList(filteredTasks, \"printFilteredTask\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 33
    }
  },
  {
    "path": "src/main/java/commands/TaskCommands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public abstract class TaskCommands implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 4
    }
  },
  {
    "path": "src/main/java/commands/TaskListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to get and print an ordered list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class TaskListCommand extends TaskCommands {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the GetList command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list   list of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.printList(list.getList(), \"printTask\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 23
    }
  },
  {
    "path": "src/main/java/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeStrings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to create a ToDo object to be added to the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ToDoCommand extends TaskCommands {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ToDoCommand(String args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the ToDo command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list   list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If command arguments is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.TODO_EMPTY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d new ToDo(false, args); //args is the description string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateTaskFile(list);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 39
    }
  },
  {
    "path": "src/main/java/commands/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeStrings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class UnknownCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to throw an exception due to an unknown command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list   list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException By default due to unknown command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(DukeList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        throw new DukeException(DukeStrings.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 22
    }
  },
  {
    "path": "src/main/java/contacts/Contact.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String relationship; //my relationship to that person"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructor for Contact Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param name          Name of Contact"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param relationship  My r/s with the contact"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param contactNumber Contact Number of contact"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param email         Email of contact"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Contact(String name, String relationship, String contactNumber, String email) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.relationship \u003d relationship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Contact(String[] contactDetails) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this(contactDetails[0], contactDetails[1], contactDetails[2], contactDetails[3]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns String to be written to file later"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Example: LoremIpsum | 01/01/1997 | FakePerson | 94350294 | loremipsum@gmail.com"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String div \u003d \" | \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(div);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(relationship);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(div);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(contactNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(div);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(email);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Name: \" + name + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Relationship: \" + relationship + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Contact Number: \" + contactNumber + \"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Email: \" + email + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 59
    }
  },
  {
    "path": "src/main/java/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates gui.DialogBox of User based on program output."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param text String of displayed output."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param img  Defined image avatar"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return gui.DialogBox used in gui.MainWindow"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        DialogBox dialogUser \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dialogUser.setId(\"user\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dialogUser;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates gui.DialogBox of Duke based on program output."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param text String of displayed output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param img  Defined image avatar"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return gui.DialogBox used in gui.MainWindow"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        DialogBox dialogDuke \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dialogDuke.flip();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dialogDuke.setId(\"duke\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dialogDuke;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 78
    }
  },
  {
    "path": "src/main/java/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 12
    }
  },
  {
    "path": "src/main/java/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Duke;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            scene.getStylesheets().add(getClass().getResource(\"/styles/styles.css\").toExternalForm());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            stage.setTitle(\"DX\u0027s Duke Chatbot\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 34
    }
  },
  {
    "path": "src/main/java/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Controller for gui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpeg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpeg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Initialize initial display of GUI."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param d Duke Object created"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                DialogBox.getDukeDialog(duke.startMessage(), dukeImage));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 62
    }
  },
  {
    "path": "src/main/java/logic/ContactList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import contacts.Contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ContactList implements DukeList\u003cContact\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private List\u003cContact\u003e contactList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ContactList(List\u003cContact\u003e taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.contactList \u003d taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cContact\u003e getList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Adds Contacts to Contact List."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param contact Contact Obj to be added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void add(Contact contact) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert contact !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        contactList.add(contact);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this contact:\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(contact + \"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Ui.loadStr(sb.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Find and filter contacts by keyword."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param keyword Keyword string to filter with"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Filtered list of tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cContact\u003e find(String keyword) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return contactList.stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .filter(contact -\u003e contact.getName().contains(keyword))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void delete(String num) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        int contactNum \u003d Parser.parseInt(num, contactList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Contact task \u003d contactList.get(contactNum - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this contact: \\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(task + \"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        contactList.remove(contactNum - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Now you have \" + contactList.size() + \" contacts in your contact list.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Ui.loadStr(sb.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 60
    }
  },
  {
    "path": "src/main/java/logic/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.TaskCommands;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Driver Class for Program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String taskPath \u003d \"./tasks.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String contactPath \u003d \"./contacts.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private ContactList contacts;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        File taskFile \u003d new File(taskPath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        File contactFile \u003d new File(contactPath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (!taskFile.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                taskFile.createNewFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (!contactFile.exists()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                contactFile.createNewFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            storage \u003d new Storage(taskFile, contactFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            contacts \u003d new ContactList(storage.loadContacts());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Ui.loadStr(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Continuously scans for User Input, Creates Command Objects and execute accordingly."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Ui.loadStr(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Returns string representation of response from Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param input User-typed input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Duke\u0027s generated response string"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (c instanceof TaskCommands) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                c.execute(contacts, ui, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Ui.loadStr(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return Ui.getLoadedStr();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String startMessage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return Ui.getLoadedStr();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 87,
      "-": 3
    }
  },
  {
    "path": "src/main/java/logic/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Exception Object for Duke Program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 10
    }
  },
  {
    "path": "src/main/java/logic/DukeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public interface DukeList\u003cT\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    List\u003cT\u003e getList();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void add(T t);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    List\u003cT\u003e find(String keyword);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void delete(String num) throws DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 13
    }
  },
  {
    "path": "src/main/java/logic/DukeStrings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DukeStrings {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String CONTACT_EMPTY \u003d \"☹ OOPS!!! You cannot add an empty contact\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String CONTACT_WRONG_FORMAT \u003d \"Invalid Contact Format\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"\\nPlease use [{name}, {relationship}, {Contact Number}, {Email}]\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String INVALID_NUMBER \u003d \"Please state a valid number\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String NONEXISTENT_NUMBER \u003d \"That number does not exist on the list, please try again\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String TODO_EMPTY \u003d \"☹ OOPS!!! The description of a todo cannot be empty\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String DEADLINE_EMPTY \u003d \"☹ OOPS!!! The description of a deadline cannot be empty\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String EVENT_EMPTY \u003d \"☹ OOPS!!! The description of an event cannot be empty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String DEADLINE_WRONG_FORMAT \u003d \"Invalid format. Please include \u0027/by\u0027 to state your deadline\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"\\nE.g. deadline work /by 12/7/2019 2000\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String EVENT_WRONG_FORMAT \u003d \"Invalid format. Please follow the format:\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"\\nevent [description] /at DD/MM/YYYY HHMM - DD/MM/YYYY HHMM\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String EVENT_NOT_CHRONO \u003d \"☹ OOPS!!! Start DateTime cannot be after End DateTime!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String INVALID_DATETIME_FORMAT \u003d \"Invalid Date-Time format.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            + \"Please use DD/MM/YYYY HHMM E.g. [2/12/2019 1800]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String FIND_EMPTY \u003d \"☹ OOPS!!! Please enter a keyword\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String UNKNOWN_INPUT \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static final String INVALID_CONTACT_NUMBER \u003d \"Please state a valid contact number\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 23
    }
  },
  {
    "path": "src/main/java/logic/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.AddContactCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.ContactListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.EventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.FindContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.FindTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.TaskListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.ToDoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.UnknownCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Deals with making sense of user command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Receives string format of a dateTime and parses it to an object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param dateTimeStr String of dateTime. E.g. 2/12/2019 1800"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return LocalDateTime variable that is stored in Deadline/Event Obj"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If given dateTimeStr is of an incorrect format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTimeStr) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] strSplit \u003d dateTimeStr.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] date \u003d strSplit[0].split(\"/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String time \u003d strSplit[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int hours \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int mins \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return LocalDateTime.of(year, month, day, hours, mins);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeException | NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.INVALID_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Converts date object to string that is written on txt file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param dateObj LocalDateTime Object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return DateTime string E.g. 10/12/2019 0830"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String toFileDateTime(LocalDateTime dateObj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert dateObj !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dateObj.getDayOfMonth() + \"/\" + dateObj.getMonthValue()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"/\" + dateObj.getYear() + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + String.format(\"%02d\", dateObj.getHour())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + String.format(\"%02d\", dateObj.getMinute());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Prints date-time in a legible format on the CLI."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param dateObj LocalDateTime Object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Date String e.g. 10 DECEMBER 2019 0830"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String printDate(LocalDateTime dateObj) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert dateObj !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dateObj.getDayOfMonth() + \" \" + dateObj.getMonth()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \" \" + dateObj.getYear() + \" \" + String.format(\"%02d\", dateObj.getHour())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + String.format(\"%02d\", dateObj.getMinute());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Attempts to convert input string into an int."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param str      String to be parsed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param dukeList List of valid objects"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Int of Task in the TaskList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If task number doesnt exist"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static int parseInt(String str, List dukeList) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        int listInt;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            listInt \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (listInt \u003e dukeList.size() || listInt \u003c\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.NONEXISTENT_NUMBER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(DukeStrings.INVALID_NUMBER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return listInt;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Massive switch statement to read user inputs."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param inputString Input read from scanner"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Command Object to be executed"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If input is invalid"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static Command parseCommand(String inputString) throws DukeException { //receives scanned string immediately"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] strSplit \u003d inputString.split(\" \", 2); //get first word and remaining"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String command \u003d strSplit[0];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new TaskListCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new DoneCommand(strSplit[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.INVALID_NUMBER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new DeleteTaskCommand(strSplit[1]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.INVALID_NUMBER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new ToDoCommand(strSplit[1]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.TODO_EMPTY);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new DeadlineCommand(strSplit[1]);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.DEADLINE_EMPTY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new EventCommand(strSplit[1]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.EVENT_EMPTY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new FindTaskCommand(strSplit[1]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.FIND_EMPTY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"contacts\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new ContactListCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"addContact\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new AddContactCommand(strSplit[1]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.CONTACT_EMPTY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"findContact\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new FindContactCommand(strSplit[1]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.FIND_EMPTY);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"deleteContact\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new DeleteContactCommand(strSplit[1]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(DukeStrings.INVALID_CONTACT_NUMBER);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new UnknownCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 178
    }
  },
  {
    "path": "src/main/java/logic/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import contacts.Contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Deadlines;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Events;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Deals with loading tasks and saving tasks in file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private File taskFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private File contactFile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Storage(File taskFile, File contactFile) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.taskFile \u003d taskFile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.contactFile \u003d contactFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Reads and scans text file, convert them to Task Objs to be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return List of Tasks loaded from text file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If encounter file creation/parsing problems"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cTask\u003e loadTasks() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Scanner sc \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String[] strArr \u003d line.split(Pattern.quote(\" | \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Task task \u003d readAndCreateTask(strArr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Ui.loadStr(\"Data is loaded from data/taskList.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                taskFile.createNewFile(); //creates new text file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (IOException ioE) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Ui.loadStr(ioE.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Reads and scans text file, convert them to Contact Objs to be added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return List of Contacts loaded from text file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cContact\u003e loadContacts() throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cContact\u003e contactList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Scanner sc \u003d new Scanner(contactFile);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String[] contactArr \u003d line.split(Pattern.quote(\" | \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                //Name, RS, Num, Email"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                if (contactArr.length !\u003d 4) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    throw new DukeException(\"Error: File corrupted, cannot read\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Contact c \u003d new Contact(contactArr); //creates contacts"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                contactList.add(c);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Ui.loadStr(\"Data is loaded from data/contactList.txt\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                contactFile.createNewFile(); //creates new text file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (IOException ioE) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Ui.loadStr(ioE.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates task from reading the string from text file. Called from loadTasks()."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param textArr String Array obtained after splitted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Task Object to be added to TaskList"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If unable to parse"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Task readAndCreateTask(String[] textArr) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String type \u003d textArr[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        boolean isDone \u003d textArr[1].equals(\"1\"); //1 means done"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"T\": //todo"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            task \u003d new ToDo(isDone, textArr[2]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"D\": //deadline"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime deadline \u003d Parser.parseDateTime(textArr[3]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            task \u003d new Deadlines(isDone, textArr[2], deadline);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"E\": //event"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] startEndStr \u003d textArr[3].split(\" - \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime start \u003d Parser.parseDateTime(startEndStr[0]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime end \u003d Parser.parseDateTime(startEndStr[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            task \u003d new Events(isDone, textArr[2], start, end);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Updates taskList text file after command execution."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskList List of Tasks in logic.TaskList"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void updateTaskFile(DukeList taskList) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cTask\u003e list \u003d taskList.getList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert list !\u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Task t \u003d list.get(i);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(t.toFileString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (i !\u003d list.size() - 1) { //final item, dont add new line"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            FileWriter fw \u003d new FileWriter(taskFile);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Ui.loadStr(\"Cannot write to file: \" + e.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Updates contactList tcext file after command execution."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param contactList List of contacts in logic.ContactList"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void updateContactFile(DukeList contactList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cContact\u003e list \u003d contactList.getList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert list !\u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Contact t \u003d list.get(i);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(t.toFileString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (i !\u003d list.size() - 1) { //final item, dont add new line"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            FileWriter fw \u003d new FileWriter(contactFile);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Ui.loadStr(\"Cannot write to file: \" + e.getMessage());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 183
    }
  },
  {
    "path": "src/main/java/logic/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Contains the logic.TaskList and has the operations to add/delete tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class TaskList implements DukeList\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Adds Tasks to Task List."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param task Task Obj to be added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"  \" + task + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Ui.loadStr(sb.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Find and filter tasks by keyword."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskDescription Keyword string to filter with"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Filtered list of tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cTask\u003e find(String taskDescription) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return taskList.stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .filter(task -\u003e task.getDescription().contains(taskDescription))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Task to be marked as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskNumStr String to be parsed as int"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If cannot parse string to int"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void markTask(String taskNumStr) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        int taskNum \u003d Parser.parseInt(taskNumStr, taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d taskList.get(taskNum - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"  \" + task.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Ui.loadStr(sb.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Task to be deleted from list of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskNumStr String to be parsed as int"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If cannot parse string to int"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void delete(String taskNumStr) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        int taskNum \u003d Parser.parseInt(taskNumStr, taskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d taskList.get(taskNum - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"  \" + task + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        taskList.remove(taskNum - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Ui.loadStr(sb.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 87
    }
  },
  {
    "path": "src/main/java/logic/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import contacts.Contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Deals with interactions with the user and output on CLI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Ui\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String printString \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Wraps the parameter String with horizontal lines for aesthetic purposes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param input String to be wrapped"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static void loadStr(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(input + \"\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        printString \u003d sb.toString(); //stores string in static variable that can be called later"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Method called by getResponse in Duke()."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return String to be shown on the GUI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String getLoadedStr() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return printString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Prints out greeting string at start of app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(logo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"What can I do for you?\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        loadStr(sb.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Prints out ordered list of tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param list List of Tasks"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void printList(List\u003cT\u003e list, String command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"printTask\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"printFilteredTask\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"printContacts\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"Here is your list of contacts:\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"printFilteredContacts\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"Here is your list of contacts matching your keyword:\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append((i + 1) + \". \" + list.get(i).toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (i !\u003d list.size() - 1) { //last item"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        loadStr(sb.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Exit Message to be printed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        loadStr(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 91
    }
  },
  {
    "path": "src/main/java/task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Deadlines(boolean isDone, String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"D | \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"1 | \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"0 | \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description + \" | \" + Parser.toFileDateTime(deadline));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"[D]\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✓] \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✗] \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\" (by: \" + Parser.printDate(deadline) + \")\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 43
    }
  },
  {
    "path": "src/main/java/task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructor for Event Object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param isDone      If task is completed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param description Description String of Event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param start       LocalDateTime Object of start"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param end         LocalDateTime Object of end"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Events(boolean isDone, String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"E | \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"1 | \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"0 | \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description + \" | \" + Parser.toFileDateTime(start) + \" - \" + Parser.toFileDateTime(end));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"[E]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✓] \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✗] \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\" (\" + Parser.printDate(start) + \" - \" + Parser.printDate(end) + \")\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "DivineDX": 50
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Task(boolean isDone, String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Marks Task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If task is already done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"task.task is already done!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Converts to String to be written onto text file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public abstract String toFileString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 38
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ToDo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"T | \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"1 | \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"0 | \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"[T]\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✓] \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[✗] \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"false\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \u003cInsets left\u003d\"15.0\" right\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.3999999999999986\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"553.0\" prefWidth\u003d\"396.0\" style\u003d\"-fx-background-color: #faebd7#faebd7;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 19
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void testParseDateTime() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime test \u003d Parser.parseDateTime(\"2/12/2019 1820\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime actual \u003d LocalDateTime.of(2019, 12, 2, 18, 20);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(test, actual);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 17
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ToDo todo \u003d new ToDo(false, \"Homework\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String expected \u003d \"[T][✗] Homework\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(expected, todo.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void testToFileString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ToDo todo \u003d new ToDo(false, \"Homework\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String expected \u003d \"T | 0 | Homework\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(expected, todo.toFileString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 21
    }
  },
  {
    "path": "tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "D | 1 | return book | 10/12/2019 0830"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "D | 1 | project meeting | 7/7/2019 0815"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "E | 0 | Do CS2103T | 20/8/2019 0000 - 18/11/2019 2359"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "D | 0 | iP | 23/9/2019 2359"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 5
    }
  }
]
