[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Duke - Your Personal Assistant Chat Bot!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Built for the CS2103T individual project, this chatbot features capabilities for users to **store tasks** and **reminders for events and deadlines** for tracking. As this chatbot is capable of **full operation just using the keyboard**, this chat bot is highly suited for users who prefer typing as well."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "This chatbot is a fork from the [original CLI chatbot](https://github.com/nus-cs2103-AY1920S1/duke) from the CS2103T module repository."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "# Prerequisites"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* [Java Runtime Environment (JRE)](https://www.oracle.com/java/technologies/jre8-downloads.html) needs to be installed to run this program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "# Preview of Duke"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "**Level-10 Implementation on 7/9/19**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/Q-gabe/duke/master/preview/DukePreview.png\" alt \u003d \"Duke Preview as of Level-10\" width\u003d\"500\" /\u003e "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "# Course Tutorials "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "# Known Issues"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* Minimize Button functionality is bugged. Hot fix is in-progress."
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 12,
      "-": 20
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "// Assigning system default input as input source"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "// Comment out if warranted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "run {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 47,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class represents a Deadline task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Deadline extends Task implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final DateTimeFormatter dateFormatter \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Creates a deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param description indicates what the task is about"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     and when the deadline is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException if input does not meet require"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     format or \u0027/by\u0027 is not specified."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Deadline(String description) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String[] splitDescription \u003d description.split(\" /by \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.description \u003d splitDescription[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.by \u003d LocalDateTime.parse(splitDescription[1], dateFormatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Please enter a deadline using \\\"/by\\\",\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \" followed by the deadline in \\\"dd/MM/yyyy HHmm\\\".\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Please enter a date with the format \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \"\\\"dd/MM/yyyy HHmm\\\".\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns a string representation of the Deadline Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a string representation of the deadline Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return \"[D]\" + super.toString()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                + \" (by: \" + by.format(dateFormatter) + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 48
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static javafx.scene.paint.Color.rgb;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Creates an instance of DialogBox as a text box representing the user\u0027s input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param text a String indicating the message from the user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param img an Image instance of the user display picture"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return an instance of DialogBox representing the user\u0027s input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        DialogBox userBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        userBox.dialog.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                Color.rgb(43,82,120),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                new CornerRadii(3),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                Insets.EMPTY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        userBox.dialog.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return userBox;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Creates an instance of DialogBox as a text box representing Duke\u0027s response."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param text a String indicating the response from Duke"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param img an Image instance of Duke\u0027s display picture"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return an instance of DialogBox representing Duke\u0027s response"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        db.dialog.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                Color.rgb(24,33,42),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                new CornerRadii(3),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                Insets.EMPTY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        db.dialog.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 94
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This program is an interactive task list that takes in several"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * preset commands from the user to create tasks, view the list of"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * tasks and mark each of it as completed. This class contains the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * main method and is responsible for all input/output and Task creation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * @author Gabriel Ong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns a instance of duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        storage \u003d new Storage(\".\" + File.separator + \"data\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            // Create new TaskList if one is non-existent"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Passes a user-inputted string to the parser and returns the parser\u0027s output."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * If the response is a \"bye\" command, it saves the current task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param input String input from the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return returns a String from Duke back to the UI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Guard function for bye command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            // Save file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                assert this.storage !\u003d null : \"Storage not initialized.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                this.storage.save(this.tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assert this.parser !\u003d null : \"Parser not initialized.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return parser.parse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 58,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Represents the exception that can store an error message"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * to be printed for the user in the operation of Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Creates an instance of a DukeException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param message indicates more details about the exception"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(\"☹ OOPS!!! \" + message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 16
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class represents an Event task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Event extends Task implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final DateTimeFormatter dateFormatter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Creates an event task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param description indicates what the task is about and when the event is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException when input does not meet required format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     or \u0027/at\u0027 is not specified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Event(String description) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String[] splitDescription \u003d description.split(\" /at \", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.description \u003d splitDescription[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.at \u003d LocalDateTime.parse(splitDescription[1], dateFormatter);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Please enter the event date using \\\"/at\\\",\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \" followed by the deadline in \\\"dd/MM/yyyy HHmm\\\".\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Please enter a date with the format \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \"dd/MM/yyyy HHmm.\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns a string representation of the Event Task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a string representation of the Event Task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                + at.format(dateFormatter) + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 46
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            stage.initStyle(StageStyle.TRANSPARENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            // Lock Dimensions of stage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            stage.setMinHeight(stage.getHeight());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            stage.setMinWidth(stage.getWidth());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            stage.setMaxHeight(stage.getHeight());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            stage.setMaxWidth(stage.getWidth());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 41
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static javafx.application.Platform.exit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    // To track cursor position"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    static double xPos;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    static double yPos;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        greetUser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            exitDuke();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private void greetUser() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Greet user upon initialization"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                .getDukeDialog(\"Hello I\u0027m Duke\\nWhat can I do for you?\", dukeImage));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private void exitDuke() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String temp \u003d duke.getResponse(\"bye\"); //Explicit \"bye message\", Hacky."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    void dragged(MouseEvent event) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Stage stage \u003d (Stage) ((Node)event.getSource()).getScene().getWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        stage.setX(event.getScreenX() - xPos);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        stage.setY(event.getScreenY() - yPos);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    void pressed(MouseEvent event) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        xPos \u003d event.getSceneX();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        yPos \u003d event.getSceneY();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    void minimize(MouseEvent event) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        ((Stage) ((Node)event.getSource()).getScene().getWindow()).setIconified(true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    void closeWindow(MouseEvent event) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        exitDuke();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 107
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class is responsible for parsing input from the UI, taking the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * String input and returning a String output."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final int DONE_SUFFIX_LENGTH \u003d 5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final int FIND_SUFFIX_LENGTH \u003d 5;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final int DELETE_SUFFIX_LENGTH \u003d 7;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final int TODO_SUFFIX_LENGTH \u003d 5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final int DEADLINE_SUFFIX_LENGTH \u003d 9;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final int EVENT_SUFFIX_LENGTH \u003d 6;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Takes in a string, parses it and immediately runs the command as parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param input a String representation of the user\u0027s input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String output for the result of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException for various input errors or if the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     command is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assert !input.equals(\"done\") : \"done command parsed incorrectly\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         * Check if command suffix to parse, split accordingly and run command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // \"done\" commands"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (input.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (input.length() \u003e DONE_SUFFIX_LENGTH) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                return setTaskDone(input.substring(DONE_SUFFIX_LENGTH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                throw new DukeException(\"The description of a done\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + \" cannot be empty.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else if (input.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (input.length() \u003e FIND_SUFFIX_LENGTH) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                String regex \u003d input.substring(FIND_SUFFIX_LENGTH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                return this.taskList.getSearchList(regex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                throw new DukeException(\"The description of a find\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + \" cannot be empty\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else if (input.startsWith(\"delete \") || input.startsWith(\"remove \")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (input.length() \u003e DELETE_SUFFIX_LENGTH) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                return deleteTask(input.substring(DELETE_SUFFIX_LENGTH));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                throw new DukeException(\"The description of a delete\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + \"/remove cannot be empty.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return addToList(input, TaskType.Todo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else if (input.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return addToList(input, TaskType.Deadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else if (input.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return addToList(input, TaskType.Event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return this.taskList.getList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \" that means :-(\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Adds a list of a particular task type to the task list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param input describes the task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param type indicates the type of task that was parsed by parse()."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String indicating the successful adding of the task to"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     the duke list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException when description is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String addToList(String input, TaskType type) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Process input string (Cut command suffix)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        case Todo:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (input.length() \u003e TODO_SUFFIX_LENGTH) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                task \u003d new Todo("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    input.substring(TODO_SUFFIX_LENGTH)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                throw new DukeException(\"The description of a todo\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + \" cannot be empty.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        case Deadline:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (input.length() \u003e DEADLINE_SUFFIX_LENGTH) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                task \u003d new Deadline("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    input.substring(DEADLINE_SUFFIX_LENGTH)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                throw new DukeException(\"The description of a deadline\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + \" cannot be empty.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        case Event:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (input.length() \u003e EVENT_SUFFIX_LENGTH) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                task \u003d new Event(input.substring("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        EVENT_SUFFIX_LENGTH)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                throw new DukeException(\"The description of an event\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + \" cannot be empty.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Error in adding Task!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return (\"Got it. I\u0027ve added this task:\\n  \" + task"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                + \"\\nNow you have \" + this.taskList.size()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                + \" tasks in the list.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Sets a task in the task list to its \u0027done\u0027 status."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param taskNum String representing the integer for the task in the list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return the String output upon successfully setting the status of the task to done"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException if the String passed as taskNum is not a valid integer"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String setTaskDone(String taskNum) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskNum);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            Task item \u003d this.taskList.get(taskIndex - 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            item.setDone();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return (\"Nice! I\u0027ve marked this task as done:\\n  \" + item);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"The description of a done\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \" must be an integer.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Deletes a specified task from the task list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param taskNum String representing the integer for the task in the list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return the String output upon successfully deleting the task"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException if the String passed as taskNum is not a valid integer"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String deleteTask(String taskNum) throws DukeException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskNum);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (this.taskList.size() \u003e\u003d taskIndex \u0026\u0026 taskIndex \u003e 0) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                String output \u003d (\"Noted. I\u0027ve removed this task:\\n  \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + this.taskList.get(taskIndex - 1)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + \"\\nNow you have \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + (this.taskList.size() - 1)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + \" tasks in the list.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                this.taskList.remove(taskIndex - 1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                throw new DukeException(\"The integer entered for \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        + \"deletion is not valid.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"The description of a delete\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \"/remove must be an integer.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 166
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class is responsible for all storage methods for duke, storing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * and saving the task list to the local drive for data persistence."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private File directoryPath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private File saveFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns an instance of Storage for duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param filepath represents the file path for the data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.directoryPath \u003d new File(filepath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        directoryPath.mkdirs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.saveFile \u003d new File(filepath + File.separator + \"list.bin\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Loads a TaskList from the storage binary at the designated file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a TaskList object loaded from the binary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException when an existing save was not found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            FileInputStream load \u003d new FileInputStream(this.saveFile);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            ObjectInputStream loadList \u003d new ObjectInputStream(load);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            TaskList taskList \u003d (TaskList) loadList.readObject();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            loadList.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Existing save not found! \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \"Creating new task list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Saves a TaskList to the storage binary at the designated file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param taskList a TaskList object to be saved into the binary."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException if save fails (either due to permissions"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     or storage space)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void save(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            FileOutputStream save \u003d new FileOutputStream(this.saveFile);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            ObjectOutputStream saveList \u003d new ObjectOutputStream(save);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            saveList.writeObject(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            saveList.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Failed to save!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 61
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class represents a basic Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns an instance of a Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param description indicates the description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assert !description.equals(\"\") : \"Task description empty!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns a tick or cross based on the status of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a character \\u2713 (tick) or \\u2718 (cross)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     representing the status of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Sets a task status to Done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns a String representation of a Task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String representation of a Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 46
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class represents a TaskList which serves as a collection"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * of Task objects for duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns an instance of TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Adds a Task to the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param task task to be inserted"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Removes a Task from the TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param index task to be removed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns the Task at the specified index in the TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param index index of the Task to return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return the Task object the specified index in the TaskList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns an integer that indicates the amount of Tasks in the task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return the amount of Tasks in the list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Return a String representation of all Tasks in the task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a string representation of all Task objects in the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException if the list is empty"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String getList() throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // List and print all items stored"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        for (Task item: this.taskList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            //noinspection StringConcatenationInsideStringBufferAppend"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            output.append(count++ + \".\" + item + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Remove terminal newline character if at least 1 item inserted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (count \u003e 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            output.deleteCharAt(output.toString().length() - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return output.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"The task list is empty.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns the string representation of Tasks that matches a partial search term."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param regex a string representing the search term"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a string containing the string representation of all Task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     objects that match the search term."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws DukeException if the list is empty"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String getSearchList(String regex) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String listOutput \u003d this.getList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        List\u003cString\u003e tasks \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(listOutput.split(\"\\n\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        tasks.removeIf(x -\u003e !x.contains(regex));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                + String.join(\"\\n\", tasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 98
    }
  },
  {
    "path": "src/main/java/duke/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Task representation upon parsing input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    Todo,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    Deadline,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    Event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 10
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class represents a To-do Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Todo extends Task implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns a to-do Task instance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param description description of the Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns a String representation of the Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String representation of the Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 26
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"40.0\" fitWidth\u003d\"40.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 28
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"615.0\" maxWidth\u003d\"500.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"615.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" onMouseDragged\u003d\"#dragged\" onMousePressed\u003d\"#pressed\" prefHeight\u003d\"26.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #242F3D;\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" onMouseDragged\u003d\"#dragged\" onMousePressed\u003d\"#pressed\" prefHeight\u003d\"100.0\" prefWidth\u003d\"450.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"15.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cImage url\u003d\"@../images/DaDuke.png\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cLabel text\u003d\"Duke - Your Personal Assistant Chat Bot!\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cImageView id\u003d\"minimize_Icon\" fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" onMouseClicked\u003d\"#minimize\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cImage url\u003d\"@../images/minimize.png\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cInsets left\u003d\"1.0\" right\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cImageView id\u003d\"close_Icon\" fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" onMouseClicked\u003d\"#closeWindow\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cImage url\u003d\"@../images/close.png\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cInsets left\u003d\"1.0\" right\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"424.0\" promptText\u003d\"Give Duke a Command...\" style\u003d\"-fx-background-color: #17212B #17212B; -fx-text-fill: #ffffff;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #2E6EA5; -fx-control-inner-background: #FFFFFF;\" text\u003d\"Send\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"25.0\" prefHeight\u003d\"550.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"560.0\" prefWidth\u003d\"488.0\" style\u003d\"-fx-background-color: #131A22;\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"2.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 67
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_ToDoCommand_writtenCorrectly() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"todo return book to library\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \"[T][✘] return book to library\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"Todo Command correctly parsed.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_ToDoCommand_empty_exceptionThrown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"todo \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \"[T][✘] return book to library\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"Exception successfully thrown: \" + e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_deadLineCommand_writtenCorrectly() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"deadline return book /by 12/12/1212 1212\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \"[D][✘] return book (by: 12/12/1212 1212)\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"deadline Command correctly parsed.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_deadLineCommand_empty_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"deadline \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \"[D][✘] return book (by: 12/12/1212 1212)\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"Exception successfully thrown: \" + e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_deadLineCommand_wrong_dateFormat() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"deadline return book /by 13/13/2019 2460\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    + \"[D][✘] return book (by: 13/13/2019 2460)\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"Exception successfully thrown: \" + e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 80
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Task testTask \u003d new Task(\"return book to library\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertEquals(testTask.toString(),\"[✘] return book to library\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        testTask.setDone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertEquals(testTask.toString(),\"[✓] return book to library\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 14
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void testStringRepresentation() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertEquals(new Todo(\"return book to library\").toString(),\"[T][✘] return book to library\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertEquals(new Todo(\"testing\").toString(),\"[T][✘] testing\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 11
    }
  }
]
