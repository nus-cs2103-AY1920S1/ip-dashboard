[
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "abstract public class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Duke duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Command(Duke duke) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    };"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    abstract public void execute(String[] args) throws DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 14
    }
  },
  {
    "path": "src/main/java/duke/CommandMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CommandMap{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    Map\u003cString, Command\u003e commands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void register(Command command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commands.put(command.getName(), command);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Command get(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return commands.get(name);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 14
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private CommandMap commandMap \u003d new CommandMap();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.commands.Bye(this));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.commands.List(this));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.commands.Done(this));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.commands.Todo(this));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.commands.Deadline(this));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.commands.Event(this));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.commands.Delete(this));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        say(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        while(sc.hasNext()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            String[] args \u003d input.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if(args.length \u003d\u003d 0) continue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Command command \u003d commandMap.get(args[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if(command !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    command.execute(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                catch(DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    oops(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                oops(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        say(\"added: \" + t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void say(String text) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        System.out.println(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void oops(String text) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        say(\"☹ OOPS!!! \" + text);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void quit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 54,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 7
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 8
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Set\u003cString\u003e requiredSwitches \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Set\u003cString\u003e optionalSwitches \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void register(String name, boolean required) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(required) requiredSwitches.add(name);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        else optionalSwitches.add(name);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Map\u003cString, String[]\u003e parse(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Set\u003cString\u003e requiredSwitchesRemaining \u003d new TreeSet\u003c\u003e(requiredSwitches);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Set\u003cString\u003e optionalSwitchesRemaining \u003d new TreeSet\u003c\u003e(optionalSwitches);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int switchStartIndex \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for(int i \u003d 1; i \u003c args.length; i++) { // command name is an implied switch"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            boolean isSwitch \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if(requiredSwitches.contains(args[i])) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if(!requiredSwitchesRemaining.remove(args[i])) throw new DukeException(\"Repeated switch \" + args[i]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isSwitch \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            else if(optionalSwitches.contains(args[i])) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if(!optionalSwitchesRemaining.remove(args[i])) throw new DukeException(\"Repeated switch \" + args[i]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isSwitch \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if(isSwitch) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    // This allows for switches with no arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    switchArgs.put(args[switchStartIndex], Arrays.copyOfRange(args, switchStartIndex + 1, i));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                } catch (IllegalArgumentException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    throw new DukeException(\"Bad arguments for switch \" + args[switchStartIndex]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                switchStartIndex \u003d i;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Add last switch"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        switchArgs.put(args[switchStartIndex], Arrays.copyOfRange(args, switchStartIndex+1, args.length));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(!requiredSwitchesRemaining.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            for(String s : requiredSwitchesRemaining) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(s);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(requiredSwitchesRemaining.size() \u003d\u003d 1 ? \"is a required switch\" : \"are required switches\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(sb.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return switchArgs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String concatenate(String[] strings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return concatenate(strings, 0, strings.length);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String concatenate(String[] strings, int fromIndex, int toIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for(int i \u003d fromIndex; i \u003c toIndex; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(strings[i]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if(i !\u003d toIndex-1) sb.append(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 63
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "abstract public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task(String d) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        description \u003d d;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        done \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public char getStatusChar() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return done ? \u0027✓\u0027 : \u0027✗\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(done) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Task is already done!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    abstract public String toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 23
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone(int oneIndex) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.get(oneIndex-1).markDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task delete(int oneIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.remove(oneIndex-1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task get(int oneIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.get(oneIndex-1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            s \u003d s + String.format(\"%d. %s\\n\", (i+1), tasks.get(i).toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/Bye.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Bye extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Bye(Duke duke) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(duke);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        name \u003d \"bye\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.say(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.quit();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 15
    }
  },
  {
    "path": "src/main/java/duke/commands/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Deadline extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Deadline(Duke duke) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(duke);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        name \u003d \"deadline\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        parser.register(\"/by\", true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] byArgs \u003d switchArgs.get(\"/by\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(byArgs.length \u003d\u003d 0) throw new DukeException(\"The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.addTask(new duke.tasks.Deadline(Parser.concatenate(comArgs), Parser.concatenate(byArgs)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 30
    }
  },
  {
    "path": "src/main/java/duke/commands/Delete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Delete extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Delete(Duke duke) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(duke);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        name \u003d \"delete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"An index must be specified.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int oneIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oneIndex \u003d Integer.parseInt(comArgs[0]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        catch(NumberFormatException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The index to be deleted must be an integer.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            task \u003d taskList.delete(oneIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        catch(IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"There is no task with index \" + oneIndex + \".\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.say(String.format(\"Noted. I\u0027ve removed this task:\\n\\t%s\\nNow you have %d task%s in the list.\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                task.toString(), taskList.size(), taskList.size() \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/Done.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Done extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Done(Duke duke) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(duke);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        name \u003d \"done\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"An index must be specified.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int oneIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oneIndex \u003d Integer.parseInt(comArgs[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        catch(NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The index to be marked must be an integer.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            taskList.markDone(oneIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        catch(IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"There is no task with index \" + oneIndex + \".\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.say(\"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(oneIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 39
    }
  },
  {
    "path": "src/main/java/duke/commands/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Event extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Event(Duke duke) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(duke);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        name \u003d \"event\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        parser.register(\"/at\", true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] atArgs \u003d switchArgs.get(\"/at\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(atArgs.length \u003d\u003d 0) throw new DukeException(\"The date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.addTask(new duke.tasks.Event(Parser.concatenate(comArgs), Parser.concatenate(atArgs)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 30
    }
  },
  {
    "path": "src/main/java/duke/commands/List.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class List extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public List(Duke duke) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(duke);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        name \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(taskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            duke.say(duke.getTaskList().toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            duke.say(\"No tasks yet.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Todo extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Todo(Duke duke) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(duke);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        name \u003d \"todo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.addTask(new duke.tasks.Todo(Parser.concatenate(comArgs)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 23
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Deadline(String desc, String date) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[D][%c] %s (by: %s)\", getStatusChar(), description, date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 16
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Event(String desc, String date) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[E][%c] %s (at: %s)\", getStatusChar(), description, date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 16
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Todo(String d) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[T][%c] %s\", getStatusChar(), getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 14
    }
  }
]
