[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "run {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 24,
      "-": 15
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.frontend.DialogBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is the entrance of the whole system. It controls the logic of how the system runs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Private instances for the back end."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Private instances for the front end."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The constructor of the class, to be called at the beginning when the system is activated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * It initializes the storage class, user end."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The previously saved task list will be reloaded through the storage class and used to initialize the task list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tasks \u003d new TaskList(storage.reload(\"taskfile.txt\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // 1.  Set up the required components."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sendButton \u003d new Button(\"send\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AnchorPane mainLayer \u003d new AnchorPane();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        mainLayer.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        scene \u003d new Scene(mainLayer);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // 2. Formatting the window to look as expected."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        mainLayer.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                DialogBox.getDukeDialog(new Label(ui.showWelcome()), new ImageView(duke))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // 3. Handle user input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (handleUserInput()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private boolean handleUserInput() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String dukeResponse;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        boolean canExit \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command c \u003d Parser.parse(userInput.getText());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            dukeResponse \u003d c.execute(tasks, ui);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            canExit \u003d c.isExit();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            dukeResponse \u003d e.getMessage();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Label dukeText \u003d new Label(dukeResponse);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return canExit;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 137
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// This is a very general class \u003d about exceptions generated by duke.Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// Raise this exception only when no other better exceptions to choose from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 9
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 9
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is the Command subclass for add new tasks into the target task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @Extend duke.commands.Command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private String taskTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private String taskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This is the constructor when the task to add is a todo task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskType This parameter must be \"T\", to show that task type is Todo."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskName The task name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public AddCommand(String taskType, String taskName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This is the constructor when the task to add is an event or deadline task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskType This parameter should be \"E\" or \"D\", to show whether it is an event or a deadline task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskName The task name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskTime The time of the task, should be in the form \"dd/MM/yyyy HH:mm:ss\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *                 to avoid exception in execute method."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public AddCommand(String taskType, String taskName, String taskTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.taskTime \u003d taskTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method adds the target task to the target task list and let the target user end to print command message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The target task list to accept execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param ui The target user end to print command information."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the taskName is empty or the taskTime is not in form \"dd/MM/yyyy HH:mm:ss\"."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String execute(TaskList tl, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkNullPointer(tl, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assert taskType \u003d\u003d \"T\" || taskType \u003d\u003d \"E\" || taskType \u003d\u003d \"D\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"taskType is invalid in the AddCommand.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Task toAdd;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            toAdd \u003d new Todo(taskName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            toAdd \u003d new Event(taskName, taskTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            toAdd \u003d new Deadline(taskName, taskTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tl.addTask(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return ui.showAddMessage(toAdd, tl.getTotalNumber());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Determines whether this is an exit command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return boolean false."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 75
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The abstract super class for all commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This class will call corresponding methods in the TaskList class to carry out user\u0027s commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Note that the majority of DukeExceptions should be generated from this class, which means that"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *     Command class must check that the user\u0027s command is safe to execute before really send for"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *     execution. Otherwise, it should directly throw out a DukeException containing the error"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *     message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Execute the command on target task list and print command information through target user end."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The target task list to accept execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param ui The target user end to print command information."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException Based on requirements of a Command subclass."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public abstract String execute(TaskList tl, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Determines whether this is an exit command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return boolean, true if the specific command is an exit command, false otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected void checkNullPointer(TaskList tl, Ui ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assert tl !\u003d null: \"This command is pointing to a null task list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assert ui !\u003d null: \"This command is pointing to a null user interface.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is the Command subclass to delete target task from the target task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @Extends duke.commands.Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** The position of the task to delete. Note the first task in the list has position 1 */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructor of the class, nothing special."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param position The position of the task to delete."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public DeleteCommand(int position) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method deletes the task at the given position in the target task list and let the target"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     user end print out command message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The target task list to accept execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param ui The target user end to print command information."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the position is out of bound of the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String execute(TaskList tl, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkNullPointer(tl, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (position \u003e tl.getTotalNumber() || position \u003c 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DukeException(\"There is no such task in the list. Please input a valid task number.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Task deletedTask \u003d tl.deleteTask(position);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int totalTaskNumber \u003d tl.getTotalNumber();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return ui.showDeleteMessage(deletedTask, totalTaskNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Determines whether this is an exit command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return boolean false."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 51
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is the Command subclass to exit duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @Extends duke.commands.Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructor of the class, nothing special."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method calls the target task list to save itself to a file and let the target user end"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     to print out goodbye message to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The target task list to accept execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param ui The target user end to print command information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If IOException occurs in the saving process."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String execute(TaskList tl, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkNullPointer(tl, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.rewrite();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return ui.showExitMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DukeException(\"Unable to rewrite task list. Modification this time cannot be saved.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Determines whether this is an exit command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return boolean true."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 48
    }
  },
  {
    "path": "src/main/java/duke/commands/FakeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is the Command subclass particularly handle the invalid commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Invalid commands only refers to the first key word of the user\u0027s command cannot be recognized."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FakeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Contructor of the class, nothing special."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @Extends duke.commands.Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FakeCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method directly throw out an DukeException to tell the user that this command is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The target task list to accept execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param ui The target user end to print command information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException Throw it anyway sinc ethe command is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String execute(TaskList tl, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkNullPointer(tl, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        throw new DukeException(\"Please input a valid command.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Determines whether this is an exit command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return boolean false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is the command subclass to list out all tasks whose task name contains the targeting string s."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @Extends Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private String target;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructor of the class, nothing special."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param target The target string to look for in the task names."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FindCommand(String target) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The override method execute from the superclass Command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * It gets the string array list from the target tl and let the target ui to print it out."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The target task list to accept execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param ui The target user end to print command information."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the target string is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String execute(TaskList tl, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkNullPointer(tl, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (target.equals(\"\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DukeException(\"The finding message cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return ui.showFindMessage(tl.listMatchTask(target));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Determines whether this is an exit command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return boolean false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 47
    }
  },
  {
    "path": "src/main/java/duke/commands/FinishCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is the Command subclass to set a target class in the task list as finish."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @Extends duke.commands.Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FinishCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** The position of the task to be set as finish. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The constructor of the class, nothing special."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param position The position of the task to delete."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FinishCommand(int position) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method set the target task in the target task list as finished and let the target user end to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     print out command message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The target task list to accept execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param ui The target user end to print command information."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the position is out of bound of the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String execute(TaskList tl, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkNullPointer(tl, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (position \u003e tl.getTotalNumber() || position \u003c 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DukeException(\"There is no such task in the list. Please input a valid task number.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return ui.showFinishMessage(tl.finishTask(position));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Determines whether this is an exit command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return boolean false."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 48
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is the Command subclass to list out all tasks in the target task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @Extends duke.commands.Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructor of the class, nothing special."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The override method execute from the superclass Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * It gets the string array list from the target tl and let the target ui to print it out."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The target task list to accept execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param ui The target user end to print command information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String execute(TaskList tl, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkNullPointer(tl, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return ui.showListMessage(tl.listAllTask());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Determines whether this is an exit command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return boolean false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 39
    }
  },
  {
    "path": "src/main/java/duke/directprocessor/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.directprocessor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.FakeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.FinishCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is a class that recognizes the user\u0027s input and calls the corresponding command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * It only recognizes the first word of the user input and key words like \"/at\", \"/by\"."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Both its methods are static, so there is no necessity to initialize one."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * It recognizes the user input and call the corresponding commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s The user\u0027s input as a string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The recognized command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the command is incomplete."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Command parse(String s) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String[] splitInput \u003d splitInput(s);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (splitInput[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return listCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (splitInput[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return exitCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (splitInput[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return todoCommand(splitInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (splitInput[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return eventCommand(splitInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (splitInput[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return deadlineCommand(splitInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (splitInput[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return finishCommand(splitInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (splitInput[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return deleteCommand(splitInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (splitInput[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return findCommand(splitInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return fakeCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The assistance method to return a list command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return A new ListCommand."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Command listCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The assistance method to return an exit command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return A new ExitCommand."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Command exitCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The assistance method to return a todo command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param splitInput The user input split by white space."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return A new TodoCommand."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Command todoCommand(String[] splitInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String taskName \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 1; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            taskName \u003d taskName + splitInput[i];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (i !\u003d splitInput.length - 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                taskName \u003d taskName + \" \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new AddCommand(\"T\", taskName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The assistance method to return a event command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param splitInput The user input split by white space."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return A new EventCommand."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Command eventCommand(String[] splitInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String taskName \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String taskTime \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int timeStartFrom \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 1; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (splitInput[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                timeStartFrom \u003d i + 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (i !\u003d 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                taskName \u003d taskName + \" \";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            taskName \u003d taskName + splitInput[i];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (timeStartFrom !\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            for (int i \u003d timeStartFrom; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                taskTime \u003d taskTime + splitInput[i];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                if (i !\u003d splitInput.length - 1) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    taskTime \u003d taskTime + \" \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new AddCommand(\"E\", taskName, taskTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The assistance method to return a deadline command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param splitInput The user input split by white space."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return A new DeadlineCommand."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Command deadlineCommand(String[] splitInput) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String taskName \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String taskTime \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int timeStartFrom \u003d 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 1; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (splitInput[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                timeStartFrom \u003d i + 1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (i !\u003d 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                taskName \u003d taskName + \" \";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            taskName \u003d taskName + splitInput[i];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (timeStartFrom !\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            for (int i \u003d timeStartFrom; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                taskTime \u003d taskTime + splitInput[i];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                if (i !\u003d splitInput.length - 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    taskTime \u003d taskTime + \" \";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new AddCommand(\"D\", taskName, taskTime);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The assistance method to return a finish command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param splitInput The user input split by white space."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return A new FinishCommand."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the index of the finished task is not specified."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Command finishCommand(String[] splitInput) throws DukeException{"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return new FinishCommand(Integer.parseInt(splitInput[1]));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DukeException(\"Please specify which task is finished by its order in the task list.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The assistance method to return a delete command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param splitInput The user input split by white space."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return A new DeleteCommand."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException if the index of the task to delete is not specified."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Command deleteCommand(String[] splitInput) throws DukeException{"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(splitInput[1]));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DukeException(\"Plase specify which task needs to be deleted by its order in the task list.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The assistance method to return a find command."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param splitInput The user input split by white space."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return A new FindCommand."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Command findCommand(String[] splitInput) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String target \u003d \"\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 1; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            target \u003d target + splitInput[i];"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (i !\u003d splitInput.length - 1) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                target \u003d target + \" \";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new FindCommand(target);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The assistance method to return a fake command."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return A new FakeCommand."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Command fakeCommand() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new FakeCommand();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method helps breaks the user\u0027s input by white spaces."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s The user input as a string."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The split user input."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static String[] splitInput(String s) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return s.split(\" \");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 213
    }
  },
  {
    "path": "src/main/java/duke/directprocessor/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.directprocessor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This class is in charge of reloading previous task list from the hard disk."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *  It reads the task list from the file from a given file name,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *  In this file, each line is a task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *  Its only method is static, so there is no necessity to initialize one."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static BufferedReader reader;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Reload the task list as an array list of tasks from the target file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param fileName The path of the file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return an array list of tasks saved in the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IOException If loading process is wrong."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the initialization of a task type fails."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static ArrayList\u003cTask\u003e reload(String fileName) throws IOException, DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        reader \u003d new BufferedReader(new FileReader(fileName));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ArrayList\u003cTask\u003e toReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (reader \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return toReturn;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        while (line !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            String[] lineComponents \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task toAdd \u003d translateTask(lineComponents);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            toReturn.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The method that translate a single line into a task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param lineComponents The line in the file split by \"|\"."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return the translated Task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the initialization of the task type fails."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Task translateTask(String[] lineComponents) throws DukeException{"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        boolean isFinished;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (lineComponents[1].equals(\"0\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            isFinished \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String taskName \u003d lineComponents[2];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (lineComponents[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assert lineComponents.length !\u003d 3: \"The file is wrong.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return  translateTodo(taskName, isFinished);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (lineComponents[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assert lineComponents.length !\u003d 4: \"The file is wrong\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return translateDeadline(taskName, isFinished, lineComponents[3]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assert lineComponents.length !\u003d 4: \"The file is wrong\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return translateEvent(taskName, isFinished, lineComponents[3]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Todo translateTodo(String taskName, boolean isFinished) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Todo toAdd \u003d new Todo(taskName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            toAdd.setAsFinish();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Event translateEvent(String taskName, boolean isFinished, String taskTime) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Event toAdd \u003d new Event(taskName, taskTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            toAdd.setAsFinish();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Deadline translateDeadline(String taskName, boolean isFinished, String taskTime) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Deadline toAdd \u003d new Deadline(taskName, taskTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            toAdd.setAsFinish();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 98
    }
  },
  {
    "path": "src/main/java/duke/directprocessor/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.directprocessor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This class holds the current task list input by the user. It is also in charge of save the task list into a file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *     when the exit command is given by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The constructor of the class to generate an empty task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Note that this constructor will be applied only when it fails to read from the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The constructor of the class to give an existing task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This constructor is used when Storage class successfully read from the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskList The task list read from the input file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This methods return how many tasks are there in this task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return the number of tasks in the task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getTotalNumber() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method adds a given task t to the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param t The task to be added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method delete the task at  a given position from the task list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Do not worry about IndexOutOfBoundException, it will be caught in the duke.commands.DeleteCommand class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param position The position of the task to be deleted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The deleted task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Task deleteTask(int position) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Task toReturn \u003d taskList.get(position - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        taskList.remove(position - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method set the task at a given position from the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Do not worry about IndexOutOfBoundException, it will be caught in the duke.commands.FinishCommand class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param position The position of the task to be set as finish."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The finished task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Task finishTask(int position) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        taskList.get(position - 1).setAsFinish();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return taskList.get(position - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns all tasks whose task name contains the given message s in the form of a string array list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s The target string we want to find inside the task name."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return All tasks whose task name matches the target string in the form of a string array list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ArrayList\u003cString\u003e listMatchTask(String s) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ArrayList\u003cString\u003e toReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int frontier \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (taskList.get(i).match(s)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                toReturn.add((frontier) + \".\" + taskList.get(i).taskInfo());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                frontier++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method list out all tasks in their task information as an string array list in the task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The task information of all tasks in the form of a string array list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ArrayList\u003cString\u003e listAllTask() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ArrayList\u003cString\u003e toReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            toReturn.add((i + 1) + \".\" + taskList.get(i).taskInfo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method record the task list into a task file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IOException When the file cannot be written"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void rewrite() throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        PrintWriter pw \u003d new PrintWriter(\"taskfile.txt\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        pw.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        BufferedWriter recorder \u003d new BufferedWriter("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new FileWriter(\"taskfile.txt\", true));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            recorder.write(t.recordInfo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            recorder.write(\"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        recorder.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 118
    }
  },
  {
    "path": "src/main/java/duke/directprocessor/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.directprocessor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The user end of the system. It is in charge of printing information on the screen and take user\u0027s input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Scanner userCommandTaker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The constructor of the class. Simply initialize the scanner, nothing special."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userCommandTaker \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method pints out the welcome message to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        toReturn \u003d toReturn + \"Hello, I\u0027m duke.\" + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        toReturn \u003d toReturn + \"What can I do for you?\" + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method is called to tell the user when the system is unable to load the previous task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return \"Unable to load previous task list. We are starting with a new one.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method is called to tell the user that a task is successfully added to the task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param t The task just have been added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String showAddMessage(Task t, int totalTaskNumber) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return \"Got it. I have added this task:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                + \" \" + t.taskInfo() + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                + \"You have now \" + totalTaskNumber + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method is to tell the user that a task is successfully deleted from the task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param t The task just have been deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String showDeleteMessage(Task t, int totaltaskNumber) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                + \"  \" + t.taskInfo() + \"\\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Now you have \" + totaltaskNumber + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This task is to list out the task list when the list command is given by the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The task information to be listed out in the form of a string array list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String showListMessage(ArrayList\u003cString\u003e tl) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 0; i \u003c tl.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            toReturn \u003d toReturn + tl.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method is to tell the user that a task is successfully set as finished."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param t The task that just have been set as finished."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String showFinishMessage(Task t) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return \"Nice! I have set this task as done:\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                + \" \" + t.taskInfo() + \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method shows the reader all tasks that matches his target array."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tl The task information to be listed out in the form of a string array list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String showFindMessage(ArrayList\u003cString\u003e tl) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        toReturn \u003d toReturn + \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 0; i \u003c tl.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "           toReturn \u003d toReturn + \" \" + tl.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method is to give the user a goodbye message when the exit command is given."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String showExitMessage() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 98
    }
  },
  {
    "path": "src/main/java/duke/frontend/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.frontend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public DialogBox(Label label, ImageView iv) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        text \u003d label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 43
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The deadline subclass of the Task superclass. They have a instance deathTime which is the due time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @Extends duke.tasks.Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** The deadline of the task. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Date deathTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    SimpleDateFormat myFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructor of the class. The deadline is taken as a string and transformed using a date format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskName The task name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param deathTime the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the task name is empty or the deathTime string is not in format \"dd/MM/yyyy HH:mm:ss\"."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Deadline(String taskName, String deathTime) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            this.deathTime \u003d myFormat.parse(deathTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DukeException(\"The date input format is not correct, \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    + \"it should be in the form dd/MM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns the information of the task FOR THE USER to see."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Output of this method is usually handled by Ui class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The information of the task, in form [type][finished] task name. For example, [T][X] Eat dinner."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String taskInfo() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String indicator;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isFinished()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            indicator \u003d \"[\\u2713] \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            indicator \u003d \"[\\u2715] \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return \"[D]\" + indicator + getName() + \" (by: \" + myFormat.format(deathTime) + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns the information of the task FOR SAVING INTO A FILE."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Output of this method is usually handled by the task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The information of the task, in form type|finished|task name. For example, T|0|Eat dinner."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String recordInfo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isFinished()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return \"D|\" + \"1|\" + getName() + \"|\" + myFormat.format(deathTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return \"D|\" + \"0|\" + getName() + \"|\" + myFormat.format(deathTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 68
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The event subclass of the Task superclass. They have a instance eventTime which is when is this event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @Extends duke.tasks.Task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** When is this task. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Date eventTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    SimpleDateFormat myFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructor of the class. The event time is taken as a string and transformed using a date format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskName The task name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param eventTime the event time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the task name is empty or the eventTime string is not in format \"dd/MM/yyyy HH:mm:ss\"."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Event(String taskName, String eventTime) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            this.eventTime \u003d myFormat.parse(eventTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DukeException(\"The date input format is not correct, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    + \"it should be in the form dd/MM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns the information of the task FOR THE USER to see."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Output of this method is usually handled by Ui class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The information of the task, in form [type][finished] task name. For example, [T][X] Eat dinner."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String taskInfo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String indicator;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isFinished()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            indicator \u003d \"[\\u2713] \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            indicator \u003d \"[\\u2715] \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return \"[E]\" + indicator + getName() + \" (at: \" + myFormat.format(eventTime) + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns the information of the task FOR SAVING INTO A FILE."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Output of this method is usually handled by the task list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The information of the task, in form type|finished|task name. For example, T|0|Eat dinner."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String recordInfo() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isFinished()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return \"E|\" + \"1|\" + getName() + \"|\" + myFormat.format(eventTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return \"E|\" + \"0|\" + getName() + \"|\" + myFormat.format(eventTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 63
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is abstract class for all tasks. Each task contains a taskName and whether it is finished or not."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * They can return their own information as a String to the user or to write into a file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** Indicate whether this task is finished or not. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private boolean finished;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** The task name. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * General constructor, initialize a task, the finished instance is false and set the taskName."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskName The task name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the task name is empty."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Task(String taskName) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (taskName.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DukeException(\"Input task name cannot be empty.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.finished \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns the information of the task FOR THE USER to see."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Output of this method is usually handled by Ui class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The information of the task, in form [type][finished] task name. For example, [T][X] Eat dinner."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public abstract String taskInfo();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns the information of the task FOR SAVING INTO A FILE."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Output of this method is usually handled by the task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The information of the task, in form type|finished|task name. For example, T|0|Eat dinner."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public abstract String recordInfo();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns the name of the task. Only be passed around inside the package."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The name of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected String getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Decide whether the give string is contained in the task name or not."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s The target string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return boolean, whether s is contained in the task name or not."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean match(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return taskName.contains(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Change the finished instance to true."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setAsFinish() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.finished \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Show if the task is finished or not. Only be passed around inside the package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected boolean isFinished() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return finished;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 75
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The Todo subclass of the Task superclass."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @Extends duke.tasks.Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructor of the class, same as its super class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param taskName the task name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DukeException If the task name is empty."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Todo(String taskName) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns the information of the task FOR THE USER to see."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Output of this method is usually handled by Ui class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The information of the task, in form [type][finished] task name. For example, [T][X] Eat dinner."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String taskInfo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String indicator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isFinished()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            indicator \u003d \"[\\u2713] \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            indicator \u003d \"[\\u2715] \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return \"[T]\" + indicator + getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method returns the information of the task FOR SAVING INTO A FILE."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Output of this method is usually handled by the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The information of the task, in form type|finished|task name. For example, T|0|Eat dinner."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String recordInfo() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isFinished()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return \"T|\" + \"1|\" + getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return \"T|\" + \"0|\" + getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 49
    }
  },
  {
    "path": "src/test/java/duke/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.FakeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.FinishCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void validAddCommandTest1() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac \u003d new AddCommand(\"T\", \"Eat dinner\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac.execute(tl, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertFalse(ac.isExit());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"1.[T][\\u2715] Eat dinner\", tl.listAllTask().get(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(1, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void validAddCommandTest2() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac1 \u003d new AddCommand(\"D\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Software Engineering project\", \"19/08/2019 00:00:00\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac2 \u003d new AddCommand(\"E\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Drink beer\", \"19/08/2019 20:00:00\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac3 \u003d new AddCommand(\"T\", \"Eat dinner\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac1.execute(tl, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac2.execute(tl, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac3.execute(tl, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ArrayList\u003cString\u003e check \u003d tl.listAllTask();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"1.[D][\\u2715] Software Engineering project (by: 19/08/2019 00:00:00)\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    check.get(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"2.[E][\\u2715] Drink beer (at: 19/08/2019 20:00:00)\", check.get(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"3.[T][\\u2715] Eat dinner\", check.get(2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(1, 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void invalidAddCommandTest1() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac1 \u003d new AddCommand(\"D\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Software Engineering project\", \"19/08/2019 00:00:00\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac2 \u003d new AddCommand(\"E\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Drink beer\", \"Saturday\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac3 \u003d new AddCommand(\"T\", \"Eat dinner\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac1.execute(tl, ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac2.execute(tl, ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac3.execute(tl, ui);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ArrayList\u003cString\u003e check \u003d tl.listAllTask();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(1, 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"The date input format is not correct, \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    + \"it should be in the form dd/MM/yyyy HH:mm:ss\", e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void invalidAddCommandTest2() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac1 \u003d new AddCommand(\"D\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"\", \"19/08/2019 00:00:00\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac2 \u003d new AddCommand(\"E\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Drink beer\", \"19/08/2019 20:00:00\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac3 \u003d new AddCommand(\"T\", \"Eat dinner\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac1.execute(tl, ui);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac2.execute(tl, ui);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac3.execute(tl, ui);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ArrayList\u003cString\u003e check \u003d tl.listAllTask();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(1, 2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"Input task name cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void validDeleteCommandTest() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac1 \u003d new AddCommand(\"D\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Software Engineering project\", \"19/08/2019 00:00:00\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac2 \u003d new AddCommand(\"E\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Drink beer\", \"19/08/2019 20:00:00\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac3 \u003d new AddCommand(\"T\", \"Eat dinner\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        DeleteCommand dc1 \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac1.execute(tl, ui);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac2.execute(tl, ui);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac3.execute(tl, ui);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            dc1.execute(tl, ui);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ArrayList\u003cString\u003e check \u003d tl.listAllTask();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"1.[E][\\u2715] Drink beer (at: 19/08/2019 20:00:00)\", check.get(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"2.[T][\\u2715] Eat dinner\", check.get(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(1, 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void fakeCommandTest() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FakeCommand fc  \u003d new FakeCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            fc.execute(tl, ui);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(1, 2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"Please input a valid command.\", e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void validFinishCommandTest() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac1 \u003d new AddCommand(\"D\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Software Engineering project\", \"19/08/2019 00:00:00\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac2 \u003d new AddCommand(\"E\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Drink beer\", \"19/08/2019 20:00:00\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac3 \u003d new AddCommand(\"T\", \"Eat dinner\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FinishCommand fc \u003d new FinishCommand(3);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac1.execute(tl, ui);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac2.execute(tl, ui);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac3.execute(tl, ui);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            fc.execute(tl, ui);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ArrayList\u003cString\u003e check \u003d tl.listAllTask();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"1.[D][\\u2715] Software Engineering project (by: 19/08/2019 00:00:00)\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    check.get(0));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"2.[E][\\u2715] Drink beer (at: 19/08/2019 20:00:00)\", check.get(1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"3.[T][\\u2713] Eat dinner\", check.get(2));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(1, 2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void findCommandTest() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac1 \u003d new AddCommand(\"D\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Software Engineering project\", \"19/08/2019 00:00:00\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac2 \u003d new AddCommand(\"E\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \"Drink beer\", \"19/08/2019 20:00:00\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AddCommand ac3 \u003d new AddCommand(\"T\", \"Eat dinner\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FinishCommand fc \u003d new FinishCommand(3);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FindCommand fdc \u003d new FindCommand(\"dinner\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac1.execute(tl, ui);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac2.execute(tl, ui);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ac3.execute(tl, ui);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            fc.execute(tl, ui);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            fdc.execute(tl, ui);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ArrayList\u003cString\u003e check \u003d tl.listMatchTask(\"dinner\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(\"1.[T][\\u2713] Eat dinner\", check.get(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(1, check.size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Assertions.assertEquals(1, 2);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 175
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addTodoTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command c \u003d Parser.parse(\"todo Eat dinner\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"duke.commands.AddCommand\", c.getClass().getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addEventTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command c \u003d Parser.parse(\"event Eat dinner /at 19/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"duke.commands.AddCommand\", c.getClass().getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addDeadlineTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command c \u003d Parser.parse(\"deadline Eat dinner /by 19/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"duke.commands.AddCommand\", c.getClass().getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void finishTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command c \u003d Parser.parse(\"done 2\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"duke.commands.FinishCommand\", c.getClass().getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void listTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command c \u003d Parser.parse(\"list\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"duke.commands.ListCommand\", c.getClass().getName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void exitTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command c \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"duke.commands.ExitCommand\", c.getClass().getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 76
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.directprocessor.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addTaskTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.addTask(new Todo(\"Eat dinner\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.addTask(new Event(\"Drink beer\", \"19/08/2019 20:00:00\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.addTask(new Deadline(\"Software Engineering Project\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \"20/08/2019 00:00:00\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ArrayList\u003cString\u003e check \u003d tl.listAllTask();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"1.[T][\\u2715] Eat dinner\", check.get(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"2.[E][\\u2715] Drink beer (at: 19/08/2019 20:00:00)\", check.get(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"3.[D][\\u2715] Software Engineering Project (by: 20/08/2019 00:00:00)\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    check.get(2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void finishTaskTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.addTask(new Todo(\"Eat dinner\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.addTask(new Event(\"Drink beer\", \"19/08/2019 20:00:00\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.addTask(new Deadline(\"Software Engineering Project\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \"20/08/2019 00:00:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.finishTask(2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ArrayList\u003cString\u003e check \u003d tl.listAllTask();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"1.[T][\\u2715] Eat dinner\", check.get(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"2.[E][\\u2713] Drink beer (at: 19/08/2019 20:00:00)\", check.get(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"3.[D][\\u2715] Software Engineering Project (by: 20/08/2019 00:00:00)\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    check.get(2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void deleteTaskTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.addTask(new Todo(\"Eat dinner\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.addTask(new Event(\"Drink beer\", \"19/08/2019 20:00:00\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.addTask(new Deadline(\"Software Engineering Project\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \"20/08/2019 00:00:00\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.finishTask(2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tl.deleteTask(3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ArrayList\u003cString\u003e check \u003d tl.listAllTask();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"1.[T][\\u2715] Eat dinner\", check.get(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"2.[E][\\u2713] Drink beer (at: 19/08/2019 20:00:00)\", check.get(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 71
    }
  },
  {
    "path": "src/test/java/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void todoTaskInfoTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Todo(\"Eat Dinner\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"[T][\\u2715] Eat Dinner\",t.taskInfo());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void todoRecordInfoTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Todo(\"Eat Dinner\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"T|0|Eat Dinner\",t.recordInfo());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void todoFinishTest1() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Todo(\"Eat Dinner\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            t.setAsFinish();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"[T][\\u2713] Eat Dinner\",t.taskInfo());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void todoFinishTest2() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Todo(\"Eat Dinner\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            t.setAsFinish();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"T|1|Eat Dinner\",t.recordInfo());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void todoInvalidTaskNameTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Todo(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void deadlineTaskInfoTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Deadline(\"Eat dinner\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"[D][\\u2715] Eat dinner (by: 12/08/2019 18:00:00)\", t.taskInfo());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void deadlineRecordInfoTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Deadline(\"Eat dinner\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"D|0|Eat dinner|12/08/2019 18:00:00\", t.recordInfo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void deadlineFinishTest1() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Deadline(\"Eat dinner\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            t.setAsFinish();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"[D][\\u2713] Eat dinner (by: 12/08/2019 18:00:00)\", t.taskInfo());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void deadlineFinishTest2() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Deadline(\"Eat dinner\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            t.setAsFinish();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"D|1|Eat dinner|12/08/2019 18:00:00\", t.recordInfo());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void deadlineInvalidNameTest() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Deadline(\"\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void deadlineInvalidTimeTest() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Deadline(\"\", \"gouliguojiashengsiyi\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void eventTaskInfoTest() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Event(\"Eat dinner\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"[E][\\u2715] Eat dinner (at: 12/08/2019 18:00:00)\", t.taskInfo());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void eventRecordInfoTest() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Event(\"Eat dinner\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"E|0|Eat dinner|12/08/2019 18:00:00\", t.recordInfo());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void eventFinishTest1() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Event(\"Eat dinner\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            t.setAsFinish();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"[E][\\u2713] Eat dinner (at: 12/08/2019 18:00:00)\", t.taskInfo());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void eventFinishTest2() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Event(\"Eat dinner\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            t.setAsFinish();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(\"E|1|Eat dinner|12/08/2019 18:00:00\", t.recordInfo());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void eventInvalidNameTest() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Event(\"\", \"12/08/2019 18:00:00\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void eventInvalidTimeTest() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Task t \u003d new Event(\"Eat dinner\", \"qiyinhuofubiquzhi\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(1, 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 187
    }
  }
]
