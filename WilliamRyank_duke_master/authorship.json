[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "run {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 33,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a deadline which is a subclass of Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * A deadline needs the LocalDateTime to specify when is the deadline due."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDateTime by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public LocalDateTime getDeadlineTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String getTaskBy() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this.by.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DateTimeFormatter myFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(myFormatter) + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 30
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Text dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Circle displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        displayPicture.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Gets user dialog text and image."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param text User input text."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param img User\u0027s image in the application."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Gets duke dialog text and image."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param text Duke output text."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param img Duke\u0027s image in the application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 72
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents the main logic of the applications."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Initializes duke application with the path of the file of the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Gets response every time user send inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param input User\u0027s input to the duke application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @return response to the user\u0027s input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Parser.parse(tasks, ui, input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            storage.save(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return ui.print();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ui.setErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return ui.print();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 32,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 7
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents an event which is a subclass of Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * An event needs the LocalDateTime to specify when the event is happening."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Event(String description, boolean isDone, LocalDateTime at) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String getTaskAt() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this.at.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DateTimeFormatter myFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(myFormatter) + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 26
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            stage.setTitle(\"Duke Task Manager\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().startDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void startDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        welcomeDuke();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Echoes welcome message to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void welcomeDuke() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String response \u003d Ui.printHello();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assert userInput.getText().equals(\"\") : \"User Input should have been cleared\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 64
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Parser which is used to parse the user input depending on their commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses user input based on different type of command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * For each case, different parse requirement is needed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList TaskList of the current file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param ui Ui of the project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput The user input to be parsed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws DukeException If user input is not in the format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static void parse(TaskList taskList, Ui ui, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String inputType \u003d userInput.split(\" \")[0].trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        switch (inputType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            handleTodoInput(taskList, ui, userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            handleListInput(taskList, ui, userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            handleDeadlineInput(taskList, ui, userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            handleEventInput(taskList, ui, userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            handleDoneInput(taskList, ui, userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            handleDeleteInput(taskList, ui, userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            handleFindInput(taskList, ui, userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        case \"sortby\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            handleSortInput(taskList, ui, userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            handleByeInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Converts string to dateTime object in java."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param str String that will be converted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @return Date Time object if str can be converted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException If string can not be converted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static LocalDateTime dateTimeConverter(String str) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String[] dateTime \u003d str.split(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String[] date \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String time \u003d dateTime[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return LocalDateTime.of(Integer.parseInt(date[2]),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                Integer.parseInt(date[1]), Integer.parseInt(date[0]),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        Integer.parseInt(time.substring(0, 2)), Integer.parseInt(time.substring(2)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses \"todo\" user input type."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList TaskList of the current file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param ui Ui of the project."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput The user input to be parsed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws DukeException If user input is not in the format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void handleTodoInput("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            TaskList taskList, Ui ui, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String description \u003d userInput.substring(4).trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Task newTodo \u003d new Todo(description, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            taskList.addTask(newTodo);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ui.printAddTask(taskList, newTodo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! Your input format is wrong. Use: todo [task description]\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses \"deadline\" user input type."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList TaskList of the current file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param ui Ui of the project."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput The user input to be parsed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws DukeException If user input is not in the format"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void handleDeadlineInput("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            TaskList taskList, Ui ui, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            userInput \u003d userInput.substring(8).trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String[] statement \u003d userInput.split(\"/by\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String taskDescription \u003d statement[0].trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String taskBy \u003d statement[1].trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (taskDescription.isBlank() || taskBy.isBlank()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new DukeException(\"OOPS!!! Task description/Task by can not be empty\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Task newDeadline \u003d new Deadline(taskDescription, false, dateTimeConverter(taskBy));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            taskList.addTask(newDeadline);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ui.printAddTask(taskList, newDeadline);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! Format is wrong. \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + \"Use: deadline [task description] /by [dd/mm/yyyy HHmm]\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses \"event\" user input type."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList TaskList of the current file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param ui Ui of the project."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput The user input to be parsed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws DukeException If user input is not in the format"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static void handleEventInput("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            TaskList taskList, Ui ui, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            userInput \u003d userInput.substring(5).trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String[] statement \u003d userInput.split(\"/at\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String taskDescription \u003d statement[0].trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String taskAt \u003d statement[1].trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (taskDescription.isBlank() || taskAt.isBlank()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new DukeException(\"OOPS!!! Task description/Task at can not be empty\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Task newEvent \u003d new Event(taskDescription, false, dateTimeConverter(taskAt));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            taskList.addTask(newEvent);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ui.printAddTask(taskList, newEvent);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! Format is wrong. Use:event [task description] /at [dd/mm/yyyy HHmm]\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses \"list\" user input type."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList TaskList of the current file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param ui Ui of the project."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput The user input to be parsed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws DukeException If user input is not in the format"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void handleListInput("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            TaskList taskList, Ui ui, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            userInput \u003d userInput.substring(4);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!userInput.isBlank()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! Your input format is wrong. Use: list\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses \"done\" user input type."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList TaskList of the current file."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param ui Ui of the project."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput The user input to be parsed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws DukeException If user input is not in the format"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void handleDoneInput("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        TaskList taskList, Ui ui, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            userInput \u003d userInput.substring(4).trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(userInput.trim()) - 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            taskList.getListOfTasks().get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ui.printDoneTask(taskList, taskNumber);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! The task number you specified is not in the list.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! Your input format is wrong. Use: done [task number]\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses \"delete\" user input type."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList TaskList of the current file."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param ui Ui of the project."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput The user input to be parsed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws DukeException If user input is not in the format"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void handleDeleteInput("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        TaskList taskList, Ui ui, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            userInput \u003d userInput.substring(6).trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(userInput.trim()) - 1;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Task deletedTask \u003d taskList.getListOfTasks().get(taskNumber);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            taskList.getListOfTasks().remove(taskNumber);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ui.printDeleteTask(taskList, deletedTask);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! The task number you specified is not in the list.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! Your input format is wrong. Use: delete [task number]\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses \"find\" user input type."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList TaskList of the current file."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param ui Ui of the project."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput The user input to be parsed."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws DukeException If user input is not in the format"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void handleFindInput("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        TaskList taskList, Ui ui, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            userInput \u003d userInput.substring(4).trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String keyword \u003d userInput.trim();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ArrayList\u003cTask\u003e filterTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            for (Task task : taskList.getListOfTasks()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                if (task.getTaskDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    filterTasks.add(task);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ui.printFindTasks(filterTasks);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! Your input format is wrong. Use: find [task description]\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses \"sortby\" user input type."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList TaskList of the current file."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param ui Ui of the project."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput The user input to be parsed."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws DukeException If user input is not in the format"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void handleSortInput("
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            TaskList taskList, Ui ui, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            userInput \u003d userInput.substring(6).trim();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (userInput.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                Collections.sort(taskList.getListOfTasks(), new SortByDeadline());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new DukeException(\"OOPS!!! Category that you specified does not exist\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            ui.printSortTasks(taskList.getListOfTasks(), userInput);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new DukeException(\"OOPS!!! Your input format is wrong. Use: sortby [type of sort]\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void handleByeInput() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 273
    }
  },
  {
    "path": "src/main/java/SortByDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class SortByDeadline implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int compare(Task d1, Task d2) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!(d1 instanceof Deadline) \u0026\u0026 !(d2 instanceof Deadline)) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } else if (!(d1 instanceof Deadline)) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } else if (!(d2 instanceof Deadline)) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return ((Deadline) d1).getDeadlineTime().compareTo(((Deadline) d2).getDeadlineTime());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 16
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a storage in which the data is to be load and rewrite everytime the user use the duke application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        file \u003d new File(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Loads a file to populate the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * If the file does not exist, a new file will be created"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @return the list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            checkFileExist();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                String[] userInput \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                String taskType \u003d userInput[0].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                handleLoadTask(userInput, taskType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Saves current list of tasks to hard drive."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param listOfTasks List that will be saved to the file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static void save(List\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                String taskToAdd;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    taskToAdd \u003d String.format(\"D | %s | %s | %s\\n\", task.isTaskDone() ? \"1\" : \"0\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        task.getTaskDescription(), ((Deadline) task).getTaskBy());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    taskToAdd \u003d String.format(\"E | %s | %s | %s\\n\", task.isTaskDone() ? \"1\" : \"0\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        task.getTaskDescription(), ((Event) task).getTaskAt());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    taskToAdd \u003d String.format(\"T | %s | %s\\n\", task.isTaskDone() ? \"1\" : \"0\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        task.getTaskDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                fw.write(taskToAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Checks if the file exists, if not create a new file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void checkFileExist() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String folder \u003d \"data\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            File directory \u003d new File(folder);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!directory.exists()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                directory.mkdir();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            assert file.exists() : \"File should exist now\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Handles reading a task from the file into the list of tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param userInput User input that has been parsed into a string array"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskType Type of the task that will be read."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static void handleLoadTask(String[] userInput, String taskType) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            boolean isTaskDone \u003d userInput[1].trim().equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            String taskDescription \u003d userInput[2].trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                listOfTasks.add(new Todo(taskDescription, isTaskDone));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                String taskAt \u003d userInput[3].trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                listOfTasks.add(new Event(taskDescription, isTaskDone, Parser.dateTimeConverter(taskAt)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                String taskBy \u003d userInput[3].trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                listOfTasks.add(new Deadline(taskDescription, isTaskDone, Parser.dateTimeConverter(taskBy)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 119
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a task to be represented in the duke applications."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return (isDone ? \"+\" : \"-\"); //return tick or X symbols"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean isTaskDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 33
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a list of tasks that are currently available."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * It is able to add or delete tasks from the current list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        listOfTasks.remove(taskNumber);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public ArrayList\u003cTask\u003e getListOfTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 26
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a todo task which is a subclass of Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * A todo needs a description."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 15
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a user interface that deals with the interaction between the user and computer."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private String printStatement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this.printStatement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void setPrintStatement(String str) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.printStatement \u003d str;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void setErrorMessage(String errorMsg) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.printStatement \u003d errorMsg;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Prints welcome statements for the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static String printHello() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String str \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Prints good bye statements for the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        setPrintStatement(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Prints statements after adding the task to taskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList List contains all the tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param newTask Task that is being added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void printAddTask(TaskList taskList, Task newTask) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String str \u003d \"Got it. I\u0027ve added this task:\\n\" + newTask + \"\\nNow you have \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + taskList.getListOfTasks().size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        setPrintStatement(str);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Prints all the tasks in the taskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList List contains all the tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void printTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String str \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getListOfTasks().size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            int number \u003d i + 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            str +\u003d number + \".\" + taskList.getListOfTasks().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        setPrintStatement(str);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Prints the task that is marked done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList List contains all the tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskNumber ID of the task that will be marked done."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void printDoneTask(TaskList taskList, int taskNumber) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String str \u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + taskList.getListOfTasks().get(taskNumber);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        setPrintStatement(str);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Prints the task that will be deleted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param taskList List contains all the tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param deletedTask Task that is being deleted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void printDeleteTask(TaskList taskList, Task deletedTask) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String str \u003d \"Noted. I\u0027ve removed this task:\\n\" + deletedTask + \"\\nNow you have \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + taskList.getListOfTasks().size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        setPrintStatement(str);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Prints the task that contains the keyword of the search word."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param listOfTasks Tasks that contains the search keyword."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void printFindTasks(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String str \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            int number \u003d i + 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            str +\u003d number + \".\" + listOfTasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        setPrintStatement(str);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Prints the list of tasks after performing sorting."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param listOfTasks Tasks that have been sorted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param sortType Type of the sort that user specified."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void printSortTasks(ArrayList\u003cTask\u003e listOfTasks, String sortType) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String str \u003d \"The list have been sorted according to: \" + sortType + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            int number \u003d i + 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            str +\u003d number + \".\" + listOfTasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        setPrintStatement(str);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 117
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cText fx:id\u003d\"dialog\" fill\u003d\"WHITE\" text\u003d\"Text\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cFont name\u003d\"Georgia\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "         \u003c/font\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003cCircle fx:id\u003d\"displayPicture\" fill\u003d\"WHITE\" radius\u003d\"44.0\" stroke\u003d\"#496285\" strokeType\u003d\"INSIDE\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Circle\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #228B22;\" text\u003d\"Send\" textFill\u003d\"#fafafa\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cFont name\u003d\"Georgia\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"557.0\" prefWidth\u003d\"386.0\" style\u003d\"-fx-background-color: grey;\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 23
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 10
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void addTask_emptyList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        TaskList taskList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        taskList.addTask(new Task(\"borrow book\", false));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(1, taskList.getListOfTasks().size());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void deleteTask_oneTaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        list.add(new Task(\"borrow book\", false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        TaskList taskList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(1, taskList.getListOfTasks().size());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        taskList.deleteTask(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(0, taskList.getListOfTasks().size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 26
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void printCorrectly() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Task todo \u003d new Todo(\"borrow book\", false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(\"[T][-] borrow book\", todo.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 22
    }
  }
]
